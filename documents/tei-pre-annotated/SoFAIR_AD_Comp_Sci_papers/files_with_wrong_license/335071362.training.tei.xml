<?xml version="1.0" encoding="UTF-8"?>
<tei xmlns="http://www.tei-c.org/ns/1.0">
    <teiHeader>
        <fileDesc xml:id="_1"/>
        <encodingDesc>
            <appInfo>
                <application version="0.8.1-SNAPSHOT" ident="GROBID" when="2024-06-24T11:33+0000">
                    <ref target="https://github.com/kermitt2/grobid">A machine learning software for extracting information from scholarly documents</ref>
                </application>
            </appInfo>
        </encodingDesc>
    </teiHeader>
    <text xml:lang="en">
        <p>Spamming is emerging as a key threat to Internet of Things (IoT)-based social media applications. It will pose serious security threats to the IoT cyberspace. To this end, artificial intelligence-based detection and identification techniques have been widely investigated. The literature works on IoT cyberspace can be categorized into two categories: 1) behavior pattern-based approaches; and 2) semantic pattern-based approaches. However, they are unable to effectively handle concealed, complicated, and changing spamming activities, especially in the highly uncertain environment of the IoT. To address this challenge, in this paper, we exploit the collaborative awareness of both patterns, and propose a Collaborative neural network-based Spammer detection mechanism (Co-Spam) in social media applications. In particular, it introduces multi-source information fusion by collaboratively encoding long-term behavioral and semantic patterns. Hence, a more comprehensive representation of the feature space can be captured for further spammer detection. Empirically, we implement a series of experiments on two real-world datasets under different scenario and parameter settings. The efficiency of the proposed Co-Spam is compared with five baselines with respect to several evaluation metrics. The experimental results indicate that the Co-Spam has an average performance improvement of approximately 5% compared to the baselines.</p>
        <p>HE past decade has witnessed the great progress in artificial intelligence and communication networks. Predictably, cyberspace of the Internet of Things (IoT) will become an important living space for human beings in the 5G era [1]. Accordingly, cyberspace security will be of great importance to the economic prosperity and social stability, such as the spammer detection. Online spamming is gradually becoming a remarkable security threat to the IoT-based social media applications [2]. In literature, spammers refer to communities that publish tendentious statements in a variety of media to satisfy their commercial or political goals [9]. To ensure a secure and reliable environment, effective detection or identification mechanisms for spammers hold significant importance [17]. Nevertheless, precise spammer detection for IoT-based social media is usually regarded as a challenging task in actual practice for two reasons. First, online spamming is highly associated with social networks; thus, contextual information such as social relations and even financial relations needs to be deeply analyzed as an auxiliary. Second, excellent modeling schemes for semantic features play an important role. This is because the main purpose of online spamming is to create specific directions for public opinion [24]. Considering more complicated environment in IoT applications, establishing more fine-grained feature spaces will greatly influence the effect of spammer detection [34].</p>
        <p>In fact, in recent years, a considerable number of studies have been devoted to spammer detection. Relevant studies can be classified into two types: behavioral pattern-based approaches [3]- [19] and semantic pattern-based approaches [20]- [30]. The former concentrate on the pattern characteristics of primary behaviors such as social behaviors, comment behaviors, and forwarding behaviors. For example, Cao et al. [6] set up two different detection methods for individuals and groups respectively. In particular, they proposed to identify hidden spammers by leveraging collusive relations between spammers and business competition between locations. In contrast, the latter emphasize the semantic features of speech contents from the perspective of language statistics. For instance, Wang et al. [26] proposed a detection framework named GSLDA for group spamming detection in product review data. The GSLDA first adapts LDA (Latent Dirichlet Allocation) algorithm to the product review context to cluster similar reviewers, and deviated suspicious groups. However, T both types suffer from some limitations or drawbacks. On the one hand, the concealment of spamming activities is becoming mature over the course of long-term confrontations with regulatory mechanisms, resulting in difficulties for recognition. For instance, many spammers generally perform normal browsing and speaking behaviors like ordinary users. In this case, only a small number of spamming operations are involved. On the other hand, most semantic pattern-based approaches are endowed with a good ability to analyze and understand only regular machine speech. Such approaches are not suitable for complicated and changeable contents. In summary, global insights into multisource information fusion are urgently needed to improve the accuracy of spammer identification.</p>
        <p>To address this challenge, this paper manages to capture a more comprehensive representation of the feature space. It does so by combining behavior patterns and semantic patterns. Such an idea of multisource information integration is likely to become a more promising solution, especially under IoT environment. Although Yuan et al. [31] and Wang et al. [32] once dealt with spammer detection problems by simultaneously considering semantic and behavioral patterns, they still neglected the dynamic characteristics of social activities. In particular, their approaches were established based on the assumption that social activities at different timestamps are mutually independent, and the evolving nature of social activities was not considered.</p>
        <p>In this paper, a Collaborative neural network-based Spammer detection mechanism (Co-Spam) is proposed to solve the problem above. Co-Spam combines both semantic and behavioral patterns to solve spammer detection problems. In addition, the evolving environments of social activities are included. In our work, the speech contents and behavior records of users at different timestamps are first viewed as their feature sequences. At each timestamp, a bidirectional autoencoder (Bi-AE) is developed to model semantic characteristics, and a graph convolutional network (GCN) is designed to learn the embeddings of behavior patterns. After that, the feature space at each timestamp is obtained through a hybrid mapping of the two components, and a long short-term memory (LSTM) model is introduced to express the evolving characteristics of the feature sequence. At last, we implement a series of experiments on two real-world datasets. Five typical baselines are selected as comparison to assess efficiency of the proposed Co-Spam under several common metrics. The main contributions of this paper are summarized as follows: a) We recognize the limitations of existing spammer detection methods, especially under the schemes of IoT-based social media. b) We manage to construct a fine-grained feature space combining semantic and behavioral patterns, and we propose the Co-Spam for IoT-based social media. c) Based on our simulation results, we find that the Co-Spam has an average performance improvement of approximately 5% compared to the baselines.</p>
        <p>The primary architecture of the proposed Co-Spam is illustrated in Fig. 1. It is assumed that 𝑢 𝑖 (𝑖 = 1,2, ⋯ , |𝑢|) denotes the set of users in IoT-based social media. Each user is assumed to able to perform various online activities inside it.</p>
        <p>Considering the time-varying characteristics in IoT environment, long-term activities are separated into a number of parts with respect to a total of 𝑇 timestamps whose index symbols are denoted as 𝑡(𝑡 = 1,2, ⋯ , 𝑇). For user 𝑢 𝑖 at the 𝑡-th timestamp, it is necessary to construct a global feature space 𝓖 𝑖 (𝑡) by exploiting the collaborative awareness of semantic factor 𝑺 𝑖 (𝑡) and behavior pattern factor 𝒀 𝑖 (𝑡) . Finally, the long-term evolving characteristics of the global feature space are modeled via a recurrent neural network approach to calculate the nature of user 𝑢 𝑖 . In a word, the whole workflow of the Co-Spam can be viewed as two types of procedures: encoding and decoding. At each timestamp, semantic and behavioral patterns of a user are respectively encoded into abstract feature factors through Bi-AE and GCN. After long-term feature factors constitute a sequence, LSTM is employed to encode such a pattern sequence. At the 𝑡-th timestamp, the textual contents associated with user 𝑢 𝑖 are denoted as 𝑐 𝑖 (𝑡) . Because the span of each timestamp does not last very long (one day or even one hour), the textual contents within a timestamp are assumed to constitute one sentence. Then, a Bi-AE model is formulated to obtain the encoding of semantics factor 𝑺 𝑖 (𝑡) . In addition, a series of behavior patterns correlated to user 𝑢 𝑖 constitute a GCN model, where specific behaviors are regarded as nodes and their relations are viewed as edges. Then, a GCN model is developed to learn the graph embedding of behavior patterns denoted as 𝒀 𝑖 (𝑡) . Correspondingly, the global feature space 𝓖 𝑖 (𝑡) of this timestamp is formulated by concatenating semantic factor 𝑺 𝑖 (𝑡)</p>
        <p>and behavior pattern factor 𝒀 𝑖 (𝑡) together. Generalized to the whole time domain, an LSTM model is established to model the evolving characteristics of the series of activities and, finally, to identify the nature of user 𝑢 𝑖 .</p>
        <p>This section fully considers characteristics of IoT situations, and presents mathematical descriptions of the Co-Spam. It is composed of three parts corresponding to three subsections: semantic pattern modeling, behavioral pattern modeling and prediction.</p>
        <p>It is necessary to model the semantic patterns of sentences to consider vectorized expressions from both forward and backward directions. Bi-AE is developed to encode semantic characteristics at different timestamps, as illustrated in Fig. 2. At the 𝑡 -th timestamp, Bi-AE tries to capture semantic embedding through the following two formulas:</p>
        <p>where Φ ⃗⃗⃗ (•) and Φ ⃖⃗⃗⃗ (•) denote the forward and backward activation operators for the sequence 𝑐 𝑖 (𝑡) , respectively, and 𝑗 is the index number of words ranging from 1 to 𝑁 𝑖 (𝑡) . Specifically, the former models the sequence with 𝑗 changing from 1 to 𝑁 𝑖 (𝑡) , while the latter models the sequence with 𝑗 changing from 𝑁 𝑖 (𝑡)</p>
        <p>to 1. 𝒉 ⃗ ⃗ 𝑖𝑗 (𝑡) and 𝒉 ⃖⃗ ⃗ 𝑖𝑗 (𝑡) denote the forward and backward hidden states, respectively, and they are concatenated into a novel hidden state vector, 𝒉 𝑖𝑗 (𝑡) = [𝒉 ⃗ ⃗ 𝑖𝑗 (𝑡) , 𝒉 ⃖⃗ ⃗ 𝑖𝑗 (𝑡) ].</p>
        <p>This work categorizes all words into two types, crucial words and background words, as each word is likely to play different roles concerning the meaning of a sentence. Clearly, crucial words are the main contributors of meanings, and background words are the auxiliary parts with regard to sentence integrity.</p>
        <p>Hence, an attention mechanism is introduced to automatically extract crucial words from sentences at each timestamp. Then, all the selected key words are transferred into a central vector:</p>
        <p>where 𝒉 𝑖𝛼 (𝑡) is the hidden state of the 𝛼-th crucial word and 𝛼 is the index number of crucial words ranging from 1 to 𝜔 𝑖 (𝑡) .</p>
        <p>Accordingly, the remaining background words are transferred into an edge vector:</p>
        <p>where 𝒉 𝑖𝛽 (𝑡) is the hidden state of the 𝛽-th background word and 𝛽 is the index number of background words ranging from 1 to (𝑁 𝑖 (𝑡) -𝜔 𝑖 (𝑡) ). The concatenation of the central vector and edge vector results in the hidden vector at the 𝑡-th timestamp:</p>
        <p>To encode the semantic feature space, the attention weight for crucial words and background words needs to be deduced. The attention weight of crucial words is defined as:</p>
        <p>where 𝑾 𝑖1 , 𝑾 𝑖𝐻 and 𝑾 𝑖𝐶 are weight matrices, 𝒃 𝑖1 is the bias parameter, 𝜎 1 (•) is the softmax activation function, and 𝜎 2 (•) is the tanh activation function. For user 𝑢 𝑖 , the enhanced hidden state vector for crucial words at the 𝑡-th timestamp is deduced as:</p>
        <p>Similarly, attention weight for background words is defined as:</p>
        <p>where 𝑾 𝑖2 , 𝑾 𝑖𝐻 and 𝑾 𝑖𝐸 are weight matrices and 𝒃 𝑖2 is the bias parameter. The enhanced hidden state vector for background words at the 𝑡-th timestamp is deduced as:</p>
        <p>Therefore, the goal of semantic modeling is to learn a mapping function 𝑆 𝑖 (𝑡) that best expresses the semantic embeddings for user 𝑢 𝑖 at the 𝑡-th timestamp:</p>
        <p>where 𝑾 𝑖3 and 𝑾 𝑖4 are weight matrices and 𝜏 is the trade-off parameter.</p>
        <p>This subsection proposes to encode the behavior pattern features of users through GCN. As is shown in Fig. 3, behavior pattern types are viewed as nodes and the relations among them are regarded as edges. Given that the initial contents of these nodes are mostly unsuitable for direct calculation, they are expected to be mapped into vectorized numerical data. Data categories are generally structured data, and their contents can be encoded into feature vectors via one-hot encoding.</p>
        <p>Examples of some attributes are shown in TABLE I.</p>
        <p>In addition, there are some attributes whose data structures are initially numerical, namely, the registration time and number of speeches. The contents of these attributes are directly transferred into vectors without extra operations. Because the dimensions of different attributes are usually diverse, the attribute with the most dimensions is selected as uniformity, which is assumed to be 𝒟. Then, the dimensions of other attributes are extended to 𝒟 by adding a certain number of zeros.</p>
        <p>For user 𝑢 𝑖 , his or her behavior pattern vector at the 𝑡-th timestamp can be represented as the following format:</p>
        <p>where 𝑧 is the actual number of behavior patterns. The GCN manages to learn the graph embedding of the 𝛾-th behavior pattern:</p>
        <p>where 𝓡 𝑖𝛾 (𝑡) (𝛾, 𝜂) is the adjacency matrix at the 𝑡-th timestamp, 𝑸 𝑖 𝜂→𝛾 is the set of transition matrices into the 𝛾-th behavior pattern, and 𝒆 𝑖𝛾 (𝑡) is the bias vector. Among them, 𝓡 𝑖𝛾 (𝑡) (𝛾, 𝜂) is defined as:</p>
        <p>where 𝜓(•) is the counting operator and 𝜉 is the index number of a behavior pattern different from 𝛾 and 𝜂 . 𝜓(𝑞 ̃𝑖𝛾 (𝑡) ) and 𝜓(𝑞 ̃𝑖𝜂 (𝑡) ) denote the change frequency of the 𝛾 -th and 𝜂 -th behavior patterns during the timestamp, respectively. Similarly, 𝜓(𝑞 ̃𝑖𝛾 (𝑡) ∩ 𝑞 ̃𝑖𝜂 (𝑡) ) denotes the cooccurrence frequency of the 𝛾-th and 𝜂 -th behavior patterns, and 𝜓(𝑞 ̃𝑖𝛾 (𝑡) ∩ 𝑞 ̃𝑖𝜉 (𝑡) ) denotes the cooccurrence frequency of the 𝛾-th and 𝜉-th behavior patterns during the timestamp.</p>
        <p>For the 𝛾-th behavior pattern, we follow [33] to divide the transition matrix into two transition factors with respect to two directions: input factor 𝓠 𝑖𝛾 (𝐼𝑛) and output factor 𝓠 𝑖𝛾 (𝑂𝑢𝑡) . For a directed edge from the 𝛾 -th to 𝜂 -th behavior pattern, the relation state is essentially transmitted from 𝓠 𝑖𝛾 (𝑂𝑢𝑡) to 𝓠 𝑖𝜂 (𝐼𝑛) , which is represented as:</p>
        <p>Thus, the learning goal in Eq. ( 12) can be rewritten as:</p>
        <p>The graph embedding vector of behavior patterns is supposed to be transferred into the convolutional layer and full connection layer of the GCN to generate encoding results. Convolutional operation maps the embedding vectors into a high-order feature, which is described as:</p>
        <p>where 𝜎 3 (•) is the ReLU activation function, ⊗ is the convolution operator, 𝑾 𝑖4 is the weight parameter, and 𝒃 𝑖2 is the bias vector. The full connection layer manages to map 𝓧 𝑖 (𝑡)</p>
        <p>into a deeper vectorized format, which is represented as:</p>
        <p>where 𝑾 𝑖5 and 𝑾 𝑖6 are weight matrices and 𝑏 𝑖𝑌 and 𝑏 𝑖𝑌 ′ are bias vectors.</p>
        <p>The global embedding of the feature space at the 𝑡 -th timestamp is supposed to be established by combining encoded semantic feature factor 𝑺 𝑖 (𝑡) with behavior pattern feature factor 𝒀 𝑖 (𝑡) , which can be expressed as:</p>
        <p>where 𝓨 1 and 𝓨 2 are two mapping matrices that match the dimensions of those two factors and ⊕ denotes the concatenation operation. Thus far, the collaborative feature matrices of user 𝑢 𝑖 at different timestamps constitute a time-series feature sequence. This subsection manages to model the time-varying evolution of collaborative feature embedding 𝓖 𝑖 (𝑡) with the utilization of the LSTM, whose architecture is shown in Fig. 4. At each timestamp, it takes both the collaborative feature embedding 𝓖 𝑖 (𝑡) and the status output from previous timestamp 𝓞 𝑖 (𝑡-1) as inputs. Status encoding is output after the processing of three main components: the forget gate, input gate and output gate. The control factor of the forget gate at the 𝑡-th timestamp is computed as:</p>
        <p>where 𝑾 𝑖𝑓 and 𝒃 𝑖𝑓 are the weight matrix and bias matrix, 𝓞 𝑖 (𝑡-1) is the encoding output of the previous timestamp, and 𝜎 4 (•) is the sigmoid activation function: 𝜎 4 (𝑥) =</p>
        <p>The cell state factor of the input gate at the timestamp is computed as:</p>
        <p>𝓩 ̃𝑖 (𝑡) = 𝜎 2 {𝑾 𝑖𝒵 [𝓞 𝑖 (𝑡-1) , 𝓖 𝑖 (𝑡) ] + 𝒃 𝑖𝒵 }</p>
        <p>𝓩 𝑖 (𝑡) = 𝒇 𝑖 (𝑡) 𝓩 𝑖 (𝑡-1) + 𝓥 𝑖 (𝑡) 𝓩 ̃𝑖 (𝑡) (24) where 𝑾 𝑖𝒱 and 𝑾 𝑖𝒵 are weight matrices and 𝒃 𝑖𝒱 and 𝒃 𝑖𝒵 are bias parameters.</p>
        <p>The control factor of the output gate at the 𝑡-th timestamp is computed as:</p>
        <p>where 𝑾 𝑖𝒪 and 𝒃 𝑖𝒪 are the weight matrix and bias parameter, respectively. Output matrix 𝓞 𝑖 (𝑇) is the final output of the LSTM for user 𝑢 𝑖 at the last timestamp 𝑇.</p>
        <p>For spammer detection as a binary classification scheme, a sigmoid function-based attentive expression is introduced here to predict the nature of users:</p>
        <p>where 𝑾 𝑖ℱ and 𝒃 𝑖ℱ are the weight matrix and bias vector, respectively. The values of ℱ 𝑖 are located in the range of (0,1), and Shannon entropy is adopted here to set up the following optimization objective:</p>
        <p>where |𝑢| is the number of users, ℱ ̂𝑖 is the nature of the observed user, and Θ is the set of parameters that can be searched through the following iterative procedure:</p>
        <p>Twitter and Sina Weibo, two universally acknowledged social network data sources, are utilized in this research for experimental evaluation, given that there are no datasets of IoT-based social media that are publicly available and related data are still hard to acquire due to the imperfect functions of applications. Two datasets with respect to these two platforms are briefly described as follows:</p>
        <p>Twitter 1 -This dataset was collected by Yang et al. [35] and crawled from the Twitter website with the aid of the official API. The dataset contains 11000 labeled users as well as their records of tweets and behaviors, with 1000 being marked as spammers. In addition, the dataset includes metadata such as personal profiles, authentication statuses, social relationships, identity information and locations.</p>
        <p>Weibo 2 -We utilized the Weibo API to collect the metadata and activity records of 6072 relatively active users in June 2019. Five graduate students were assigned to label all of these Weibo users according to artificial experience. For inconsistent labeling, the label endorsed by the majority was selected as the final label. In total, 1158 users were marked as spammers. In addition, this dataset involves metadata such as social relationships, blog contents, personal profiles and identity 1 http://faculty.cse.tamu.edu/guofei/research_release.html 2 This dataset will be released publicly after related programs are completed.</p>
        <p>Topic model LDA is used to extract the semantic features of users. In addition, spammers can be detected through a K-means clustering algorithm. [26] Bi-AE+LR</p>
        <p>The semantic features of users are represented by Bi-AE, as described in Section III.A. In addition, spammers are detected by logistic regression (LR).</p>
        <p>Behavior pattern features are extracted and encoded as Co-Spam. In addition, spammers are detected by a support vector machine (SVM).</p>
        <p>Behavior pattern features are encoded as Co-Spam. In addition, spammers are detected by a convolutional neural network (CNN).</p>
        <p>The features of semantic behavior patterns and semantics are encoded. Spammers are detected by nonnegative matrix factorization (NMF). [15]</p>
        <p>Precision 𝜓(𝑇𝑃) 𝜓(𝑇𝑃) + 𝜓(𝐹𝑃)</p>
        <p>𝜓(𝑇𝑃) + 𝜓(𝑇𝑁) 𝜓(𝑇𝑃) + 𝜓(𝐹𝑃) + 𝜓(𝑇𝑁) + 𝜓(𝐹𝑁)</p>
        <p>Every tweet or blog of each user, as well as the behaviors occurring close to it, is viewed as a record of his or her activity associated with one timestamp. To virtualize the scenarios of this research, the behavior attributes are expanded and listed in TABLE III.</p>
        <p>Spammer detection is a binary classification process in which spammers and normal users are labeled 1 and 0, respectively. To measure the classification performance of detection methods, four conceptions are introduced. True positive (TP) and false positive (FP) are defined as samples that are correctly and incorrectly predicted to be positive, respectively. Similarly, true negative (TN) and false negative (FN) are defined as samples that are correctly and incorrectly predicted to be negative, respectively. Thus, the expressions of the five evaluation metrics utilized in our experiments are mathematically defined in TABLE II. Among them, 𝑃𝑂𝑆 and 𝑁𝐸𝐺 denote positive and negative samples, 𝜓(•) denotes the counting operation, and 𝐾(•) denotes the returning index number.</p>
        <p>Five typical classification methods, which are described in TABLE IV, are selected as baselines to be compared with the proposed Co-Spam. To assess effect of collaborative awareness of semantic pattern and behavioral pattern, the two factors are The development environment of the experiments involves a deep learning workstation with a 28-core CPU and 256 GB of memory. The proposed Co-Spam is implemented with the aid of 
            <rs type="software">TensorFlow</rs>. In one sentence, topic words and background words are sampled through the proportion of 60% and 40%, respectively. Initially, the batch size of Co-Spam was set to 200, and the SGD learning rate was set to 0.01, where the trade-off parameters 𝜏 of Eq. ( 10) and 𝜆 of Eq. ( 27) were set to 0.5. The ratio of training data was initially set to 70% and was changed multiple times during the experiments.
        </p>
        <p>TABLE V lists the experimental results based on two datasets under different proportions of training data with respect to two metrics: precision and recall. It can be intuitively observed that the proposed Co-Spam always performs better than the baselines with different proportions of training data, 50%, 60% and 70%. Fig. 5 and Fig. 6 demonstrate the joint relations between precision and recall based on two datasets through six scatter diagrams, in which a larger distance between a scatter and the origin indicates better performance of such a method. This group of experiments is able to effectively reflect the advantages of collaborative awareness between semantic and behavior patterns because the relatively global view certainly provides a considerable improvement of detection precision. It is also noticed that Co-Spam failed to obtain the best performance on Twitter when training size is 50%. As the training size is small, the Co-Spam may not be well trained yet. This fact is likely to bring some uncertainty. Fig. 7 and Fig. 8 illustrate the F-score results and accuracy results, respectively, based on two datasets with respect to four proportions of training data, in which the proportion of 80% is further taken into consideration. Two aspects of this phenomenon can be deduced from these figures. First, most methods obtain relatively ideal results when the proportion of training data is set to 70%, and they perform better than when the proportion of training data is set to 80%. Second, the proposed Co-Spam always performs dramatically better than the baselines, regardless of the proportion of training data. The above results can be attributed to the fact that the Co-Spam method collaboratively exploits the characteristics of semantic and behavior patterns. Such a comprehensive insight promotes the depth of the feature space and will certainly improve the results compared with general spammer detection methods. The two subfigures in Fig. 9 show the AUC results of the Co-Spam and baselines obtained based on two datasets with respect to three sizes of training data: 50%, 60% and 70%. This group of experimental results reflects the relatively stable performance with the changing tendency of the Co-Spam and baselines. Overall, behavior-based methods perform better than semantic-based methods but worse than methods jointly driven by both semantic and behavior patterns. Compared with the NMF method based on both types of factors, the proposed Co-Spam still shows better performance. This group of experimental results evaluated the excellent performance of the proposed Co-Spam again. In addition to the collaborative awareness of semantic and behavior patterns, it also takes the evolving nature of social activities into account, which is the main reason the results above were obtained.</p>
        <p>In summary, the proposed Co-Spam is able to obtain an improvement of approximately 5% compared with existing mainstream spammer detection approaches. It is undeniable that time complexity of Co-Spam is quite large, because its model has a large number of parameters. Therefore, price of good detection precision is the time complexity.</p>
        <p>The past decade has witnessed great progress in the IoT, which has become an essential component in future smart cities. However, the emergence of spamming problems in IoT-based social media applications is posing increasingly serious security threats to IoT cyberspace. To that end, effective spammer detection methods have been a major concern in academia. Existing research can be divided into two types: semantic pattern-based approaches and behavior pattern-based approaches. However, all such approaches suffer from some drawbacks or limitations to some extent. To tackle this challenge, this paper leverages the collaborative awareness of these two factors and proposes a novel spammer detection mechanism named Co-Spam for future IoT applications. First, the speech contents and behavior records of a user at different timestamps are viewed as feature sequences. Then, a collaborative neural network architecture composed of three neural network models, a Bi-AE, a GCN and the LSTM, is developed to identify the nature of the user. Finally, a series of experiments are conducted to verify the efficiency of the proposed Co-Spam. At the same time, running time of the Co-Spam is longer than general baselines. This is because a huge amount of parameters are introduced to construct more fine-grained feature space. The obtainment of relative ideal detection precision is taken high computational complexity as price. This is one major direction in the future researches.</p>
        <p>This work was supported in part by the State Language Commission Research Program of China under grant YB135-121, in part by the Chongqing Natural Science Foundation of China under grant cstc2019jcyj-msxmX0747, in part by the Japan Society for the Promotion of Science (JSPS) Grants-in-Aid for Scientific Research (KAKENHI) under Grant JP18K18044, and in part by the Key Research Project of Chongqing Technology and Business University under grant ZDPTTD201917, grant KFJJ2018071, and grant 1856033.</p>
    </text>
</tei>
