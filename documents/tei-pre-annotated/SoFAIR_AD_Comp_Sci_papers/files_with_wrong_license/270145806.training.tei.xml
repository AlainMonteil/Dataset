<?xml version="1.0" encoding="UTF-8"?>
<tei xmlns="http://www.tei-c.org/ns/1.0">
    <teiHeader>
        <fileDesc xml:id="_1"/>
        <encodingDesc>
            <appInfo>
                <application version="0.8.1-SNAPSHOT" ident="GROBID" when="2024-06-13T15:21+0000">
                    <ref target="https://github.com/kermitt2/grobid">A machine learning software for extracting information from scholarly documents</ref>
                </application>
            </appInfo>
        </encodingDesc>
    </teiHeader>
    <text xml:lang="en">
        <p>Distributed Denial of Service (DDoS) is one of the most rampant attacks in the modern Internet of Things (IoT) network infrastructures. Security plays a very vital role for an ever-growing heterogeneous network of IoT nodes, which are directly connected to each other. Due to the preliminary stage of Software Defined Networking (SDN), in the IoT network, sampling based measurement approaches currently results in low-accuracy, higher memory consumption, higher-overhead in processing and network, and low attack-detection. To deal with these aforementioned issues, this paper proposes 
            <rs type="software">sFlow</rs> and adaptive polling based sampling with 
            <rs type="software">Snort</rs> Intrusion Detection System (IDS)and deep learning based model, which helps to lower down the various types of prevalent DDoS attacks inside the IoT network. The flexible decoupling property of SDN enables us to program network devices for required parameters without utilizing third-party propriety based hardware or software. Firstly, in data-plane, to lower down processing and network overhead of switches, we deployed 
            <rs type="software">sFlow</rs> and adaptive polling based sampling individually. Secondly, in control-plane, to optimize detection accuracy, we deployed 
            <rs type="software">Snort</rs> IDS collaboratively with Stacked Autoencoders (SAE) deep learning model. Furthermore, after applying performance metrics on collected traffic streams, we quantitatively investigate trade off among attack detection accuracy and resources overhead. The evaluation of the proposed system demonstrates higher detection accuracy with 95% of True Positive rate with less than 4% of False Positive rate within sFlow based implementation compared to adaptive polling.
        </p>
        <p>The rapid growth of the Internet of Things (IoT) has become very popular throughout the world, it has emerged in our modern smart homes, vehicles and many other wearable gadgets. IoT is a combination of large interconnected devices, such as household appliances, wearable devices, medical devices, smart vehicles and public facilities provider [41,31]. According to the research [64], tens of billions of vulnerable devices will be connected to IoT. Most of these devices do not use secure communication protocols or appropriate security measures when interfacing with computing and storage units. These vulnerabilities provide temptation not only for enterprises wanting to acquire data for the adoption of intelligent management system or digital proof but also for malicious users (i.e., attackers), which diffuse intrusion or service disruption such as Distributed Denial of Service (DDoS). Once a DDoS attack occurs then it can severely threaten human life safety directly or indirectly -for instance, connected medical devices, home or critical infrastructure monitoring. Current studies in [58,30] depict that IoT is also vulnerable to viruses. Studies of current DDoS attacks have also proved that IoT has ubiquitous loopholes with the initial stage. If the security approaches have not been deployed in IoT then DDoS attacks unwillingly arise. DDoS attacks are raja.vjjan@uws.ac.uk (R.M.A. Ujjan); zeeshan.pervez@uws.ac.uk (Z. Pervez); keshav.dahal@uws.ac.uk (K. Dahal); dr.alikashif.b@ieee.org (A.K. Bashir); shmu@gs-lda.com (R. Mumtaz); jonathan@gs-lda.com (J. González) ORCID(s): capable to make most of the network services unavailable by utilizing all available server resources with continuous undesirable traffic floods. Cisco Visual Networking Index (VNI) has depicted in a survey, nearly 17 millions of DDoS intrusion activities can happen by 2020, as a triple increment to 2015 incidents [11]. Nature of attacks is also switching from a single flooding attack to multiple attack vectors.The rapid growth of the Internet of Things (IoT) has become very popular throughout the world, it has emerged in our modern smart homes, vehicles and many other wearable gadgets. IoT is a combination of large interconnected devices, such as household appliances, wearable devices, medical devices, smart vehicles and public facilities provider [41,31]. According to the research [64], tens of billions of vulnerable devices will be connected to IoT. Most of these devices do not use secure communication protocols or appropriate security measures when interfacing with computing and storage units. These vulnerabilities provide temptation not only for enterprises wanting to acquire data for the adoption of intelligent management system or digital proof but also for malicious users (i.e., attackers), which diffuse intrusion or service disruption such as Distributed Denial of Service (DDoS). Once a DDoS attack occurs then it can severely threaten human life safety directly or indirectly -for instance, connected medical devices, home or critical infrastructure monitoring. Current studies in [58,30] depict that IoT is also vulnerable to viruses. Studies of current DDoS attacks have also proved that IoT has ubiquitous loopholes with the initial stage. If the security approaches have not been deployed in IoT then DDoS attacks unwillingly arise. DDoS attacks are raja.vjjan@uws.ac.uk (R.M.A. Ujjan); zeeshan.pervez@uws.ac.uk (Z. Pervez); keshav.dahal@uws.ac.uk (K. Dahal); dr.alikashif.b@ieee.org (A.K. Bashir); shmu@gs-lda.com (R. Mumtaz); jonathan@gs-lda.com (J. González) ORCID(s): capable to make most of the network services unavailable by utilizing all available server resources with continuous undesirable traffic floods. Cisco Visual Networking Index (VNI) has depicted in a survey, nearly 17 millions of DDoS intrusion activities can happen by 2020, as a triple increment to 2015 incidents [11]. Nature of attacks is also switching from a single flooding attack to multiple attack vectors.</p>
        <p>In 2016, the largest DDoS attacks [42]were recorded, these DDoS attacks were caused due to unauthorised remote access to IoT devices and security weakness. This vulnerability enables the undetected attackers to instal Botnet at various nodes of IoT devices, where compromised IoT devices nodes generate the high traffic and exhausts the resources.In 2016, the largest DDoS attacks [42]were recorded, these DDoS attacks were caused due to unauthorised remote access to IoT devices and security weakness. This vulnerability enables the undetected attackers to instal Botnet at various nodes of IoT devices, where compromised IoT devices nodes generate the high traffic and exhausts the resources.</p>
        <p>Most of financial, social-media, entertainment, medical, business and engineering sectors are under attacks [22], thus posing reputation and financial losses of these sectors at risk. However, it has become a very mandatory concern to detect this kind of attacks in real time with larger network premises. In large networks, Intrusion Detection Systems (IDS) are widely deployed for providing a safeguard against network threats. IDS is capable to monitor and analyze network packets either in-line mode or passive mode. Most of the detection systems utilize collaborative work with IDS and algorithms for accurate detection processing and reliable data analysis. IDS cannot be a feasible solution for real-time monitoring without these capabilities, which left systems vulnerable for various attackers [4]. The major concerns behind this fact is that network traffic is exponentially growing day by day, so it is becoming more complex to select ap-propriate IDS placement point, addition to this IDS is also limited with hardware resources within large networks. The survey of recent study [55] depicts performance comparison between 
            <rs type="software">Snort</rs> and machine learning applications, experimental results show that 
            <rs type="software">Snort</rs> as a stand-alone tool reaches 9.5% average packet drop with 4 Gbps network and 20% average packet drop within 10 Gbps network. To optimize network packet losses several studies have been proposed such as sampling-based IDS in SDN [18] and deep learning based DDoS detection system in SDN [45].
        </p>
        <p>Software Defined Networking (SDN) in collaboration with packet sampling and deep learning based applications have received much attention from researchers [17,45,18]. SDN provides the centralized global view of the entire infrastructure with programmable control-plane and data-plane individually. As intrusion detection technology is exponentially rising in current network security approaches, researchers are facing challenges on how to manage a large significant amount of sampled traffic load in an effective way. The researchers have proposed network traffic characteristics which comprise the size of flow table [5], deviation in traffic flow [26] and anomaly statistics with sampling [33]. The authors in [5] proposed sampling technique based on flow-size. According to the authors, most of the network attacks use the small size of traffic flow from a malicious traffic source. From experiments, they depicted that malicious traffic flow size is much smaller than certain sampled threshold values with constant probability. The authors of [26] proposed an IDS based method on statistics of traffic flow. The research studies represent that flow rapidly increased during the event of a network attack. The sampled traffic was partitioned into sub-sections followed by a source autonomous system data. Moreover, their experimental analysis pragmatically improves the overall intrusion detection ability. In [33], the authors presented that sampling approaches reduce detection ability for non-volume dependent anomalies. The authors implemented three different intrusion detection algorithms for detecting non-volume malicious traffic from both sampled traffic and original data trace. Their results depicted that sampling network traffic can increase false-positive triggers and reduce overall detection capability of IDS. The authors of [20] proposed a feasible pattern matching approach to improve Snort IDS performance, the research work mainly focused to reduce false-positive alarms. The deployment of IDS was based on co-detection of misuse and anomaly approaches. The overall system proposed fast and reliable packet inspection with very fewer resources utilization. Most of the authors have proposed DDoS detection approaches in SDN with unreal and redundant datasets, which mainly focus only on SDN control-layer. The existing literature comprises control-plane sampling approaches due to the initial stage of SDN features, which also lead to low detection accuracy and higher resource consumption.Software Defined Networking (SDN) in collaboration with packet sampling and deep learning based applications have received much attention from researchers [17,45,18]. SDN provides the centralized global view of the entire infrastructure with programmable control-plane and data-plane individually. As intrusion detection technology is exponentially rising in current network security approaches, researchers are facing challenges on how to manage a large significant amount of sampled traffic load in an effective way. The researchers have proposed network traffic characteristics which comprise the size of flow table [5], deviation in traffic flow [26] and anomaly statistics with sampling [33]. The authors in [5] proposed sampling technique based on flow-size. According to the authors, most of the network attacks use the small size of traffic flow from a malicious traffic source. From experiments, they depicted that malicious traffic flow size is much smaller than certain sampled threshold values with constant probability. The authors of [26] proposed an IDS based method on statistics of traffic flow. The research studies represent that flow rapidly increased during the event of a network attack. The sampled traffic was partitioned into sub-sections followed by a source autonomous system data. Moreover, their experimental analysis pragmatically improves the overall intrusion detection ability. In [33], the authors presented that sampling approaches reduce detection ability for non-volume dependent anomalies. The authors implemented three different intrusion detection algorithms for detecting non-volume malicious traffic from both sampled traffic and original data trace. Their results depicted that sampling network traffic can increase false-positive triggers and reduce overall detection capability of IDS. The authors of [20] proposed a feasible pattern matching approach to improve Snort IDS performance, the research work mainly focused to reduce false-positive alarms. The deployment of IDS was based on co-detection of misuse and anomaly approaches. The overall system proposed fast and reliable packet inspection with very fewer resources utilization. Most of the authors have proposed DDoS detection approaches in SDN with unreal and redundant datasets, which mainly focus only on SDN control-layer. The existing literature comprises control-plane sampling approaches due to the initial stage of SDN features, which also lead to low detection accuracy and higher resource consumption.</p>
        <p>To solve the aforementioned problems, we proposed a novel solution to effectively detect DDoS traffic in IoT. Our proposed solution uses 
            <rs type="software">sFlow</rs> and adaptive polling based sampling in data-plane to manage heavy traffic flows. These sampling approaches lower down network burden and enables IDS to record malicious activities effectively. Our work uses Snort and Stacked Autoencoders (SAE), an unsupervised algorithm to improve detection accuracy with real-time network traces collected with IDS in SDN. In this work, we utilized packet based 
            <rs type="software">sFlow</rs> and time-oriented adaptive polling based sampling approaches inside data-plane switches, to rebuild real-time network flows statistic with low CPU and network overhead. This enables the DDoS detection model to effectively classify traffic during DDoS floods. We also provided a comparison between OpenFlow based 
            <rs type="software">sFlow</rs> and adaptive polling based sampling schemes to improve the IDS detection inaccuracies, while keeping total sampled flows lower than IDS processing power. This enables to acquire data with Snort IDS over the controller. Our work achieved less than 4% of False Positive alerts with 95% True Positive rate in packet-based sampling, which is comparatively better than time oriented sampling. Proposed work is evaluated in 
            <rs type="software">Tensorflow</rs>
            <rs type="version">1.4</rs> by utilizing a confusion matrix.
        </p>
        <p>This paper is organised as: in Section II, we present related work. Section III provides main sampling approaches. In the Section IV, we discuss main architectural components of the proposed system. In Section V, we present traffic analysis. Finally, we discuss experimental setup and results evaluation in Section VI and VII respectively.This paper is organised as: in Section II, we present related work. Section III provides main sampling approaches. In the Section IV, we discuss main architectural components of the proposed system. In Section V, we present traffic analysis. Finally, we discuss experimental setup and results evaluation in Section VI and VII respectively.</p>
        <p>The researchers have performed a significant amount of work with intrusion detection technologies on traditional network infrastructure [65]. Most of the research is carried out with detection of DDoS and mitigation of DDoS attacks within legacy network [3]. Comparing to traffic demands of future networks, legacy networks are found significantly expensive and least secure with a different perspective of traffic analysis and deployment. To address these challenges, SDN infrastructure with OpenFlow protocol has successfully improved various security challenges [56]. Despite providing modern solutions in SDN, control-plane and data-plane is not extensively explored with real-time datasets to detect new types of DDoS attacks. Due to centralized network activity management and programmability approaches, SDN networks could become vulnerable for potential attacks [28]. In particular, attacking SDN control-plane with DDoS floods could run down a larger portion of network [62]. In data-plane, detecting DDoS attacks is difficult due to the fact that OpenFlow enabled switches have the least information due to isolated traffic flows, this weakness makes the network more vulnerable to attacks. Attackers can launch DDoS traffic with simple knowledge, and available tools and hardware assets [24].The researchers have performed a significant amount of work with intrusion detection technologies on traditional network infrastructure [65]. Most of the research is carried out with detection of DDoS and mitigation of DDoS attacks within legacy network [3]. Comparing to traffic demands of future networks, legacy networks are found significantly expensive and least secure with a different perspective of traffic analysis and deployment. To address these challenges, SDN infrastructure with OpenFlow protocol has successfully improved various security challenges [56]. Despite providing modern solutions in SDN, control-plane and data-plane is not extensively explored with real-time datasets to detect new types of DDoS attacks. Due to centralized network activity management and programmability approaches, SDN networks could become vulnerable for potential attacks [28]. In particular, attacking SDN control-plane with DDoS floods could run down a larger portion of network [62]. In data-plane, detecting DDoS attacks is difficult due to the fact that OpenFlow enabled switches have the least information due to isolated traffic flows, this weakness makes the network more vulnerable to attacks. Attackers can launch DDoS traffic with simple knowledge, and available tools and hardware assets [24].</p>
        <p>In existing research, only preliminary research is carried out for optimising the security of IoT with SDN technology. The authors in [15] designed a distributed secure architecture based in SDN for the IoT domain. Similarly, authors of [2] also investigated preliminary discussion for how to mitigate the DDoS attacks OF IoT devices, the authors have utilised the SDN based sampling approaches for identifying the anomalies, the major aim was to collect the switches information for enhancing security accuracy. Moreover, the authors of [44] also designed a hybrid security countermeasure system to provide a safeguard against link spoofing attacks inside SDN based IoT controller.In existing research, only preliminary research is carried out for optimising the security of IoT with SDN technology. The authors in [15] designed a distributed secure architecture based in SDN for the IoT domain. Similarly, authors of [2] also investigated preliminary discussion for how to mitigate the DDoS attacks OF IoT devices, the authors have utilised the SDN based sampling approaches for identifying the anomalies, the major aim was to collect the switches information for enhancing security accuracy. Moreover, the authors of [44] also designed a hybrid security countermeasure system to provide a safeguard against link spoofing attacks inside SDN based IoT controller.</p>
        <p>Many researchers have proposed well known DDoS detection approaches in SDN context. The authors in [6] utilized Self Organizing Maps (SOM), a machine learning (ML) model to detect DDoS attacks by utilizing the features of traffic flow. In this method, authors presented six tuples of feature extraction such as Average of Packet per flow (APf), Average of Bytes per flow (ABf), Average of Duration per flow (ADf), Percentage of Pair flows (PPf), Growth of Single flow (GSf), and Growth of Different Ports (GDP). Flow is divided into sub-components if there exists a larger connection in time context then all six features of this work are modified to be used in identical flows. The major aim was to detect DDoS flooding attacks inside kernel based modular detection engine. Based on traffic features, detection engine classified in benign traffic and malicious traffic entries. The proposed work can only perform with table flow and cannot be extended to detect DDoS attacks in heavy traffic flow streams inside switches. Similarly, authors in [39] also utilized ML approaches to analyse and differentiate network traffic flows. In [7], authors used four malicious traffic detection algorithms in SDN contexts, such as Threshold Random Walk with Credit-Based (TRW-CB), Rate-Limiting, Maximum Entropy Detector and Network Traffic Anomaly Detector (NETAD). According to authors TRW-CB algorithm and Rate-Limiting algorithm were capable to detect every first packet arriving with new sessions, then collected packets were sent to the controller for deep inspection to identify attack event. The Maximum Entropy Detector was able to collect every initial packet then consistently collect these packets by every predefined t seconds, this helps to make traffic class distribution to classify normal traffic distribution class with the help of maximum entropy estimation. The authors in [56] depicted malicious traffic mitigation AVANT-GUARD approach. The mitigation performed only at controlplane traffic. Authors modified data-plane with the help of OpenFlow for utilizing two new models such as connection mitigation model and actuating trigger model.Many researchers have proposed well known DDoS detection approaches in SDN context. The authors in [6] utilized Self Organizing Maps (SOM), a machine learning (ML) model to detect DDoS attacks by utilizing the features of traffic flow. In this method, authors presented six tuples of feature extraction such as Average of Packet per flow (APf), Average of Bytes per flow (ABf), Average of Duration per flow (ADf), Percentage of Pair flows (PPf), Growth of Single flow (GSf), and Growth of Different Ports (GDP). Flow is divided into sub-components if there exists a larger connection in time context then all six features of this work are modified to be used in identical flows. The major aim was to detect DDoS flooding attacks inside kernel based modular detection engine. Based on traffic features, detection engine classified in benign traffic and malicious traffic entries. The proposed work can only perform with table flow and cannot be extended to detect DDoS attacks in heavy traffic flow streams inside switches. Similarly, authors in [39] also utilized ML approaches to analyse and differentiate network traffic flows. In [7], authors used four malicious traffic detection algorithms in SDN contexts, such as Threshold Random Walk with Credit-Based (TRW-CB), Rate-Limiting, Maximum Entropy Detector and Network Traffic Anomaly Detector (NETAD). According to authors TRW-CB algorithm and Rate-Limiting algorithm were capable to detect every first packet arriving with new sessions, then collected packets were sent to the controller for deep inspection to identify attack event. The Maximum Entropy Detector was able to collect every initial packet then consistently collect these packets by every predefined t seconds, this helps to make traffic class distribution to classify normal traffic distribution class with the help of maximum entropy estimation. The authors in [56] depicted malicious traffic mitigation AVANT-GUARD approach. The mitigation performed only at controlplane traffic. Authors modified data-plane with the help of OpenFlow for utilizing two new models such as connection mitigation model and actuating trigger model.</p>
        <p>In [51] SDN provides the various DDoS defence mechanisms via programmability feature, in the proposed solution of SD-IoT framework, the majority of IoT controllers of the pool are responsible for the centralised logic, which handles the overall IoT networks. The centralised logical controller is easy to maintain and manage but it also carries some security vulnerabilities. Like SDN based networks, SD-IoT is also responsible for creating detection and mitigation approaches by utilising programmability features.In [51] SDN provides the various DDoS defence mechanisms via programmability feature, in the proposed solution of SD-IoT framework, the majority of IoT controllers of the pool are responsible for the centralised logic, which handles the overall IoT networks. The centralised logical controller is easy to maintain and manage but it also carries some security vulnerabilities. Like SDN based networks, SD-IoT is also responsible for creating detection and mitigation approaches by utilising programmability features.</p>
        <p>Generally, most of ML approaches differentiate attacks traffic flows followed by certain feature characteristics, which are obtained from that traffic. Many researchers have utilized ML-based anomaly detection approaches within small-sized networks, but in large networks, acquiring network flows and feature statistics manipulation provides significant overhead in SDN controller [17], according to the authors, controller response time plays a vital role in attack detection scenarios. In general, ML-based anomaly detection techniques rely on trained datasets in the model. Moreover, authors of [17] proposed anomaly detection and mitigation techniques by employing 
            <rs type="software">sFlow</rs> based data gathering in the SDN platform. The proposed model consists of a collector unit, anomaly detection unit and anomaly mitigation unit. The collector unit acquires all incoming traffic flows with 
            <rs type="software">sFlow</rs> technique. After flow acquisition, an entropy-based algorithm differentiates traffic flows with benign class and malicious class. After malicious traffic identification, anomaly detector utilizes IP addresses and port numbers, which helps to mitigate the attacks. In contrast to anomaly detection, some researchers have proposed a statistical solution to detect DDoS traffic [61,54]. The authors of [38] provided an entropybased solution for early stage DDoS detection mainly at POX SDN controller. This proposed solution carries some limitations such as, if hosts number increases then model triggers a higher false-positive rate. To lower down the network overhead such computation process from various hosts, the authors of [63] proposed fast and effective entropy-based detection method for abnormal traffic, which works with traffic flows. The proposed approach utilizes scheduling based single queue process with k numbers of queues with logical subsets, these were individually assigned to network switches. In the event of heavy traffic request at controller, the system utilized logical queues to manage traffic requests with the sequential scheduling process.
        </p>
        <p>According to [40] IoT, dynamic environment requires access control from a centralised controller, that is responsible for managing traffic flows and to restrict the unauthorised access from IoT network nodes. Controller access control helps to simplify the nodes authentication on each IoT endpoints nodes for reducing network and computation overhead.According to [40] IoT, dynamic environment requires access control from a centralised controller, that is responsible for managing traffic flows and to restrict the unauthorised access from IoT network nodes. Controller access control helps to simplify the nodes authentication on each IoT endpoints nodes for reducing network and computation overhead.</p>
        <p>In [7], the authors utilize maximum entropy estimation methodology to detect the benign traffic class to resolve network security issues inside home and office-based SDN networks. The authors performed the experiment with Open-Flow switches in POX controller, where the proposed technique only worked with low rate network traffic traces, mainly focused to detect attacks inside networks. Addition to this, other authors also used entropy detection to catch port-scans and worm-propagation attacks [17]. Moreover, anomalybased DDoS detection approach was also proposed by [61]. This research work significantly lowers down control-plane overhead carried out in the SDN based edge switches.In [7], the authors utilize maximum entropy estimation methodology to detect the benign traffic class to resolve network security issues inside home and office-based SDN networks. The authors performed the experiment with Open-Flow switches in POX controller, where the proposed technique only worked with low rate network traffic traces, mainly focused to detect attacks inside networks. Addition to this, other authors also used entropy detection to catch port-scans and worm-propagation attacks [17]. Moreover, anomalybased DDoS detection approach was also proposed by [61]. This research work significantly lowers down control-plane overhead carried out in the SDN based edge switches.</p>
        <p>Most of the legacy network routing protocols are limited for designing an IoT infrastructure due to lack of its computational and energy efficient approach. According to the authors of [29], DDoS attacks are the most common security threats, especially in IoT based infrastructures. Most of IoT gateways for traffic collection can become a single point of failure for other IoT sensors. These types of vulnerabilities generate DDoS attacks in IoT. The authors of [50] proposed another distinctive solution which is based on packet_in fil-tering methodology. This approach utilizes the contents lists extracted from the header field of the packet_in event of the SDN controller. However, if the attacker launches new attack flows which do not match to predefined content lists, then the proposed approach failed to detect abnormal activities. To improve the aforementioned issue, the authors in [13] depicted an attack detection approach. This proposed solution locate all infected interfaces, which are used by intruders to infiltrate and ex-filtrate network sources. Generally, anomaly detection approaches use fixed threshold values. If some deviations occur in incoming abnormal statistical features, then it can easily identify malicious traffic. The authors of [37], proposed detection solution to count TCP SYN flooding traces in SDN. The main aim of authors is to effectively mitigate flooding attacks with SDN programmable countermeasures. The proposed solution deployed with 
            <rs type="software">Open-Daylight</rs> extension module, where it monitors all TCP connections and block the infected hosts.
        </p>
        <p>Research has also carried out to accomplish network security in the SDN with traffic sampling. Researchers have mainly focused to process a large amount of traffic effectively, they depicted various solutions with traffic characteristics, including flow information, flow size and entropy changes in flow [17]. The authors of [32] proved that sampling with detection traffic results in massive false positive detection rate within non-volume dependant anomalous traffic. The authors utilized three various detection algorithms to catch non-volume-based traffic flows separately with sampled data and original data of the model. The results showed a low detection rate with false alerts, overall model detection performance was degraded. To overcome this issue, the authors of [21] suggested a new improved solution with new pattern matching technique in co-detection of Snort IDS sensor. The authors merged misuse detection and anomaly detection techniques to lower down false alarms. The proposed method caters an effective and fast packet inspection by utilizing low IDS resources comparatively to legacy systems. Recently, the authors in [10] depicted a high precision DDoS detection solution with SDN based Xboost classifier. In this method, most of DDoS attack mechanism is analyzed to provide an effective solution. ICMP floods, TCP SYN floods and UDP floods were sent to POX controller via grab bag tool, all these attacks were manipulated using grab bag connection records for evaluation in DDoS classifier. Table 1 precisely depicts major contributions of authors in SDN to detect DDoS traffic.Research has also carried out to accomplish network security in the SDN with traffic sampling. Researchers have mainly focused to process a large amount of traffic effectively, they depicted various solutions with traffic characteristics, including flow information, flow size and entropy changes in flow [17]. The authors of [32] proved that sampling with detection traffic results in massive false positive detection rate within non-volume dependant anomalous traffic. The authors utilized three various detection algorithms to catch non-volume-based traffic flows separately with sampled data and original data of the model. The results showed a low detection rate with false alerts, overall model detection performance was degraded. To overcome this issue, the authors of [21] suggested a new improved solution with new pattern matching technique in co-detection of Snort IDS sensor. The authors merged misuse detection and anomaly detection techniques to lower down false alarms. The proposed method caters an effective and fast packet inspection by utilizing low IDS resources comparatively to legacy systems. Recently, the authors in [10] depicted a high precision DDoS detection solution with SDN based Xboost classifier. In this method, most of DDoS attack mechanism is analyzed to provide an effective solution. ICMP floods, TCP SYN floods and UDP floods were sent to POX controller via grab bag tool, all these attacks were manipulated using grab bag connection records for evaluation in DDoS classifier. Table 1 precisely depicts major contributions of authors in SDN to detect DDoS traffic.</p>
        <p>From the above literature, we identify most of the research has been carried out for the DDoS detection only at SDN control layers with redundant unreal datasets, rather than at network data layers. There has been a significant work deployed to classify heavy traffic DDoS attacks into real data traces.From the above literature, we identify most of the research has been carried out for the DDoS detection only at SDN control layers with redundant unreal datasets, rather than at network data layers. There has been a significant work deployed to classify heavy traffic DDoS attacks into real data traces.</p>
        <p>The Internet of Things (IoT) is always under consideration for adopting security and privacy requirements to create personal profiles. With the adoption of Personal Network and access to the specific function of advanced APIs, it is also capable to utilises third parties devices on Layer 2 for security consideration. the IoT network can easily become vulnerable due to multiple points of IoT nodes. Addition to this, the lack of computational and memory resources constraints, which are associated with DDoS attack and anomaly detection mechanism rely on traffic sampling approaches to detect real-time DDoS attack detection accuracy. The major aim of our research is to focus the DDoS detection with the processing of large packets of IoT network.The Internet of Things (IoT) is always under consideration for adopting security and privacy requirements to create personal profiles. With the adoption of Personal Network and access to the specific function of advanced APIs, it is also capable to utilises third parties devices on Layer 2 for security consideration. the IoT network can easily become vulnerable due to multiple points of IoT nodes. Addition to this, the lack of computational and memory resources constraints, which are associated with DDoS attack and anomaly detection mechanism rely on traffic sampling approaches to detect real-time DDoS attack detection accuracy. The major aim of our research is to focus the DDoS detection with the processing of large packets of IoT network.</p>
        <p>In contrast, we proposed co-detection model for IoT, firstly, we utilize distributed traffic sampling in network data-plane to maintain heavy network flows, secondly, the model utilizes Snort IDS parallel to deep learning model to adopt higher detection accuracy with low false triggers. In data-plane, the appropriate sampling rate is employed inside all network switches so that IDS can differentiate malicious and benign traffic during heavy flow. This model caters analytical evaluation for detection accuracy, which is mainly based on 
            <rs type="software">sFlow</rs> and adaptive polling based sampling. The sampling approaches in collaboration with IDS can adopt effective detection, which is a significant improvement over existing work. Primarily, these methodologies require less processing due to rectified data features. Due to low network overhead, the proposed model is feasibly capable to be used in various scales to meet security requirement in modern networks.
        </p>
        <p>This paper mainly focuses on IoT DDoS attack detection model by first utilising 
            <rs type="software">sFlow</rs> and adaptive polling sampling with Snort IDS to identify the network traffic, and then classify the traffic with 
            <rs type="software">Stacked AutoEncoder</rs> (SAE) into benign and malicious traffic. In the following, we present the building block of our proposed DDoS attack detection.
        </p>
        <p>The SAE comprises several auto-encoders, its structure consists of three layers, input or visible layer, hidden layer, and reconstruction or output layer. The data inputs are fed into a visible layer. The reconstruction layer generates output. SAE algorithm is unique in nature as compared to CNN, DBN, and RBM deep neural networks. Firstly, SAE is made up of simple and straightforward structure, it is trained in very less time as compared to other mentioned Deep Neural Network (DNN) algorithms [45]. Secondly, SAE does not use labelled datasets due to the nature of the unsupervised learning approach. In contrast, CNN is based on supervised learning, whereas, DBN and RBM utilize semi-supervised datasets. Finally, the SAE algorithm also utilizes the outputs as inputs, and detailed features from flows can be extracted with good training approach in SAE. This paper utilizes detailed features of a dataset based on the SAE approach to improve the detection rate of DDoS attacks in SDN. SAE as deep neural networks (DNN) utilizes sparse auto-encoders and soft-max classifier for extraction and classification of unsupervised datasets. A sparse AutoEncoder is a neural network that uses three layers, where input and output layers work with P nodes and hidden nodes with Q nodes. The M nodes from input layers show records with P features suchThe SAE comprises several auto-encoders, its structure consists of three layers, input or visible layer, hidden layer, and reconstruction or output layer. The data inputs are fed into a visible layer. The reconstruction layer generates output. SAE algorithm is unique in nature as compared to CNN, DBN, and RBM deep neural networks. Firstly, SAE is made up of simple and straightforward structure, it is trained in very less time as compared to other mentioned Deep Neural Network (DNN) algorithms [45]. Secondly, SAE does not use labelled datasets due to the nature of the unsupervised learning approach. In contrast, CNN is based on supervised learning, whereas, DBN and RBM utilize semi-supervised datasets. Finally, the SAE algorithm also utilizes the outputs as inputs, and detailed features from flows can be extracted with good training approach in SAE. This paper utilizes detailed features of a dataset based on the SAE approach to improve the detection rate of DDoS attacks in SDN. SAE as deep neural networks (DNN) utilizes sparse auto-encoders and soft-max classifier for extraction and classification of unsupervised datasets. A sparse AutoEncoder is a neural network that uses three layers, where input and output layers work with P nodes and hidden nodes with Q nodes. The M nodes from input layers show records with P features such</p>
        <p>Description Methods [6] 2010 Proposed work utilizes six SDN based Neural network model,SOM. traffic features to detect DDoS attacks. [7] 2010 Proposed method utilizes collected flow Periodic flow based detection entries with fixed time intervals at controller. [9] 2010 Packet-in Bloom filter used in switch memory Load balancing, Bloom filter to manage the DDoS traffic. [60] 2011 this work utilizes SDN TE application SDN TE, load balancing. for effectively detection in networks. [34] 2011 Depicted various traffic collection and TRW-CB, maximum entropy, detection approaches to detect DDoS.Description Methods [6] 2010 Proposed work utilizes six SDN based Neural network model,SOM. traffic features to detect DDoS attacks. [7] 2010 Proposed method utilizes collected flow Periodic flow based detection entries with fixed time intervals at controller. [9] 2010 Packet-in Bloom filter used in switch memory Load balancing, Bloom filter to manage the DDoS traffic. [60] 2011 this work utilizes SDN TE application SDN TE, load balancing. for effectively detection in networks. [34] 2011 Depicted various traffic collection and TRW-CB, maximum entropy, detection approaches to detect DDoS.</p>
        <p>Rate limiting. [59] 2012 Block-based neural network (BBNN) used BBNN algorithm, IDS, with IDS to detect DDoS in FPGA. [56] 2013 Proposed method lower down the burden Interface mitigation. between control-plane and data-plane. [21] 2013 Utilized 
            <rs type="software">Snort</rs> with combined techniques Anomaly, misuse detection, of anomaly detection and misuse detection.
        </p>
        <p>Snort IDS. [17] 2014 Flow based feature extraction to detect Entropy detection. worm propagation, DDoS, portscan attacks. [18] 2015 Heavy traffic request handled using multiple direction for scheduling based traffic scenarios.Snort IDS. [17] 2014 Flow based feature extraction to detect Entropy detection. worm propagation, DDoS, portscan attacks. [18] 2015 Heavy traffic request handled using multiple direction for scheduling based traffic scenarios.</p>
        <p>malicious data [61] 2015 Detection model employed in edge switch to Entropy based detection reduce traffic flows at controller. [14] 2016 Utilized semi-supervised SVM SVM, anamoly detection to detect anamolies in SDN. [38] 2016 Quantitative Shannon entropy utilized Shannon method of entropy to classify early stage DDoS attacks. [13] 2016 A heavy DDoS attack rate is detected via SPRT method. Sequential Probability Ratio Test . [46] 2017 Deep learning based, multi-vector DDoS Deep learning, SAE algorithm traffic monitoring and detection system. [37] 2017 Counter measure mitigation implemented as SLICOTS methods SLICOTS at controller for TCP SYN floods. [10] 2018 Extreme gradient algorithm proposed to Machine learning. classify DDoS attacks with low false triggers. , similarly, ′ =∈ ×1 . We set a learning identity approximation function ∧ ≈ by using back propagation algorithm [43]. There is a large number of activation functions used for hidden and output nodes but we utilized Sigmoid activation function to activate the function of ∪, , which is formulated in the following equations:malicious data [61] 2015 Detection model employed in edge switch to Entropy based detection reduce traffic flows at controller. [14] 2016 Utilized semi-supervised SVM SVM, anamoly detection to detect anamolies in SDN. [38] 2016 Quantitative Shannon entropy utilized Shannon method of entropy to classify early stage DDoS attacks. [13] 2016 A heavy DDoS attack rate is detected via SPRT method. Sequential Probability Ratio Test . [46] 2017 Deep learning based, multi-vector DDoS Deep learning, SAE algorithm traffic monitoring and detection system. [37] 2017 Counter measure mitigation implemented as SLICOTS methods SLICOTS at controller for TCP SYN floods. [10] 2018 Extreme gradient algorithm proposed to Machine learning. classify DDoS attacks with low false triggers. , similarly, ′ =∈ ×1 . We set a learning identity approximation function ∧ ≈ by using back propagation algorithm [43]. There is a large number of activation functions used for hidden and output nodes but we utilized Sigmoid activation function to activate the function of ∪, , which is formulated in the following equations:</p>
        <p>In equation 2, we optimize SAE generalization ability to get feasible features representation of datasets. For this objective we added cost function to achieve feasible weight learning in sparse SAE, backpropagation is utilized for minimization. In this equation term of 0.In equation 2, we optimize SAE generalization ability to get feasible features representation of datasets. For this objective we added cost function to achieve feasible weight learning in sparse SAE, backpropagation is utilized for minimization. In this equation term of 0.</p>
        <p>To deal IDS aforementioned issues which are depicted in Section II, we implemented packet sampling with sFlow capability in our proposed design. The sFlow sampling technique creates mandatory flow statistics, which is normally used for manipulation purpose [17]. Due to this nature sFlow approach gathers sampled packets and then rebuilds the new flow patterns by updating packet counters for each flow entries in OpenFlow (OF) enabled controller. The sFlow collector propagates all related traffic statistics to malicious detection model. The sFlow approach enables data-plane forwarding logic in more efficient and aggregate way, which reduces network overhead from all deployed infrastructure. This approach of sFlow does not rely on specific flow entries but the major aim is to reduce the number of flow entries up to the relevant level for detection model.To deal IDS aforementioned issues which are depicted in Section II, we implemented packet sampling with sFlow capability in our proposed design. The sFlow sampling technique creates mandatory flow statistics, which is normally used for manipulation purpose [17]. Due to this nature sFlow approach gathers sampled packets and then rebuilds the new flow patterns by updating packet counters for each flow entries in OpenFlow (OF) enabled controller. The sFlow collector propagates all related traffic statistics to malicious detection model. The sFlow approach enables data-plane forwarding logic in more efficient and aggregate way, which reduces network overhead from all deployed infrastructure. This approach of sFlow does not rely on specific flow entries but the major aim is to reduce the number of flow entries up to the relevant level for detection model.</p>
        <p>According to [48], 
            <rs type="software">sFlow</rs> is a suitable technology to monitor real-time and virtual networks. sFlow agents are utilized in network switches to collect switch statistics with the required sample rate then transfer to common sFlow collector. Normally, mechanism of sampled data gathering comprises either replicating real packetâĂŹs header or feature extraction from network packets, then sample packets after being decoded transferred to cache flow record, every flow record is updated and saved to look up each flow record entry. Following by protocol information such as FIN flags, timeout, inactivity or once cache memory is full then records are wiped out from its cache memory and transferred to traffic analysis application. However, in 
            <rs type="software">sFlow</rs> case, all monitoring, decoded hash flow, flush functionality are wiped out from switches then these are propagated to centralized 
            <rs type="software">sFlow</rs> analyses also known as a collector, this runs on an individual server with abundant resources to support a large number of request flows with network stabilization.
        </p>
        <p>Moreover, the sFlow helps to overcome possible table size flow limitation which is mandatory for specific OF hardware deployed infrastructure [17]. Meanwhile, the 
            <rs type="software">sFlow</rs> data collection technique gathers appropriate statistics for the effective anomaly detection process. As sFlow collector gathers packet samples consistently, it also updates relevant counters for monitoring module with a specific time window. Therefore, each flow entry does not require further maintenance for manipulating detailed flow statistics, this enables to lower down the complexities for flow collection models. In Section VI, low CPU and resources usage of the model will be presented to support sFlow mechanism in our proposed work.
        </p>
        <p>In proposed work, adaptive polling sampling algorithm is used to refine polling intervals based on the rate of change of each flow. If switches flow rapidly changes then polling interval is reduced, on contrast, if polling intervals increased then flow remains stable. The polling interval becomes unchanged when flow fluctuates. We dynamically manipulated polling frequency by predicting future flow rates on the basis of historical data. The polling interval is calculated with the help of predicted future flow rates rather than the current live flow rate. We utilized the combined approach of proportional linear prediction (PLP) and weighted linear prediction (WLP) to estimate the next flow rate. This approach in the SDN environment is also discussed in [8]. Firstly, we implemented a low pass filter [19] to estimate the future flow rate. Low pass filter for flow rate prediction is provided in equation 5.In proposed work, adaptive polling sampling algorithm is used to refine polling intervals based on the rate of change of each flow. If switches flow rapidly changes then polling interval is reduced, on contrast, if polling intervals increased then flow remains stable. The polling interval becomes unchanged when flow fluctuates. We dynamically manipulated polling frequency by predicting future flow rates on the basis of historical data. The polling interval is calculated with the help of predicted future flow rates rather than the current live flow rate. We utilized the combined approach of proportional linear prediction (PLP) and weighted linear prediction (WLP) to estimate the next flow rate. This approach in the SDN environment is also discussed in [8]. Firstly, we implemented a low pass filter [19] to estimate the future flow rate. Low pass filter for flow rate prediction is provided in equation 5.</p>
        <p>In equation 5, ( +1) represents the predicted values for flow rate pf next upcoming polling, C is currently calculated value and W depicts two different current polling values such as 0 ≤ ≤ 1, based on the network load, it is implemented in experiment. Afterwards, next flow rate is calculated with PLP given as below:In equation 5, ( +1) represents the predicted values for flow rate pf next upcoming polling, C is currently calculated value and W depicts two different current polling values such as 0 ≤ ≤ 1, based on the network load, it is implemented in experiment. Afterwards, next flow rate is calculated with PLP given as below:</p>
        <p>))</p>
        <p>Overall, aggregated rate of change in flow is provided as below in equation: 8:Overall, aggregated rate of change in flow is provided as below in equation: 8:</p>
        <p>In equation 8, M represents overall flow changes where, two threshold values of and used with 0 ≤ ≤ 1 conditions. If the value of &lt; then detected flow gradually changes as compared to current conditions. When ≥ then it brings increment in polling interval thresholds, and detected flow rate rapidly changes in contrast to current predictions, it leaves polling threshold values slow down here. Other than these depicted conditions, the detected flow rate becomes proportional to current predictions and leaves polling thresholds unchanged.In equation 8, M represents overall flow changes where, two threshold values of and used with 0 ≤ ≤ 1 conditions. If the value of &lt; then detected flow gradually changes as compared to current conditions. When ≥ then it brings increment in polling interval thresholds, and detected flow rate rapidly changes in contrast to current predictions, it leaves polling threshold values slow down here. Other than these depicted conditions, the detected flow rate becomes proportional to current predictions and leaves polling thresholds unchanged.</p>
        <p>The adaptive polling algorithm to sample SDN switches is depicted in algorithm 1. This algorithm uses and as upper bound and lower bound intervals respectively. Δ is polling intervals for ℎ intervals numbers, in the algorithm, the line 3 and 4 represent overall flow which is currently active in switches with no sampling rate adjustment. Afterwards, we utilized the equations 2, 3, 4 to get the next predicted sample rate with the rate of change of flow in line 7. The given algorithm line 8 to 11 depicts adopted polling intervals rules. The line 8 and 9, if &lt; , represent that polling interval is higher, similarly if ≥ , pragmatically depicts the polling interval is reduced shown in line 10, 11. Finally, line 11 and 12 leave the overall polling intervals unchanged.The adaptive polling algorithm to sample SDN switches is depicted in algorithm 1. This algorithm uses and as upper bound and lower bound intervals respectively. Δ is polling intervals for ℎ intervals numbers, in the algorithm, the line 3 and 4 represent overall flow which is currently active in switches with no sampling rate adjustment. Afterwards, we utilized the equations 2, 3, 4 to get the next predicted sample rate with the rate of change of flow in line 7. The given algorithm line 8 to 11 depicts adopted polling intervals rules. The line 8 and 9, if &lt; , represent that polling interval is higher, similarly if ≥ , pragmatically depicts the polling interval is reduced shown in line 10, 11. Finally, line 11 and 12 leave the overall polling intervals unchanged.</p>
        <p>In our proposed design, we mainly utilized open source tools and technology such as sFlow-RT [12] collector and Ntopng [47] collector for 
            <rs type="software">sFlow</rs> and adaptive polling based sampling respectively in data-plane. Snort as Network Intrusion Detection System (NIDS) with Barnyard2 is also used for creating a database to store datasets inside Ryu SDN controller.
        </p>
        <p>In the sFlow sampling approach, we utilized three main modules consisting on sFlow-collector, Snort-IDS, and Datastorage. This section of the proposed design utilizes sFlow sampling and Snort IDS to manipulate flow classification for higher rate DDoS detection model. This approach collaboratively works with OpenFlow SDN controller and northbound interface communication, which is feasible to create new insertion policies for traffic engineering in Open vSwitch (OVS) switches. The 
            <rs type="software">sFlow</rs> module is used to apply packet flow sampling with individual sampling agents on each OVS switches. All sFlow agents deployed remotely via northbound APIs with sampling decision rates of 1/28, 1/64/, 1/256, 1/512, 1/1024 [49]. These sFlow agents standalone deliver collected sampled traffic streams with suitable sampling rate from all deployed switches towards sFlow-RT. The sFlow-RT is a real-time network monitoring tool that collects and analyze sampled streams in detailed visualized form. The sFlow-RT is an industry standard and helps to incorporates 
            <rs type="software">InMon</rs> asynchronous analytics [16]. The sFlow-RT [49] real-time analytics engine is capable to receive the continuous flow streams from agents of network-embedded switches. The sFlow-RT decodes the received flow from sFlow agents into actionable metrics via 
            <rs type="software">RestFlow API</rs> [52]. The RestFlow API is capable to customize the configuration of setting up thresholds, metrics manipulation and flow measurements. These API works with HTTP and rest calls with external applications, in addition to this embedded JavaScript and standardized 
            <rs type="software">ECMA</rs>
            <rs type="software">scripts</rs> enable to work internally.
        </p>
        <p>Our paper uses Snort as NIDS to collect malicious traffic and benign traffic, We used various frameworks and tools eg. The Metasploit framework [35], 
            <rs type="software">hping3</rs> [23]and Low Orbit Ion Cannon (LOIC) [1] to launch various DDoS attacks with customized TCP/IP packets, we utilize the 
            <rs type="software">hping3</rs> tool to emulate customized DDoS attacks. Our model also uses the LOIC DDoS tool to launch TCP, UDP and ICMP floods. By utilising 
            <rs type="software">Metasploit</rs> and 
            <rs type="software">Kali Linux</rs> framework, LOIC, and 
            <rs type="software">hping3</rs>, we generated six most common types of DDoS attack, which are provided in Table 2.
        </p>
        <p>The main purpose of the 
            <rs type="software">Metasploit</rs> framework is to generate malicious traffic with some payloads. Snort collects malicious traffic with SM1-mode and benign traffic is acquired using SM2-mode shown below in Table 3. Both benign and malicious traffic is manually emulated from hosts connected directly to OVS switches, attacking hosts are assumed to perform DDoS attack flooding with port scanning using hping3 and LOIC DDoS tool. We implemented a standalone rule set in 
            <rs type="software">Snort</rs> detection-engine configuration file for both modes mentioned with details in Table 3. In testbed, once traffic is collected with deployed sFlow sampling agents, then all sampled traffic stream is mirrored with port 6343 to the sFlow-collector module. In Figure 1, 
            <rs type="software">sFlowcollector</rs> module is integrated with sFlow-RT. Due to the flexibility of SDN Ryu controller modular design, we utilized sFlow-collector module traffic into Snort-IDS module. In this module 
            <rs type="software">Snort</rs> is configured with packet logging mode, if traffic is emulated from malicious hosts then it utilizes SM1-mode and if traffic is coming from benign hosts then SM2-mode is used to record logs followed by Table 3.
        </p>
        <p>In this Flow-collector module, we deployed a time-driven sampling mechanism with adaptive polling intervals shown in Figure 2. In this section, the polling scheme enables to fetch timely accurate switches statistics on a fine-grained level. Our polling mechanism instructs all active switches stream flows by giving limited bandwidth channels and time intervals. It is mandatory to adjust all active flows polling intervals. The main objective of this polling based sampling is to focus, if the number of flows is exponential rising then polling intervals between control-plane and data-plane also increase, which utilizes very large bandwidth.In this Flow-collector module, we deployed a time-driven sampling mechanism with adaptive polling intervals shown in Figure 2. In this section, the polling scheme enables to fetch timely accurate switches statistics on a fine-grained level. Our polling mechanism instructs all active switches stream flows by giving limited bandwidth channels and time intervals. It is mandatory to adjust all active flows polling intervals. The main objective of this polling based sampling is to focus, if the number of flows is exponential rising then polling intervals between control-plane and data-plane also increase, which utilizes very large bandwidth.</p>
        <p>It is also mandatory to maintain polling bounds given as and for each flow passing through switches, where stable flows are placed in higher polling intervals and lower polling intervals will be used for heavy, busy and unstable flows [25]. We manipulated the tunning frequency by sending FlowStatisticsRequest Messages for individual flows. Control-plane messages are not capable to capture acknowledged flow traffic statistics, instead, we gathered flow statistics by simple multiplication of sampling ratio with the number of bytes in each flow, addition to this we also utilized sampling based adaptive polling interval algorithm elaborated in Algorithm 1. The equation 8 depicts rate of change with unit value if the predicted status is very closer to the actual status. All other values must satisfy given condition of 0 ≤ ≤ 1, where 0 and 1 values represents minimum value of M and maximum value of M respectively. In the Table 4, we depicted feasible rules to manipulate Δ based on values of M, where is set to 0.6 seconds and is set to 1.4 seconds. The main reason to set these values is to acquire the best performance of switches polling query. Our adaptive polling-based sampling inside all switches mainly focuses on time-oriented configurations to maintain the network data sampling for higher accuracy. If the upper bound limit is set to a large value, then network data after sampling will not be up to date, majority of live network traffic will not be recorded. Similarly, if we reduce lower bound time to live (TTL) in the polling algorithm, then it also causes degrade the sampling accuracy . In our algorithm, we tried various upper bound and lower bound conditions based on network traffic in our test-bed and configurations mentioned in Table 4, these parameters of adaptive polling achieves best sampling performance in switches across the test best.It is also mandatory to maintain polling bounds given as and for each flow passing through switches, where stable flows are placed in higher polling intervals and lower polling intervals will be used for heavy, busy and unstable flows [25]. We manipulated the tunning frequency by sending FlowStatisticsRequest Messages for individual flows. Control-plane messages are not capable to capture acknowledged flow traffic statistics, instead, we gathered flow statistics by simple multiplication of sampling ratio with the number of bytes in each flow, addition to this we also utilized sampling based adaptive polling interval algorithm elaborated in Algorithm 1. The equation 8 depicts rate of change with unit value if the predicted status is very closer to the actual status. All other values must satisfy given condition of 0 ≤ ≤ 1, where 0 and 1 values represents minimum value of M and maximum value of M respectively. In the Table 4, we depicted feasible rules to manipulate Δ based on values of M, where is set to 0.6 seconds and is set to 1.4 seconds. The main reason to set these values is to acquire the best performance of switches polling query. Our adaptive polling-based sampling inside all switches mainly focuses on time-oriented configurations to maintain the network data sampling for higher accuracy. If the upper bound limit is set to a large value, then network data after sampling will not be up to date, majority of live network traffic will not be recorded. Similarly, if we reduce lower bound time to live (TTL) in the polling algorithm, then it also causes degrade the sampling accuracy . In our algorithm, we tried various upper bound and lower bound conditions based on network traffic in our test-bed and configurations mentioned in Table 4, these parameters of adaptive polling achieves best sampling performance in switches across the test best.</p>
        <p>Rules to adjust intervals for Polling sampling.Rules to adjust intervals for Polling sampling.</p>
        <p>In this module, we deployed Snort as NIDS with promiscuous enabled mode. The traffic from adaptive switches query with a sampling threshold is propagated to 
            <rs type="software">Snort</rs> detection engine to log data streams. Sampled traffic is visually analyzed and maintained with 
            <rs type="software">Ntopng</rs> tool [47]. This module uses two modes of packet logging with 
            <rs type="software">Snort</rs> IDS. SM1mode is slightly different from the previous mode as shown in Table 5. SM1-mode is applied for malicious traffic collection and SM2-mode for benign traffic collection. This module uses 
            <rs type="software">Ntopng</rs> tool with OpenFlow enabled switches and software-based Ryu controller, which helps traffic engineer to predict and regulate the sampled traffic based on traffic behaviour and relevant features. In our proposed work, we created a SDN based application to collect sampled traffic with Snort signature based modes.
        </p>
        <p>This module is very fundamental for classifying different feature extractions and collecting network traffic as a CSV file. In this module, we used Barnyard2 a well known 
            <rs type="software">MySQL</rs> database, which collaboratively works with Snort IDS. It is capable to reduce the workload of Snort as it writes Snort events in human readable modes either on console, text or CSV file. We utilized 
            <rs type="software">Barnyard</rs>2 to read all binary outputs from Snort into a 
            <rs type="software">MySQL</rs> database in the CSV form. In Barnyard2 database we deployed unified 
            <rs type="software">barnyard</rs>2 plug-in and CSV plug-in to acquire easily readable CSV file such as snort.sflow-log.xxx for benign and malicious traffic flow. However, data is gathered in CSV form in two different ways of SM1-mode and SM2-mode. Similar to 
            <rs type="software">sFlow</rs> this mod-ule also uses 
            <rs type="software">Barnyard</rs>2 with unified plug-in and csv-plug-in for adaptive polling sampling, where Snort creates two separate files such as snort.asq_log.xxx for normal traffic and malicious traffic.
        </p>
        <p>Data acquisition with virtual machine (VM) is utilized in our work, where both benign data and malicious data is collected based on signature-based IDS with sampling approaches. Our research work mainly focuses on real-time network data acquisition. Our data acquisition methodology uses two types of sampling sFlow and adaptive polling interval sampling approaches. In data-plane, we deployed both sampling approaches individually and we gathered malicious and benign datasets with Snort SM1-mode and SM2mode. We utilized two virtual machines, where VM1 is only used for data-plane and implementing sampling, VM2 machine is created with signature-based Snort IDS, Barnyard2 and central SDN Ryu controller. Both virtual machines communicated via OpenFlow 1.3 protocol and sFlow protocol, which is depicted in Figure 1 and Figure 2. To lower down the workload from detection engine of Snort, 
            <rs type="software">Barnyard2</rs> is implemented that supports to capture maximum data with monitoring ability. Snort detection engine file is configured with specific rules to generate DDoS alerts.
        </p>
        <p>In 
            <rs type="software">sFlow</rs> sampling we used 15, 10 and 6 rules for TCP, UDP and ICMP respectively in snort.conf, refers to Snortmode (SM1) file for malicious dataset. Similarly, we utilized 8, 6 and 6 simple rules in snort.conf refers to Snort-mode (SM2) file for acquiring normal dataset as show in Table 3. In adaptive polling based sampling we also used 15, 10 and 6 rules for TCP, UDP and ICMP respectively in snort.conf refers to Snort-mode (SM1) file for the malicious dataset. Similarly, we utilized 8, 6 and 6 simple rules in snort.conf refers to Snort-mode (SM2) file for acquiring normal dataset detail is provided in Table 5.
        </p>
        <p>Snort is capable to offer various functional outputs such as alert_syslog, alert_fast, alert_full, alert_unixsock, log_tcpdump and alert_csv, any of these standard Snort directives can be utilised in snort.conf file to achieve desirable network output packets file.Snort is capable to offer various functional outputs such as alert_syslog, alert_fast, alert_full, alert_unixsock, log_tcpdump and alert_csv, any of these standard Snort directives can be utilised in snort.conf file to achieve desirable network output packets file.</p>
        <p>Our paper utilises the alert_csv output plugin in collaboration with SM1-mode and SM2-mode. We have utilised SM1-mode with 15-10-6 rules and SM2-mode with 8-6-6 rues. The main reason for using limited signatures is to write network alerts details in a csv file to process with DNN DDoS detection model. We did not use various Snort signature on snort.conf as it significantly reduced the quality of features extracted from maclious and benign traffic.Our paper utilises the alert_csv output plugin in collaboration with SM1-mode and SM2-mode. We have utilised SM1-mode with 15-10-6 rules and SM2-mode with 8-6-6 rues. The main reason for using limited signatures is to write network alerts details in a csv file to process with DNN DDoS detection model. We did not use various Snort signature on snort.conf as it significantly reduced the quality of features extracted from maclious and benign traffic.</p>
        <p>In SM1-mode, we configured all TCP, UDP and ICMP signatures with specific field values, such as port numbers, content numbers, threshold types and values, priority values, track by_src, track by_dst and classtype. These signatures values were filtering and classifying network data as malicious output. In SM2-mode we utilised only default signature values from 
            <rs type="software">Snort</rs> repository to record each and every packet, SM2-mode is used to collect only benign data. Fur- ther details of this implementation are also provided in Table 3.
        </p>
        <p>Our traffic collector section examines all incoming Open-Flow messages at controller, where signature-based Snort IDS and Barnyard2 extracts various header fields based on sampled flows to make CSV files. The flow is TCP and UDP protocol combination, which comprises similar values of the type of protocol, source IP addresses and destination IP addresses, source ports and destination ports. ICMP contains the majority of similar fields other than source and destination port numbers. We used Barnyard2 alert_csv plug-in by editing 
            <rs type="software">barnyard</rs>.conf with csv features such as timestamp, msg, proto, src, srcport, dst, dstport, ethsrc, ethdst, ethlen, tcpflags, tcpseq, tcpack, tcplen, tcpwindow, ttl, tos, id, dgmlen, iplen, icmptype, icmpcode, icmpseq.
        </p>
        <p>However, as shown in the Table 6, the features are extracted using Python and literature survey, Python and SAE unsupervised machine learning to derive proposed feature set depicted inHowever, as shown in the Table 6, the features are extracted using Python and literature survey, Python and SAE unsupervised machine learning to derive proposed feature set depicted in</p>
        <p>Feature Extraction from ICMP Flows.Feature Extraction from ICMP Flows.</p>
        <p>Our model mainly focuses to attack capture-failure rate with the false-negative rate. False-negative rate is highly used performance metrics of IDS systems, it is represented as when IDS systems fail to classify attacks that have been taken place on it. Our overall proposed model is based to improve the capture-failure rate and to provide a comparison between sampling approaches, which is another performance metric in this paper. The capture-failure rate implies as unawareness of the system to detect the attack on network infrastructure. This paper takes advantages of both sampling techniques with SDN flexibility such as sFlow sampling and adaptive polling sampling inside OVS switches with Ryu controller. In this work, the standard amount of sampled traffic flows are utilized with proposed sampling rather than deep packets sampling. In contrast, deep packets sampling utilizes many available network and processing resources. The detailed systematic overview of our proposed model is presented in this section.Our model mainly focuses to attack capture-failure rate with the false-negative rate. False-negative rate is highly used performance metrics of IDS systems, it is represented as when IDS systems fail to classify attacks that have been taken place on it. Our overall proposed model is based to improve the capture-failure rate and to provide a comparison between sampling approaches, which is another performance metric in this paper. The capture-failure rate implies as unawareness of the system to detect the attack on network infrastructure. This paper takes advantages of both sampling techniques with SDN flexibility such as sFlow sampling and adaptive polling sampling inside OVS switches with Ryu controller. In this work, the standard amount of sampled traffic flows are utilized with proposed sampling rather than deep packets sampling. In contrast, deep packets sampling utilizes many available network and processing resources. The detailed systematic overview of our proposed model is presented in this section.</p>
        <p>Our experiment is performed into two different virtual machines, which is created with Intel (R) Xeon (R) X5560 CPU with 2.88 GHz processor and 16 GB RAM (DDR3 ECC-Registered Memory PC3-12800) running 
            <rs type="software">TensorFlow</rs>
            <rs type="version">1.4</rs> on 
            <rs type="creator">Ubuntu LTS</rs> 16.04-64 bit. 
            <rs type="software">VMware Player</rs> is used for creating both virtual machines such as VM1 with 192.168.232.x1 IP address and VM2 with 192.168.232.x2 IP address. The VM1 machine, uses network emulator tool such as 
            <rs type="software">Mininet</rs> tool for creating and customizing IoT network topology pre-sented in Figure 3, 
            <rs type="software">sFlow</rs> sampling agents and adaptive polling intervals based sampling parameters are also implemented in 
            <rs type="software">Mininet</rs> based 
            <rs type="software">Open vSwitch</rs> (OVS). Snort-IDS as NIDS is utilized to actively collects sampled normal and malicious traffic streams, then 
            <rs type="software">Snort</rs> output plug-in creates csv data files with 
            <rs type="software">Barnyard2</rs>. In the same VM1, various malicious traffic of DDoS floods is emulated with 
            <rs type="software">Metasploit</rs>, hping3 and LOIC tool. However benign traffic is generated to evaluate our detection model. VM2 utilizes more tools and technologies, so more CPU processing and memory are assigned for flexible performance. In VM2, the model utilizes central SDN Ryu controller, and the SAE a deep neural network model for intrusion detection, which classifies traffic features and detects malicious traffic, this will be further discussed in results section with more details. Figure 4, represents the simplified flow diagram of our proposed design.
        </p>
        <p>SDN Ryu controller centrally controls VM2 to install sampling policies and other network manipulations via Rest APIs configuration. VM1 is developed as data-plane and VM2 for control-plane, where VM1 communicates with VM2 by OpenFlow 1.3 protocol. The SDN Ryu controller manipulates and manages OpenFlow OVS switches in data-plane. The ovs-ofctl utility is used to insert new policies into switches table. The ovs-ofctl programme is used for OpenFlow switch administration and monitoring purpose, this programme is configured with north-bound APIs. SDN Ryu controller and Snort are integrated with each other, where Snort utilizes promiscuous enabled mode at eth0 interface which helps to collect all network traffic and propagate these packets to Open-Flow switch via port mirroring. On eth1, Snort and Ryu socket with IP 192.168.232.x1 is configured for collecting packets remotely. Snort continuously propagates data towards control-plane with 192.168.232.x2 IP address, this enables detection algorithms to work with the collaboration of Snort.SDN Ryu controller centrally controls VM2 to install sampling policies and other network manipulations via Rest APIs configuration. VM1 is developed as data-plane and VM2 for control-plane, where VM1 communicates with VM2 by OpenFlow 1.3 protocol. The SDN Ryu controller manipulates and manages OpenFlow OVS switches in data-plane. The ovs-ofctl utility is used to insert new policies into switches table. The ovs-ofctl programme is used for OpenFlow switch administration and monitoring purpose, this programme is configured with north-bound APIs. SDN Ryu controller and Snort are integrated with each other, where Snort utilizes promiscuous enabled mode at eth0 interface which helps to collect all network traffic and propagate these packets to Open-Flow switch via port mirroring. On eth1, Snort and Ryu socket with IP 192.168.232.x1 is configured for collecting packets remotely. Snort continuously propagates data towards control-plane with 192.168.232.x2 IP address, this enables detection algorithms to work with the collaboration of Snort.</p>
        <p>In VM2, OVS is remotely managed by Ryu controller inside 
            <rs type="software">Mininet</rs> simulator. The Snort switch ( ℎ_ . ) application is programmed on top of Ryu controller, this supports Layer L2 switch coding and redirects all traffic via OpenFlow switches with promiscuous enabled mode, traffic is redirected between one of the Snort port and Ryu (Unix Socket) port. The Snort supports two integration option with Ryu controller, the first option is very basic only suitable for demonstration purpose. On the other hand, we utilizing the second option, where 
            <rs type="software">Snort</rs> is implemented with a remote machine. SDN Ryu controller receives alerts from Snort with unixsock network socket. When the Snort uses = , then it receives all network packets for forwarding to Barnyard2 log file. This is the main reason to manage data-plan of network and hosts packets within main SDN controller. The tools utilized in our work are presented in Table 11.
        </p>
        <p>In VM2, 
            <rs type="software">Tcpreplay</rs> tool is also implemented for the purpose of classifying and analyzing benign and malicious traffic individually. Addition to this, Python is used for manipulating and saving computed features from each packet acquisition intervals. Finally, the dataset file is categorized into ( )
        </p>
        <p>This section mainly focuses on performance comparison of detection rate of DDoS within 
            <rs type="software">sFlow</rs> and adaptive polling based sampling approaches, the overall performance of the proposed mechanism is evaluated on the datasets presented in Table 10. As discussed in Section IV, traffic sampling can either be deployed as packet-oriented or time oriented. The control-plane uses SAE detection model with sampled and extracted features of data-plane and it also comprises of major sampling policies, flow policies, and OVS insertion rules. In order to get feasible classification results, this work uses SAE, a simple DNN model with extracted features. Firstly, features based input vectors acquired from 
            <rs type="software">sFlow</rs> and adaptive polling based sampling datasets, then SAE applied to classify benign and malicious traffic. However, this type of dataset comprises a higher level of unbalanced features, and in the real network there are very small portions of malicious traffic as compared to emulated malicious traffic. Most of the learning models create alarming situations for such reasons. Due to this fact, huge numbers of neural network models classify all traffic streams as benign and malicious as traffic noises. To achieve higher accuracy, a vast variety of approaches can be deployed to overcome this situation [27]. As a solution to this case, we utilize weighted loss functions to balance unbalanced feature frequencies, this work also utilizes selected feasible metrics such as precision, recall and F1 score on dataset specified in Table 10. These metrics provide useful information about the goodness of the detection rate of the proposed model. These parameters are depicted with the help of a confusion matrix, and its entries are provided as below:
        </p>
        <p>1. True Positive (TP) -these values are correctly identified attacks records.1. True Positive (TP) -these values are correctly identified attacks records.</p>
        <p>Our study uses the two different dataset portions, based on 
            <rs type="software">sFlow</rs> and adaptive polling sampling as discussed before for training and testing, each dataset is divided into training and test sets followed by 80% of training and cross-validation and 20% of test sets. This work uses a combination of benign and normal datasets for training and cross-validation purpose, to make detection approach more realistic and enabling generalization for detecting new attack behaviours, which is a very crucial aspect for network security. Considering all these factors, the proposed solution employs a deep learning model with the appropriate classification. Where the model achieves great results as feasible evidence of our proposed study. For this mandatory purpose, we set SAE domain with only three hidden-layers with encoding/decoding elements of 10, 5, 2, all three layers processed following by descending order of 22-10-5-2-1, 22-10-5-1, 22-10-1. The hyper parameters and tested numeric values are depicted in Table 12.
        </p>
        <p>This paper utilizes the two-class classification model for normal and attack class including TCP, UDP and ICMP traffic streams. For better comparison, the SAE detection modelThis paper utilizes the two-class classification model for normal and attack class including TCP, UDP and ICMP traffic streams. For better comparison, the SAE detection model</p>
        <p>This section depicts the comparison of average CPU utilization for 
            <rs type="software">sFlow</rs> based and adaptive polling based sampling approaches between data-plane to control-plane locations, which is considered as highly influencing factor for detection model. Figure 8 (a) presents the different CPU usages such as CPU(TCP), CPU(UDP), CPU(ICMP), CPU(All). The summary of CPU utilisation for 
            <rs type="software">sFlow</rs> and adaptive polling sampling with time is depicted in Table 14. The proposed model receives TCP, UDP and ICMP attack with 100 Kb/s to 600 Kb/s. Overall 290 M Bytes of total malicious traffic injected to observe CPU utilization individually only at control-plane after sampling, from Figure 8 (a), it can be observed that CPU(UDP) only uses 29% of CPU utilization with 2164 encoding and decoding threads instructions. The CPU(TCP) utilizes only 38% CPU with 2479 CPU threads, In ICMP the CPU is constantly used at 26% with 2011 threads. Due to sFlow sampling, it can be observed that overall CPU utilization reduced from 90% to received total 140MB out of 290 MB. Moreover, adaptive polling based sampling measures higher network load due to the fact that this sampling requires individual calculations and queering FlowStats Request inside all switches flow table, it utilizes more CPU which make flow slower to reach at controller detection model.
        </p>
        <p>Our proposed system is based on IoT nodes sampling which effectively works in collaboration of SAE deep neural network model. It collects flows from data-plane via packet based sampling (
            <rs type="software">sFlow</rs>) and time-based (Adaptive Polling) sampling respectively. Overall our model has clear advantage of detecting the enormous amount of malicious traffic either with packet-based or flow based sampling approaches which reduce the Snort and deep learning models overhead processing, as intrusion detection systems are limited with processing and detection capabilities. Similarly, DNN models are also demanding more training time and complex configurations during the event of heavy flows. This enabled us to parse all crucial malicious and benign traffic streams to classify and label correctly. In case of mitigation or blocking any switches or hosts unwanted incoming flow would be more accurate and reliable task for SDN controller with simple northbound APIs. In collaboration, an SAE model individually performs on the attack and normal classes, which successfully achieve accuracy nearly 99% on normal traffic to qualify our proposed model parameters before our proposed model test.
        </p>
        <p>Most of the common features from both of proposed sampling extracted with 22 input vectors shown in Table 7, 8, 9. The proposed solution derives common features following the literature of [45] then merge all of the testbed features with only 22 feature vectors class. As observed from experimental results, 
            <rs type="software">sFlow</rs> achieved a higher detection rate of TP = 95%, TN = 90% with less than 4% of FP rate, whereas polling based implementation detection was around 5% less as compared to 
            <rs type="software">sFlow</rs>. Overall experiments represent that 
            <rs type="software">sFlow</rs> based implementation in our proposed work has significantly higher detection accuracy with minimal CPU and network load. There are some important factors that support this point, such as 
            <rs type="software">sFlow</rs> is flow oriented sampling technology, which utilizes sFlow agents in OVS switches with a sampling rate of 1/28, 1/ 64, 1/128, 1/256, 1/512 for s1 to s5 respectively. In this way, accurate sampled traffic was flexibly flowing to 
            <rs type="software">Snort</rs> IDS at the controller. The controller received around 192 M Bytes of total packets within 20 minutes of packets injection, the controller used 50% of total CPU overhead. On contrary the polling based implementation, we can observe that controller only receives 140 M Bytes within 20 minutes of packets injection, which is at least 27% fewer packets than 
            <rs type="software">sFlow</rs> at detection engine of 
            <rs type="software">Snort</rs> at the controller. Due to the fact of adaptive polling uses higher resource consumption to manipulate each packet inside switches and constantly sends each packet once match polling query. In this way, external traffic collectors have to wait for the next packets. Moreover, this implementation used 74% of total CPU, which is significantly higher for 140 M bytes of network packets as in real-time existing networks there large number of packets flows passing through ingress and egress ports of autonomous and service providers network.
        </p>
        <p>This paper presents co-detection model of deep learning with Snort IDS, to detect unwanted IoT nodes DDoS traffic with the help of 
            <rs type="software">sFlow</rs> and polling based traffic sampling at data-plane. This work analyzes network overhead between the SDN controller and data-plane with each sampling implementation to improve detection of IDS and DNN model capabilities. 
            <rs type="software">sFlow</rs> as flow oriented sampling utilized 50% of CPU with propagation rate of 340 KB/s packets towards detection unit of the controller, whereas adaptive polling based uses more than 70% total machine CPU at parsing rate of around 240 KB/s. Moreover, 
            <rs type="software">sFlow</rs> measures very low CPU and network overhead without sacrificing detection accuracy of deep learning model which is based on real-time detection of traffic with Snort IDS. DDoS detection accuracy trade-off between 
            <rs type="software">sFlow</rs> and adaptive polling based sampling was achieved 95% with less than 4% FP rate and 92% with an FP rate of 8% respectively. However, 
            <rs type="software">sFlow</rs> consistently stood superior for proposed DDoS detection model in term of accuracy, low CPU, and network overhead. These adopted sampling techniques are mandatory to support the future IoT application requirements, which can provide flexible and efficient data handling for classifying DDoS and benign traffic by reducing data for detection model of IoT networks. For future improvement, there are several directions being considered. First, to implement intelligent periodic polling based sampling only at SDN-enabled edge switches with real-time traffic streams that can help to lower down the crucial overhead. Secondly, it is very vital to train unsupervised deep learning model with two individual training of rule-based and signature-based real-time network datagrams, which could help to maximize DDoS detection accuracy as a whole, which is suitable for small to larger networks.
        </p>
        <p>This research has been produced as a part of PhD work, no funding is sought for this research by the authors.This research has been produced as a part of PhD work, no funding is sought for this research by the authors.</p>
        <p>52%. Similarly, in Figure 8 (b), based on adaptive polling sampling, CPU(TCP) utilization increased from 38% to 42% with threads execution of 2659. CPU (UDP) utilization also raised to 37% with 2551 threads. CPU utilization for ICMP stood at 6% higher than 
            <rs type="software">sFlow</rs> with some threads increment. However, in polling based sampling overall CPU usage was also higher as 74.25% during TCP, UDP, ICMP malicious data flow due to the nature of being calculating flows and packets equation individually in various switches. Figure 9 depicts the network load of 
            <rs type="software">sFlow</rs> sampling and adaptive polling based sampling between two virtual machines VM1 data-plane and VM2 control-plane. In VM1 data-plane(packets) represents injected traffic flows before sampling, and control-plane(packets) represents flows received by the controller after sampling. The network overhead cal-
        </p>
        <p>Raja Majid Ali Ujjan, Zeeshan Pervez, and Keshav Dahal have declared that they have no conflict of interest.Raja Majid Ali Ujjan, Zeeshan Pervez, and Keshav Dahal have declared that they have no conflict of interest.</p>
        <p>This article does not contain any studies with human participants or animals performed by any of the authors.This article does not contain any studies with human participants or animals performed by any of the authors.</p>
    </text>
</tei>
