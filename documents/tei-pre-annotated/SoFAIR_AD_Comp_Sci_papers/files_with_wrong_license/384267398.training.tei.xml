<?xml version="1.0" encoding="UTF-8"?>
<tei xmlns="http://www.tei-c.org/ns/1.0">
    <teiHeader>
        <fileDesc xml:id="_1"/>
        <encodingDesc>
            <appInfo>
                <application version="0.8.1-SNAPSHOT" ident="GROBID" when="2024-06-24T11:33+0000">
                    <ref target="https://github.com/kermitt2/grobid">A machine learning software for extracting information from scholarly documents</ref>
                </application>
            </appInfo>
        </encodingDesc>
    </teiHeader>
    <text xml:lang="en">
        <p>After the outbreak of COVID-19, the Internet of Medical Things (IoMT) has enabled the doctors to remotely perform their duties like diagnosing the patients, controlling the medical equipment, and monitoring the health of the quarantined patients in real-time through their digital devices. In IoMT, the security has paramount importance because the nodes exchange critical information over the vulnerable wireless medium. Attackers can exploit these vulnerabilities to eavesdrop on the vaccine formula, modify the antigen test results, switch off ventilators, etc. which can result in irreparable losses and fatalities. The virtual medical facilities must be protected from adversarial threats through secure sessions to ensure continuous care of COVID-19 affected patients. To address the security threat in IoMT, this paper proposes a lightweight and physically secure mutual authentication and secret key establishment protocol that makes use of Physical Unclonable Functions (PUF) to enable the network devices to verify the legitimacy of the doctor (user) and sensor node before establishing a session key. PUF also protects the sensor nodes deployed in an unattended and hostile environment from tampering, cloning, and side-channel attacks. The proposed protocol exhibits all the necessary security properties required to protect the IoMT networks like authentication, confidentiality, integrity, anonymity, untraceability, and so on. The formal (AVISPA) and informal security analysis demonstrate its robustness against attacks like impersonation, replay, a man in the middle, etc.</p>
        <p>Since the outbreak of COVID-19 in December 2019 the healthcare professionals around the word giving serious efforts and putting their lives at stake to cure the patients suffering from COVID-2019. To enable the doctors to perform their duties safely, the hospital authorities are trying to transform their physical medical practices to telemedical practices. Internet of Medical Things (IoMT) has evolved from the Internet of Things (IoT), where the doctor can use the wireless media to communicate with IoT enabled sensor nodes such as smart thermometers, smart ventilators, and so on [1]. The IoT enabled sensor nodes collect, analyze, and disseminate the health reports of the patients in real-time to the doctors [2] and enable them to diagnose, treat, and monitor the COVID-19 infected patients remotely. There are many challenges in the implementation and utilization of IoMT networks. The substantial issue lies with the several adversarial threats, security and privacy of the sensitive information of patients and healthcare institutions. The possible adversarial threats are eavesdropping [3], data breach [4], and denial of service (DoS) [5]. The situation becomes more adverse in IoMT since medical users and vendors have limited awareness of security threats [6] and possible remedies [7]. As per the reports, the adversary prefers to breach the data that mainly includes patients names, bank details, medical history, and insurance information, etc.</p>
        <p>The attackers are gaining more interest in IoMT due to the exponential growth of its market [8]. The adversaries exploits the vulnerabilities of the systems and networks to conduct cyber attacks and achieve their malicious desires. The absence of robust mutual authentication and key establishment scheme is the key factor attracting the adversaries towards IoMT networks [9]. The existing mutual authentication schemes are not directly applicable to IoMT networks as they are computation and communication expensive and can drain the precious energy reserves of IoT sensor nodes [10]. Moreover, most of the schemes do not consider the hostile environment of deployment of sensor nodes and become vulnerable to physical, cloning, and side-channel attacks [11]. Therefore, IoMT networks need a practical mutual authentication and secret key establishment approach that can provide robust security in all environments while being lightweight in computation and communication.</p>
        <p>Wolf et al. [12] emphasized on the various security issues in the Cyber-Physical systems and proposed a dynamic password-based user authentication model to restrict the unauthorized access to wireless sensor networks. Yeh et al. [13] introduced an asymmetric cryptography based authentication protocol for resource constrained networks but the scheme did not accomplish mutual authentication and is computationally expensive due to the use of public key cryptography. Khalil et al. [14] analysed that few user authentication and key agreement schemes for IoT environment are subjected to physical, man-in-the-middle and replay attacks. Wu et al. [15] revealed that a dynamic identity oriented user authentication protocol developed by Hsieh and Leu [16] has taken inadequate security measures to protect the session key, and is prone to physical attacks on sensor nodes. [17] introduced a novel lightweight approach to securing the IoT node communications with the cloud, however, the scheme is vulnerable to MITM, replay, and impersonation attacks. Li et al. [18] designed a 3factor user authentication scheme acquiring inputs such as user identity, password, and biometrics for its operation. As aforementioned, it is resource expensive since it computes 3 factors and exchanges 2688 bits. To reduce the computation expenditure, Esfahani et al. [19] introduced a lightweight scheme that makes use of only one way hash function and bitwise XOR operations. But the security analysis is inadequate to declare the protocol as robust against attacks. A hybrid model of authentication and key establishment is proposed in [20]. Paliwal [21] proposed a mutual authentication and key agreement approach with the use of lightweight one-way cryptography hash operations. The scheme protects the anonymity of identities but encounters difficulties in preserving privacy.</p>
        <p>In summary, most of the protocols are insecure against significant adversarial threats, fail to exhibit essential security properties to keep the communication secure, and are computationally and communication expensive. The IoMT networks carry very critical information, wherein a mild attack can result in fatalities. Therefore, the IoMT networks must deploy a strong mutual authentication and physically protected lightweight key establishment protocol to enable only the legitimate devices to communicate using a secured session key.</p>
        <p>Considering the importance of security and privacy of the communications in IoMT networks, this article proposes a lightweight, robust, and physically secure Mutual Authentication and Secret Key (MASK) establishment protocol for securing the sensitive health information of the patients. The protocol only permits the legitimate users to establish a secure connection with the IoT enabled medical equipment's (sensor nodes) for fetching the health reports of the patients. The protocol uses lightweight cryptography primitives, such as one-way hash function, nonce, and bit-wise XOR operations. The protocol exhibits all essential security properties like authentication, confidentiality, integrity, anonymity, etc. Reliability of the proposed protocol under compromised conditions is verified using formal and informal security analysis.</p>
        <p>A smart healthcare facility where COVID-19 affected patients take care constitutes of sensor nodes, gateway, and the user (e.g., doctor). The sensor nodes are integrated with the medical equipment to monitor the patients' health, etc. Gateway is used to relay the information between doctor and IoT enabled sensor nodes whereas the user (e.g., doctor) is interested to receive real time information from sensor nodes to take decisive actions regarding the patients' treatment.</p>
        <p>
            <rs type="software">MASK</rs> protocol attains all the prominent security properties [10].The proposed protocol also introduces a mechanism to protect the devices from physical tampering resulting in prevention from aforesaid attacks. 
            <rs type="software">MASK</rs> protocol also complies with the essential property to claim the protocol as efficient. The proposed protocol use lightweight cryptography operations and minimum message exchanges while still providing the highest level of security.
        </p>
        <p>Physically Unclonable Functions (PUF) are recommended as a solution to secure the hardware from adversarial threats. PUF is primarily endorsed for authenticating the edge devices having limited computing power, small memory, and so forth. Since the IoT devices transmit crucial data, therefore it becomes a necessity to integrate strong authentication algorithms to protect the devices from unauthorised abuses. However, being resource constrained, it becomes difficult for the edge devices to execute algorithms with acute requirements. As a result, the authentication of resource constrained edge (IoT) devices becomes a challenge.</p>
        <p>To prevent the IoMT networks from adversarial threats, the proposed protocol empowers the devices to perform mutual authentication followed by secret key establishment. The proposed protocol is executed in three phases, namely, user registration, device registration, and mutual authentication and secret key establishment. Table 1 provides the notations that have been used throughout the paper. Prior to the discussion on the three phases, assumptions are stated.</p>
        <p>The user('doctor') has to register its trusted device in the gateway for obtaining real time health information of the patients. The whole registration process is demonstrated through fig. 1 as follows.</p>
        <p>Step 1: Initially, the gateway generates a random challenge C 0 U for the current registration process along with another set of challenges</p>
        <p>consists of many random challenges that will be used by the gateway in future to verify the user device. The gateway forms the message {C 0 U , C SY N U } and sends it to doctor's device. ). Lastly, the doctor's device compose a message including</p>
        <p>, α and sends it to gateway for requesting authorization to communicate with sensor nodes.</p>
        <p>Step 3: After obtaining the response from user, gateway computes</p>
        <p>) and verify the identicalness between β and α; the gateway terminates the session if result is distinct, otherwise computes</p>
        <p>. At the end of the registration, gateway stores the</p>
        <p>for future communication with user.</p>
        <p>Step 4: Likewise, doctors's device also computes and stores</p>
        <p>. Apart from T ID 0 U , doctors' device also computes and stores user verification code λ, which is a function of user password (P W U ) and temporary identity of user (T ID 0 U ). The user will be prompted to enter the password (P W U ) every time he/she wishes to access the device for the particular application.</p>
        <p>Remark 1: every session, thus achieving untraceability. Moreover, instead of real identity of user {D H ID , D M CC LN }, temporary identity T ID 0 U is used to preserve user anonymity during message exchanges. Being resource constrained, the user device only executes few lightweight cryptography operations (hash and PUF) during registration to preserve resources. As no secret credentials are stored in the user device, therefore it cannot reveal any sensitive information (e.g., P W U ) despite being attacked. Besides, the protocol prevents the unauthorized access to the device by enabling the user authentication code, λ. The authentication code λ is a function of T ID 0 U and updates every session to protect the device from adversarial threats.</p>
        <p>The IoT enabled sensor node('sensor node') integrated with the medical equipment at the healthcare institution is first registered with the gateway. The registration process is very essential to discriminate between legitimate and malicious nodes. The gateway does not permit the doctor to communicate with the non-registered nodes to prevent cyber attacks. The whole process of sensor node registration is depicted in fig. 2 and discussed as follows.</p>
        <p>Step 1: The gateway initially generates a challenge for sensor node registration C 0 SN followed by another set of challenges</p>
        <p>SN ) to empower the gateway in verifying the association between response and challenges. Finally, the sensor node prepares a message {SN IEI , R 0 SN , R SY N SN , δ} and delivers it to the gateway through a secure channel.</p>
        <p>Step 3: Upon receiving the message, gateway at first computes η = h(C 0 SN C SY N SN ) followed by a comparison of η ≡ ? δ to verify the relationship between responses and challenges. Subsequently, the gateway derives the temporary identity of the sensor node T ID 0 SN {= F (C 0 SN , SN IEI )}. After the computations and retrieval, the gateway stores the</p>
        <p>SN , and T ID 0 SN for future interaction with the sensor node.</p>
        <p>Step 4: Likewise, the sensor node computes and stores the temporary identity T ID 0 SN {= F (C 0 SN , SN IEI )}. The use of temporary identity enables the sensor node to accomplish anonymity and untraceability while exchanging messages over the public channel.</p>
        <p>Remark 2: Gateway records the real identity of the sensor node SN IEI during registration for future correspondence purposes. Being resource-constrained and deployed in a hostile environment, the protocol does not store any secret credentials in the sensor node. Therefore, the attacker would not get any information despite physically capturing the sensor node. Besides, the sensor node only executes lightweight cryptography operations (hash and PUF) to prolong their active lifetime. It is noteworthy that T ID 0 SN is a function of C 0 SN , and SN IEI . The use of new challenge C N U for every session assures distinct short-term identity of sensor node T ID N SN for every session, therefore accomplishing untraceability. Moreover, T ID 0 SN does not disclose the real identity of the sensor node during message exchanges, thus preserving sensor node identity anonymity.</p>
        <p>This phase demonstrates how the proposed protocol ensures the security and privacy of real-time communication between a doctor and a sensor node. The doctor and the sensor node prove their legitimacy to gateway succeeded by secret key establishment to prevent the unauthorized access of information to illegitimate nodes. The total process is illustrated in fig. 3 and explained as follows:</p>
        <p>Step 1: Initially the doctor has to prove its identity to the device. At this stage, the doctor has to input the same password P W U that was kept by him/her during the registration process. After the doctor enters the password P W U , the doctor's device calculates λ * = h(P W U T ID 0 U ) and verify the user authenticity, λ * ≡ ? λ. In case of non-equivalency, the device does not permit the user to succeed in further communication, whereas successful verification indicates that the device is being used by the legitimate user and should be permitted to proceed further. Afterward, the device generates a nonce N 1 U , and compute</p>
        <p>from the temporary identity T ID 0 U to add a second layer of identity anonymity and untraceability protection. At last, the doctor's device prepares the message {N 1 * U , T ID 0 * U } and sends it to the gateway through a public channel.</p>
        <p>Step 2: After receiving the identity details of user {N 1 * U , T ID 0 * U }, the gateway extracts the real nonce,</p>
        <p>Thereupon, the gateway verifies the freshness of the N 1 U . Subsequently, the gateway derives the temporary identity from pseudo-identity,</p>
        <p>and matches with the database. Non-availability of T ID 0 U in the database indicates a fraudulent attempt by an adversarial node. Once T ID 0 U is located in the database, the gateway selects the corresponding challenge (C 0 U ) and response (R 0 U ). To meet the privacy requirements, the gateway encloses the real</p>
        <p>ID , D M CC LN are not disclosed to anyone, therefore no one else can extract C 0 U and N 1 G other than gateway; the doctor identity details are already provided to the gateway during registration. Finally, the gateway computes</p>
        <p>help the doctor's device to verify the authenticity of the gateway. The gateway sends the challenge C 0 U , nonce N 1 G , and authentication message enclosed in G 1 , G 2 , and G 3 , respectively to the doctor's device through a public channel.</p>
        <p>Step 3: Upon receiving the G 1 , G 2 , and G 3 from the gateway, the doctor's device begins extracting the challenge</p>
        <p>The equal values hereby proves the authenticity of the gateway as only gateway has the knowledge of R 0 U , whereas unequal values indicates a suspicious attempt by an unauthorized entity. The user device then prepares the pseudo-identity of the sensor node</p>
        <p>⊕ SN IEI with whom the communication link has to be established. Thereafter, the doctor device prepares device authentication value,</p>
        <p>U is also shared secretly with gateway. The final message {U 2 , U 3 , SN * IEI } is then sent to the gateway through a public channel.</p>
        <p>Step 4: Firstly, the gateway derives the N 2 U = U 3 ⊕ D M CC LN and evaluates the freshness. If fresh, gateway begins the computation of</p>
        <p>U and examines the identicalness between U 2 and G 4 . The message cannot be duplicated as it contains N 2 U , moreover, it cannot be prepared by anonymous entity since it contains T ID 0 U which is only available with doctor's device and gateway. The mutual authentication between doctor and gateway gets accomplished if U 2 ≡ G 4 , else fails. The gateway afterward extract the real identity of the sensor node for accomplishing mutual authentication,</p>
        <p>After retrieving SN IEI , the gateway then selects the corresponding C 0 SN , R 0 SN pair and generates the N 2 G . To ensure privacy, the challenge C 0 SN and the nonce N 2 G is secretly enclosed within G 5 and G 6 , respectively. Gateway also prepares</p>
        <p>to prove its identity to the sensor node. The gateway calculates the session key (SK) for the sensor node and enclose it secretly within</p>
        <p>Correspondingly, gateway also encloses the temporary identity of doctor within</p>
        <p>Lastly, gateway selects a random new challenge C 1 SN from the set of challenges C SY N SN generated at the time of registration and computes</p>
        <p>SN and send it to the sensor node through a public channel.</p>
        <p>Step 5: After receiving the message {G 5 , G 6 , G 7 ,</p>
        <p>Select:</p>
        <p>Retrieve:</p>
        <p>Afterward, the sensor node generates the nonce N 1 SN and enclose it within SN 2 (= N 1 SN ⊕ T ID 0 SN ) for its safe transmission. Besides, the sensor node computes SN 3 = h(C 0 * SN N 2 * G R 0 * SN SK) to accomplish mutual authentication with gateway and also to assure the gateway of correct session key (SK) generation. Following the SN 3 , the sensor node retrieves the new challenge</p>
        <p>SN provided by the gateway to generate new temporary identity T ID 1 SN required for next future session. Once new challenge C 1 SN is extracted, the sensor node calculates the T ID 1 SN = F (C 1 SN , SN IEI ) and stores the new temporary identity for future communication with gateway. At last, the sensor node composes a message {SN 2 , SN 3 } and send it to gateway through a public channel.</p>
        <p>Step 6: Upon receiving SN 2 and SN 3 , the gateway starts the retrieval of N 1 SN (= SN 2 ⊕ T ID 0 SN ) and verifies the freshness of N 1 SN . After the nonce verification, the gateway computes, U } and sends it to doctor's device through a public channel.</p>
        <p>Step 7: The doctor's device receives the message {G 9 , SK * U , G 10 , C 1 * U } from gateway. The doctor's device retrieves the nonce N 3 G = G 9 ⊕D H ID and examines its freshness. Thereafter, the doctor's device begins the extraction of session key,</p>
        <p>) and verify the identicalness between U 4 and G 10 . Identical U 4 and G 10 results in accomplishment of mutual authentication between doctor's device and gateway whereas dissimilar U 4 and G 10 results in connection termination. Successful verification also assures the doctor's device of correct key generation. Finally the device extracts the new challenge</p>
        <p>U and computes the new temporary identity,</p>
        <p>. The doctor's device stores the new temporary identity T ID 1 U for future communication with the gateway.</p>
        <p>Remark 3: The user authentication on the device ensures that only legitimate user is allowed to access the device for obtaining information from sensor nodes. Likewise user's device, the gateway also verifies the T ID U and T ID SN and permits only legitimate devices to access sensor nodes. In the</p>
        <p>G } are disclosed on the public channel, therefore only authorized entities are entitled to retrieve this information. The verification message (U 2 ) for gateway is sent as a message digest, thereby not allowing the attacker to interpret and modify despite eavesdropping the G 1 , G 3 , and T ID 0 * U . Moreover, the attacker cannot prepare U 2 because he does not have the knowledge of the C 0 * U , N 1 * G , R 0 * U , and T ID 0 U . Similarly, attacker cannot interpret and alter G 7 despite eavesdropping G 5 , G 6 , and G 7 because he does not have the knowledge of C 0 SN , N 2 G , R 0 SN . The proposed protocol enables the gateway to exchange the session key and user identity securely with sensor node since it is enclosed using the values (R 0 SN , T ID 0 SN , and N 2 G ) not available to anyone except sensor node.</p>
        <p>The security of the MASK protocol has been verified through formal and informal analysis. The inferences obtained from the analysis are discussed as follows.</p>
        <p>To examine the strength of the 
            <rs type="software">MASK</rs> protocol, we have used the "Automated Validation of Internet Security Protocols and Applications (AVISPA)" tool [3], [22]. 
            <rs type="software">AVISPA</rs> tool is broadly adopted by the researchers for the strength investigation of mutual authentication and secret key establishment protocols. The 
            <rs type="software">MASK</rs> protocol has been scripted into the AVISPA understandable High-Level Protocol Specification Language (HLPSL). The 
            <rs type="software">MASK</rs>-HLPSL file is further transformed into Intermediate Format (IF) before being delivered to the backend of 
            <rs type="software">AVISPA</rs>. For the vulnerability assessment of 
            <rs type="software">MASK</rs> protocol, 
            <rs type="software">AVISPA</rs> is configured with Dolev-Yao (DY) adversary model [23]. The backend upon execution declares the scheme as either "safe/unsafe," or "inconclusive"; inconclusive mainly results when the simulation of the protocol fails to happen either due to script error or backend incompatibility to a cryptography operation.
        </p>
        <p>The MASK-HLPSL 
            <rs type="software">script</rs> contains the description of 3 basic roles, "user," "gateway," and "IoT node". Besides, the environment role defines the various sessions and intruder knowledge. As per the DY adversary model, the attacker has the capability to eavesdrop, alter, and replay the information. Another element in the environment role is "declaration of goals". The goals declared in the environment role of 
            <rs type="software">MASK</rs> protocol are data privacy, freshness, and authentication, etc. Upon execution, the OFMC backend produced the result as "safe" after visiting 88 nodes with a depth of 11 plies. Likewise, simulation of CL-AtSe took 0.19s to declare the protocol as "safe." The MASK-HLPSL-IF script has been fed to other 2 backends (SATMC and TA4SP) as well, but resulted inconclusive because these backends do not support bit-wise XOR operations. Therefore, it can be summarized from the results of OFMC and CL-AtSe backends that 
            <rs type="software">MASK</rs> protocol is safe from all prominent attacks including, replay and MITM.
        </p>
        <p>The strength of the MASK protocol has been analyzed informally in this section for the following security properties and attacks. Proof. In a replay attack, the adversary captures the message and tries to resend it to the sensor node after a certain time to access unauthorized medical information of patients. Let us assume that the adversary has eavesdropped on the message {N 1 * U , T ID 0 * U } sent by the doctor to the gateway. The adversary later replays the message {N 1 * U , T ID 0 * U } to the gateway; the gateway discards the request since it contains old nonce, N 1</p>
        <p>U . The MASK protocol equips every message with a random integer value called a nonce to accomplish message freshness that prevents replay attacks. Similarly, other exchanged messages</p>
        <p>SN , and N 3 G , respectively; thus ensuring the overall protection of the IoMT network from replay attacks. Moreover, the adversary cannot modify the nonce because it is enclosed secretly within other elements of the message. For example, the nonce sent by sensor node towards gateway is computed as SN 2 = N 1 SN ⊕ T ID 0 SN ; since the adversary does not know T ID 0 SN , therefore attacker can't revive and modify the nonce, N 1 SN . Hence, 
            <rs type="software">MASK</rs> protocol accomplishes message freshness and prevents replay attacks.
        </p>
        <p>Theorem 2. Secured from impersonation and MITM attacks.</p>
        <p>Proof. The adversary in impersonation attack tries to pose himself as the legitimate entity to get unauthorized access to legitimate information. The adversary needs to have some knowledge of the victim or its device credentials before launching this attack. In the MASK protocol, neither the true identities nor the secret information is shared over the public channel. Consider a scenario where attacker intercepted the message comprising G 5 , G 6 , G 7 , SK * SN , µ, and C 1 * SN . The message contains the identity of user, T ID 0 U and secret key, SK but enclosed secretly within</p>
        <p>For the attacker, it is computationally infeasible to retrieve T ID 0 SN and SK from µ and SK * SN due to collision-resistant property of hash functions [11]. Moreover, every device employing 
            <rs type="software">MASK</rs> protocol is integrated with unique PUF. The attacker neither has any knowledge of the responses generated by the PUF (R 0 U , R 0 SN ) nor can predict [24]; therefore, the attacker cannot duplicate the identity of the user and sensor node. Hence, the proposed protocol is protected from impersonation attacks.
        </p>
        <p>The attacker can also play MITM to compromise the communications. Let us suppose that adversary has captured the message {U 2 , U 3 , SN * IEI }. Subsequently, the adversary can try to modify the captured message to execute MITM. The adversary becomes unsuccessful to make any modifications in the MASK protocol messages because the information in the messages</p>
        <p>LN , and</p>
        <p>⊕ SN IEI are processed through one-way hash function and bit-wise XOR operation. The collision resistant property of hash functions [11] does not allow the attacker to either predict or revive the challenge</p>
        <p>Likewise, other messages of the MASK protocol are protected. Therefore, the MASK protocol is secured against MITM attacks. Theorem 3. Preserves integrity and prevent modifications.</p>
        <p>Proof. The alterations by the attacker can ruin the real intent of the message and may produce unexpected outcomes. Consider an instance where adversary captured the message</p>
        <p>Despite capturing, the adversary cannot modify it since it is available as a message digest and can't be revived. The adversary has no information related to PUF (R 0 * U ), nonce (N 2 U ), and identity (D H ID ), etc. required to modify the data. Moreover, the information computed through one way hash function complies with collision-resistant property [11] that does not allow the attacker to generate information from the message digest. The other messages of the 
            <rs type="software">MASK</rs> protocol are also composed similarly. Thus, the MASK protocol preserves the message integrity and further safeguard from modification attacks. Proof. The adversary can try to disrupt the services of legitimate entities by flooding them with fraudulent requests. The consequences can be mild to severe including, exhaustion of battery reserves, temporary shutdown of network, denial of service to legitimate entities due to request overloading, etc. [25], [26]. Let us assume that the adversary eavesdropped on the message
        </p>
        <p>, and replayed it later to exhaust the battery reserves of the user device. Immediately after reception, the user device verifies the nonce N 1 G , since the replayed message contains the old nonce, the user device terminates the connection instead of allocating new resources. Therefore, the 
            <rs type="software">MASK</rs> protocol can protect the network from DoS attacks to some extent. Theorem 5. Promises session key security and protection from known key attacks.
        </p>
        <p>Proof. The adversary desires to acquire the session key to compromise all the future communications. In the MASK protocol, the gateway exchanges the secret key with sensor node and user device through the following messages,</p>
        <p>It is noteworthy that session key of sensor node is secretly enclosed within the</p>
        <p>Similarly, the session key for the user is also encapsulated secretly within</p>
        <p>Therefore, the adversary who has no information about R 0 SN , T ID 0 SN , N 3 G cannot revive the session key (SK). Let us take a hypothetical case that adversary somehow has obtained the information after the expiry of the session, e.g., response (R 0 U , R 0 SN ), temporary identity (T ID 0 U , T ID 0 SN ), and session key (SK). These details would not help the adversary to request new keys from the gateway because the adversary does not know R 1 U , R 1 SN , T ID 1 U , and T ID 1 SN which is required for authentication at gateway before establishment of new session keys. Therefore, knowing an old key does not enable the attacker to predict or compute new session keys. Therefore, the 
            <rs type="software">MASK</rs> protocol attains session key security and prevents known key attacks. Theorem 6. Protection against physical attacks.
        </p>
        <p>Proof. Due to the tiny size, the sensor nodes deployed in a hostile environment is always subjected to physical attacks. Assume a situation where the attacker has physically captured the sensor node. The attacker's aim is either to prepare a clone or steal information from the chip of the sensor node. As aforementioned in the protocol description, the 
            <rs type="software">MASK</rs> protocol integrates the user device and sensor node with the PUF to protect them from physical tampering. Since the output of the PUF {R 0 U = P D (C 0 U ), R 0 SN = P SN (C 0 SN )} depends upon the intrinsic physical variations in the IC, therefore any attempt to tamper with the PUF would destroy the unique characteristics of the device and render the PUF useless [11]. Additionally, 
            <rs type="software">MASK</rs> protocol does not store any crucial information in the sensor node and user device. Consequently, the 
            <rs type="software">MASK</rs> protocol is safe against cloning and side-channel attacks.
        </p>
        <p>Theorem 7. Exhibits data privacy.</p>
        <p>Proof. The adversaries captures the information and misuse it for their own benefit. It can be seen that 
            <rs type="software">MASK</rs> protocol does not exchange anything in the plain text considering the vulnerability of the wireless channel. Assume an instance where the adversary has captured the message G 9 , SK * U , G 10 , C 1 * U to extract the useful information. The message component G 9 is composed of nonce (N 3 G ) and doctor identity (D H ID ); the attacker would not be able to retrieve the real nonce (N 3 G ) as the doctor identity (D H ID ) is never disclosed openly. Similarly
        </p>
        <p>) are computed using secret values and one way hash function. Therefore, the information in the message remains confidential. Likewise, the remaining messages of the protocol preserves the data privacy.</p>
        <p>Theorem 8. Attainment of user and sensor node identity anonymity and untraceability.</p>
        <p>Proof. The attackers use the identity information to conduct impersonation and MITM attacks whereas trace the origin of messages to perform physical and DoS attacks. Let us imagine that adversary has captured the message {N 1 * U , T ID 0 * U } to extract the identity details (D H ID , D M CC LN ) of user. In spite of successful capturing, the adversary can not reveal the real identity (D H ID , D M CC LN ) since it is never used during mutual authentication and key agreement phase. During the registration phase of 
            <rs type="software">MASK</rs> protocol, the gateway generates the temporary identity of the sensor node T ID 0 SN and user device T ID 0 U for future correspondence. Moreover, the temporary identity is further transformed into pseudoidentity during the mutual authentication for enhanced security. The user device sends the pseudo-identity of sensor node
        </p>
        <p>while communicating with the gateway. Hence the real identities of the sensor node and user device are never disclosed, thus keeping the communication anonymous. Moreover, the temporary identities</p>
        <p>., C N SN ), thus ensuring untraceability of user device and sensor node.</p>
        <p>The 
            <rs type="software">MASK</rs> protocol has been tested considering CM5000 TelosB mote with specifications as TI MSP430F1611 microcontroller, CC2420 RF chip, memory 1 MB, and a power source of 3V (2×AA battery) [29]. The CM5000 TelosB mote is effective in operation but suffers due to limited resources such as power capacity, computing capability, storage space, and so on. Therefore, the security protocols should operate with minimum storage requirements. Besides, the security protocols should consume minimum energy while computation and communication to extend the lifetime of devices and hence networks. Considering the requirements, the 
            <rs type="software">MASK</rs> protocol has been evaluated in the resource-constrained environment to verify its suitability for the lightweight applications of IoMT. During the investigation, it is revealed that 
            <rs type="software">MASK</rs> protocol makes use of only 0.0008% of total memory space available in CM5000 TelosB mote whereas the schemes [10], [19], [21] requires 0.036%, 0.027%, and 0.015% of the storage space, respectively. It is evident from the investigation that the 
            <rs type="software">MASK</rs> protocol has very little storage space requirements in comparison to conventional protocols [10], [19], [21]. It is worth noting that the remaining schemes [18], [20], [22], [28] have not mentioned the storage cost requirements, hence the comparison is not possible.
        </p>
        <p>The strength of the MASK protocol in a compromised environment has been examined and the results are presented Apart from the accomplishment of security properties, the MASK protocol is guarded against the most prominent attacks, to name a few, impersonation, modification, MITM, replay, cloning, and side-channel attacks. On the contrary, the conventional approaches [10], [18]- [22], [28] do not guarantee data privacy and untraceability. Moreover, these schemes [10],</p>
        <p>[18]- [22], [28] are also vulnerable to side-channel and cloning attacks. Also, the scheme proposed by Gope et al. [27] does not protect against DoS attacks. Since most of the schemes are neither protecting against physical attacks nor accomplishing untraceability and anonymity, therefore their deployment in a hostile environment can pose threats to the entire network. Hence, the 
            <rs type="software">MASK</rs> protocol is superior in contrast to other schemes [10], [18]- [22], [27], [28] in terms of preserving security properties and protection from attacks.
        </p>
        <p>The protocol messages should be as minimum and as little as possible to avoid draining the battery reserves of mote. The TelosB mote [29] consumes 0.72 µJ and 0.81 µJ of energy [3], [9], [10] while transmitting and receiving, respectively. Table III provides the number of bits (T X /R X ) and the quantity of energy consumption (µJ) by a sensor node during the mutual authentication and key establishment phase of the proposed protocol. Note that the registration phase is [10] 720 519 [27] 1792 1405 [28] 912 703 [22] 864 653 [18] 960 748 [19] 1024 772 [20] 960 733 [21] 912 It is apparent from the table III that 
            <rs type="software">MASK</rs> protocol uses the resources of the resource-deprived sensor node efficiently in comparison to the traditional approaches [18]- [21], [27], [28].
        </p>
        <p>The schemes [10], [22] though consumes a little less energy than the proposed protocol, however, are incompetent to provide security to real-time IoMT applications. Moreover, these schemes [10], [22] neither prevent physical attacks nor ensure untraceability. Hence, using these approaches [10], [18]- [22], [27], [28] in IoMT networks can result in unexpected adverse consequences. Fig. 5 depicts the amount of energy spent by a sensor node for transmission and reception during the mutual authentication and key establishment phase. It is noticeable that the sensor node in the MASK protocol consumes the least energy during transmission and reasonable energy while reception. Thus, the energy-efficient characteristics of the 
            <rs type="software">MASK</rs> protocol makes it superior in comparison to other existing protocols [10], [18]- [22], [27], [28].
        </p>
        <p>The computation cost spent by the user, gateway, and sensor node for implementing the MASK protocol have been analyzed and presented in Table IV. It can be observed that the MASK protocol is computation efficient because it employs only lightweight operations such as hash, PUF, and XOR rather than bulky cryptography operations like asymmetric and symmetric ciphers, scalar multiplications, and fuzzy extractors.</p>
        <p>15 C H + 10 C XOR + 2 C R [20] 18 C H + 9 C XOR + 3 C R + C B + 6 C SM [21] 25 whereas the MASK protocol only does it twice. Moreover, the scheme in [27] uses the fuzzy extractor for retrieving the bio-metrics whereas the 
            <rs type="software">MASK</rs> protocol does not use any bio-metrics. The approaches developed by Gaba et al. [10] and Li et al. [18] utilizes asymmetric and symmetric ciphers that overburdens the tiny processor of the sensor node. The other protocols designed by Das et al. [22], Li et al. [20], and Paliwal [21] are also computing expensive since they calculate bio-metrics, scalar multiplications, and modulus, respectively. Besides, the approaches in [22] and [21] also make excessive use of hash and XOR operations. The remaining protocols [19], [28] have reasonable computation complexity, however, it is achieved at the cost of compromised security. The schemes in [28] and [19] are vulnerable to DoS, cloning, and sidechannel attacks and also fail to provide data privacy and sensor node untraceability. Additionally, these approaches [19], [28] are communication expensive as well. Fig. 6, Fig. 7, and Fig. 8 independently compares the cost of user, gateway, and sensor node, of MASK and other protocols, respectively. Based on the above analysis, it has become evident that the MASK protocol has attained all essential security properties with a very reasonable communication and computation cost. The vertical bars in the Fig. 9 illustrates the total number of messages exchanged by the sensor node throughout the protocol whereas the diamond tag in the bar indicates the num- to select a protocol for a particular application because more messages lead to more delay, overhead, and energy exhaustion. Conclusively, it can be summarized that 
            <rs type="software">MASK</rs> protocol is more robust and lightweight in comparison to state of the art protocols.
        </p>
        <p>This article have introduced a robust and lightweight security protocol to provide mutual authentication and secret key establishment between doctor and sensor node. The strength of the MASK protocol has been examined through formal and informal security analysis where it is declared safe from all the attacks mentioned in the DY adversary model. The performance analysis has proven the capability of 
            <rs type="software">MASK</rs> protocol to protect the sensor node from physical and other prominent attacks. The comparison reveals that 
            <rs type="software">MASK</rs> protocol outperforms the other conventional protocols in terms of preventing attacks, computation and communication efficiency, and so forth. In the future, the MASK protocol may be extended for those hostile environments where network devices like gateways are also subjected to physical attacks.
        </p>
    </text>
</tei>
