<?xml version="1.0" encoding="UTF-8"?>
<tei xmlns="http://www.tei-c.org/ns/1.0">
    <teiHeader>
        <fileDesc xml:id="_1"/>
        <encodingDesc>
            <appInfo>
                <application version="0.8.1-SNAPSHOT" ident="GROBID" when="2024-06-24T11:22+0000">
                    <ref target="https://github.com/kermitt2/grobid">A machine learning software for extracting information from scholarly documents</ref>
                </application>
            </appInfo>
        </encodingDesc>
    </teiHeader>
    <text xml:lang="en">
        <p>i cies.html This document may differ from the final, published version of the research and has been made available online in accordance with publisher policies. To read and/or cite from the published version of the research, please visit the publisher's website (a subscription may be required.)</p>
        <p>Metadata, citation and similar papers at core.ac.uk</p>
        <p>Provided by Northumbria Research Link</p>
        <p>(AR) and virtual reality (VR), have been fast developing and increasingly outgrowing the limited capabilities of devices [1]. Thanks to the recent advancement of mobile edge computing (MEC) technology, the gap between the limited amount of resource in devices and the demands for better experience is being reduced [2], [3]. With the help of MEC, the UE can offload the intensive computations to the nearby edge servers to save energy consumption and increase the computational capacity [4], [5]. However, different from the traditional cloud in data center, edge cloud may be implemented by the router, switches, which may have some free computing resource and are closer to the users. Recently, vehicle and UAV [6] based MEC has also been proposed. Due to limited amount of the computing resource in MEC and finite physical bandwidth of wireless channels, task admission control and resource allocation are normally required, especially in the presence of a large number of delay-sensitive tasks. The problem is generally formulated as mixed integer nonlinear programming (MINLP). To tackle the MINLP problem, branch-and-bound algorithms [7] and dynamic programming [8] are normally used to obtain the globally optimal offloading solution. However, the search spaces of both methods increase exponentially with the network size and are computationally prohibitive for large-scale MEC networks. To reduce the computational complexity, heuristic local searching methods are proposed. For instance, [9] proposed a coordinate descent (CD) method that searches along one binary variable at a time. A similar heuristic search method for multi-server MEC networks was studied in [10], which iteratively adjusts binary offloading decisions. Another widely adopted heuristic method is through convex relaxation, e.g., by relaxing integer variables to be continuous between 0 and 1 [11] or by approximating the binary constraints with quadratic constraints [12].</p>
        <p>Nonetheless, on one hand, the solution quality of reducedcomplexity heuristics is not guaranteed. On the other hand, both searching-based and convex relaxation methods often require a large amount of iterations for an algorithm to reach a satisfying local optimum. Hence, they are unsuitable for real-time processing in fast changing environment, as the optimization problem needs to be re-solved once the number and position of UEs have varied significantly.</p>
        <p>Recently, some artificial intelligence methods have emerged as effective tools for enhancing MECs. In [13], the energyefficient computation offloading management scheme in the MEC system with small cell networks (SCNs) is proposed, and a hierarchical genetic algorithm (GA) and particle swarm optimization (PSO)-based heuristic algorithm are designed to solve this problem. In [14], a deep learning (DL) algorithm based on multi-long and short-term memory (LSTM) networks is proposed to forecast the traffic of small base stations (SBSs), on the basis of which an offline mobile data offloading strategy obtained through on cross-entropy is presented. In [15], a conceptor-based echo state network is proposed to predict content request distribution of users and its mobility pattern when the network is available. Based on the prediction results, the optimal positions of UAVs and the content to cache at UAVs can be obtained. In [16], a distributed deep learning offloading algorithm is introduced in MEC networks, where multiple parallel DNNs are trained separately and applied to make offloading decisions cooperatively. In [17], an emerging deep neural network technique is used in the mobile crowd sensing (MCS). The proposed technique employs convolutional neural network for feature extraction, and then directs the sensing and movement of UEs under the guidance of the distributed multi-agent deep deterministic policy gradient method. In [18], a deployment strategy for the distributed multi-layer convolutional neural network is presented. The strategy divides the convolutional neural network into two parts: the preprocessing part and the classification part. The preprocessing part is deployed on the edge server for feature extraction and compression of the image data so as to reduce the data transmission between the edge server and the cloud server.</p>
        <p>Nonetheless, on one hand, the heuristic computation algorithms have excellent global search ability and high calculation accuracy, but they need long computing time. On the other hand, the supervised learning algorithms have outstanding prediction and reasoning capabilities, but they require a large amount of labelled training data.</p>
        <p>In this paper, we consider a hybrid mobile edge computing (H-MEC) platform, where there are ground stations (GSs), ground vehicles (GVs) and unmanned aerial vehicle (UAVs), all with edge cloud enhanced, which can enable UEs with computational intensive tasks to offload. We aim to obtain an online offloading algorithm to minimize the energy consumption of all the UEs, by jointly optimizing the positions of GVs and UAVs, user association and resource allocation in real time, while considering the dynamic environment. Towards this end, we propose a hybrid deep learning based online offloading (H2O) framework to achieve the above targets. Compared with the existing integer programming and learning based methods, we have the following novel contributions:</p>
        <p>• We first introduce a large-scale path-loss fuzzy c-means (LS-FCM) clustering algorithm to locate the positions of UAVs and GVs, which has two improvements compared to the traditional FCM: First, it can fix some cluster centers denoted as GS positions and not allow them to participate in the iteration process. Second, it introduces the large-scale path-loss component to replace distance in clustering process. We finally evaluate the proposed H2O framework under extensive numerical studies. The experiment results of the proposed H2O are compared with several different kinds of benchmark solutions, which demonstrates the feasibility and effectiveness of our framework. The simulation results have also shown that our solutions have better computational efficiency and accuracy. This can make real-time and optimal design feasible in the H-MEC networks even in a fast changing environment. The remainder of this paper is organized as follows. In Section II, we describe the system model and problem formulation. We introduce the detailed designs of the H2O algorithm in Section III. Numerical results are presented in Section IV. Finally, the paper is concluded in Section V.</p>
        <p>Fig. 1 shows our proposed H-MEC networks with several GSs, GVs and UAVs, all of which have edge server enhanced. The locations of GSs are assumed to be fixed whereas the locations of GVs and UAVs can be optimized.</p>
        <p>We consider that there are N UEs randomly distributed in the ground, each of which has a computation task to be executed. The set of UEs is denoted as</p>
        <p>Consider there are J UAVs, K GVs and M GSs, which can enable the UEs to offload the tasks. The sets of UAVs, GVs and GSs are denoted as</p>
        <p>Fig. 1: The H-MEC network.</p>
        <p>to denote the possible places where the UEs can execute the tasks, where a L i and a M EC i,j denote the local executing, and offloading to the H-MECs (including UAVs, GVs and GSs), respectively. Then we have the following:</p>
        <p>where a L i = 1 means that the i-th UE decides to execute the task itself, and a L i = 0 otherwise, a M EC ij = 1 means that the i-th UE decides to offload the task to the j-th UAV (when j ∈ J ), or to the j-th GV (when j ∈ K), or to the j-th GS (when j ∈ M), and a M EC ij = 0 otherwise. It is assumed that each task can be executed at most one place. Then, we have</p>
        <p>Similar to [19], we assume that the i-th UE has the computational intensive task Q i to be executed as follows:</p>
        <p>where F i describes the total number of the CPU cycles of Q i to be computed, D i denotes the data size transmitting to the H-MECs if the offloading action is decided and T req is the latency constraint or quality of service (QoS) requirement of this task. Without loss of generality, in this paper, we consider that all the tasks have the same time requirement T req . D i and F i can be obtained by using the approaches provided in [20].</p>
        <p>If the task is selected to offload, the execution time of the task is given by:</p>
        <p>where f ij is the computation capacity of the j-th H-MEC providing to the i-th UE. Also, the time to offload the data is given by:</p>
        <p>where r ij is the offloading data rate from the i-th UE to the j-th place. Then, we can have:</p>
        <p>which means that each task must meet the latency requirement. If this task is executed in UE itself, one has</p>
        <p>where f L i is the local executing capacity. Therefore, one can have</p>
        <p>Also, assume that the computing capacities in the UEs, UAVs, GVs and GSs are limited as</p>
        <p>where F L i,max is the local computational capability of the i-th UE, F M EC j,max is the remote computational capability of the j-th H-MEC. The power consumption in the i-th UE can be given by</p>
        <p>where P T ij is the transmitting power from the i-th UE to the j-th H-MEC and P E i is the execution power in the i-th UE if UE conducts the task itself and</p>
        <p>where k i ≥ 0 is the effective switched capacitance and v i ≥ 1 is the positive constant. To match the realistic measurements, we set k i = 10 -27 and v i = 3 [21].</p>
        <p>Assume that the coordinates of the i-th UE, the jth UAV, the j-th GV and the j-th GS are</p>
        <p>), and (X GS j , Y GS j ), respectively. Then, the horizontal distance between the i-th UE and the j-th UAV is given by</p>
        <p>(12) If UEs decide to offload the task to UAVs, the data rate can be given as</p>
        <p>where B is the channel bandwidth, h U AV ij is the channel quality information (CQI), denoted as</p>
        <p>is the largescale path-loss component [22]. Note that we assume that the users offload their tasks to UAV via orthogonal frequency division multiplexing (OFDM) channels, which means that there is no interference between each other. Similar to [23], we assume that horizontal coverage of UAV is constrained by the following</p>
        <p>where φ j can be decided by the angle of antenna in the UAV [23].</p>
        <p>Then, the horizontal distance between the i-th UE and the j-th GV is</p>
        <p>) If UEs decide to offload to the GVs, the data rate can be given as:</p>
        <p>where we assume the UEs share the same channel when they decide to offload to the same GV and there is interference between them.</p>
        <p>The horizontal distance between the i-th UE and the j-th GS is as</p>
        <p>If UEs decide to offload to the GS, the data rate can be given as</p>
        <p>where</p>
        <p>is the small-scale fading component and R GS ij -2 is the large-scale path-loss component.</p>
        <p>Define the decision variables as</p>
        <p>Then, one can formulate the energy minimization optimization as</p>
        <p>(1), ( 2), ( 8), ( 9), ( 14).</p>
        <p>One can see that Problem (P 1) is an MINLP problem, which is hard to solve in general. This is because the admission decision A is binary while the resource allocation decision F and locations of UAV W and GV G are continuous. The major difficulty of solving P 1 lies in three aspects: (1) large-scale mixed integer programming optimization, (2) realtime decision-making and (3) the dynamic environment. To circumvent these hurdles, we propose a novel H2O framework by first applying FCM clustering algorithm to get the positions of GVs and UAVs. Then, DNN is trained offline by using the samples obtained from PSO with the global search. After that, DNN can be applied to make the real time decision, based on the input of fuzzy membership information, even in a fast changing environment. The important notations used throughout this paper are summarized in TABLE I. Offloading indicator</p>
        <p>Transmitting power</p>
        <p>Local execution power</p>
        <p>The transmitting data size</p>
        <p>The required number of the CPU cycles</p>
        <p>The latency constraint</p>
        <p>The small-scale fading component</p>
        <p>The large-scale path-loss component</p>
        <p>In this section, we provide a novel algorithm named hybrid deep learning based online offloading (H2O) to solve Problem P 1. The structure of the H2O algorithm is illustrated in Fig. 2, which is composed of four parts: GV and UAV location optimization, sample collection, DNN offline learning and DNN online decision. The main procedure of the H2O algorithm is divided into the offline training phase and the online optimization phase.</p>
        <p>The offline training phase is carried out in the remote cloud server with high computational and storage capabilities. We regard the optimization problem P 1 as the mapping function from the input system parameters to the output resource allocation solutions. We use a DDN to fit this mapping function. To this end, we need to find the resource allocation solution under certain system parameters. In other words, we need samples to train the DNN. To this end, we provide one algorithm to solve Problem P 1 to obtain the training samples. In specific, we first adopt the LS-FCM algorithm in Subsection-B to obtain the locations of the UAVs and GVs. We then deploy the UAVs and GVs according to the calculated locations. Then, we propose a novel U-PSO algorithm in Subsection-C to obtain the offloading selection and resource allocation solution based on the novel fuzzy membership information that can capture the small-scale channel information and the relative interference among the UEs. Finally, supervised learning algorithm is used to train the DNN that can be applied for the scenarios where the number of UEs is varying.</p>
        <p>Then, the trained DNN can be implemented for online calculation. In particular, each UE only needs to input its membership values (detailed in Subsection-C), then the DNN can output its offloading choice and computing resource allocation result. This has much lower computational complexity since it only needs to perform some simple algebraic calculations instead of solving the original optimization problem through high-complexity heuristic algorithms. In addition, during the online implementation, some results output by the DNN will be regarded as new samples and be stored in the database at the cloud. These samples will be used for offline training and to update the DNN. This is very important since it can track the variations of the real scenarios.</p>
        <p>In the following, we provide more details of each step of the H2O algorithm.</p>
        <p>Clustering algorithm is always applied to determine the locations of UAVs [15], but it cannot be directly used in our work. First, the positions of GSs are fixed, but the positions of GVs and UAVs are varying. The conventional clustering method did not consider the case when some points are fixed. Second, the iterative process of conventional FCM only considers the distances between UEs and MECs, and does not consider CQI between them. To solve these problems, we propose a novel large-scale path-loss fuzzy c-means (LS-FCM) algorithm to locate the positions of UAVs and GVs, which has two advantages: First, it can fix some cluster centers denoted as GS positions and not allow them to participate in the iteration process. Second, it introduces the large-scale pathloss component to replace distance in clustering process.</p>
        <p>FCM clustering is a data clustering method in which each data point belongs to a fuzzy cluster, with a degree specified by a membership grade. FCM partitions a collection of n data point z i into fuzzy clusters. In our study, z i is the i-th data point which denotes the position (x i , y i ) of the i-th UE.</p>
        <p>Specifically, the objective function of LS-FCM is expressed in the following:</p>
        <p>where</p>
        <p>ij denotes the large-scale path-loss component, µ ij denotes the fuzzy relationship between the ith UE and the j-th MEC. Here, C j is denoted as the j-th cluster center which denotes the position of the j-th H-MEC (including UAVs, GVs and GSs). τ (τ &gt; 1) is a scalar termed as the weighting exponent that controls the fuzziness of the resulting clusters. To minimize the criterion G, the centroid C j is updated according to Eq. ( 21), and µ ij is updated according to Eq. ( 22), respectively,</p>
        <p>and</p>
        <p>where c is the number of clusters. µ ij and C j are calculated iteratively through these two equations until the FCM algorithm converges. Based on the solutions of C = [C j ], we can decide the locations of UAVs and GVs. The reason why we use FCM to locate the position of UAVs and GVs is that the LS-FCM clustering algorithm aims at minimizing the total large-scale path loss of all UEs as seen in Eq. (20), which implicitly reduces the system energy shown in the objective function of Problem (19).</p>
        <p>Finally, a hard classification is adopted by assigning each UE solely to the cluster with the highest µ ij . In the LS-FCM, since the GS positions are fixed, some cluster centers are set to the GS positions in advance and are not allowed to participate in the iteration process. According to the hard classification, the cluster centers are sorted in a descending order according to the total required computing resources of all UEs in this cluster. Then the centers of the cluster are assigned to GVs and UAVs based on their available computing resources. For example, the first center of the cluster is assigned to the H-MEC with the most computing resources, the last center of the cluster is assigned to the H-MEC with the least computing resources. Please note that this is not the final computing offloading solution. This stage just provides a rough estimation of computing resource needed by all UEs in each cluster. This LS-FCM just provides the locations for each H-MEC. Although, some UEs are in one H-MEC's cluster, these UEs may not be offloaded to this H-MEC since the smallscale fading are not considered in LS-FCM. The offloading selection and computing allocation will be studied in the next subsection.</p>
        <p>Several stopping rules can be used in LS-FCM. One is to terminate the algorithm when the maximum iteration number T F CM is reached or when the variation of objective function ∆G is less than threshold ε.</p>
        <p>The detailed description of LS-FCM algorithm is provided in Algorithm 1.</p>
        <p>Input: GS positions, UE positions, ε, c, τ , T F CM . Output: C.</p>
        <p>1: Initialize the locations of cluster centers. Calculate µ ij according to Eq. ( 22). 2: Fix some centers of C according to the GS positions.</p>
        <p>Calculate the remaining cluster centers of matrix C using Eq. ( 21).</p>
        <p>Calculate the objective function G(t) using Eq. (20).</p>
        <p>Update each µ ij using Eq. ( 22). 8: When the locations of UAV and GV are determined by the LS-FCM algorithm, we need to optimize the computing offloading decision for each UE and the corresponding allocated computing resources based on both the large-scale path-loss and small-scale channel fading information. This topic will be studied in this subsection. Heuristic algorithms are always used to solve the complex MINLP problem and obtain high-quality global solution [13]. However, heuristic algorithms also exhibit some issues: it takes more calculation time than traditional gradient descent method when you want to achieve similar accuracy and the convergence speed decreases considerably in the later period of evolution. So the heuristic algorithm is fundamentally infeasible for real-time system optimization under fast changing environment. In this paper, we propose a U-PSO, in which we use PSO algorithm to generate samples for DNN offline training and then use trained DNN to make online task admission and resource allocation decision.</p>
        <p>PSO is a heuristic computation technique that was originally proposed by Eberhart and Kennedy [24]. The standard PSO can be described as follows. Consider a swarm with P particles, each particle is a candidate solution and it moves in a bounded p-dimensional search space. The position vector and velocity vector of the i-th particle are represented as</p>
        <p>PSO explores the search space by modifying the velocity of each particle, according to two attractors: the best position found so far by the particle itself p bi , and the best position identified so far by the whole swarm p g . By integrating these two attractors, the particle behavior can be modeled by using the following equations:</p>
        <p>x id (t + 1) = x id (t) + v id (t + 1)</p>
        <p>where c cog is the cognitive factor and c soc is the social factor; rand 1 and rand 2 are generated randomly between 0 and 1; p bid (t) is the best position of the i-th particle at iteration t; p gd (t) is the best particle position among all the particles at iteration t; d=1,2,. . . ,p. w(t) is the inertia weight. Typically, the inertia weight is set according to [25]:</p>
        <p>where w max is the initial inertia weight, w min is the final inertia weight, T pso is the maximum iteration number. The energy-efficient admission of delay-sensitive tasks is a complex MINLP problem, using traditional PSO algorithm to solve this problem has three drawbacks that avoids its direct application in our considered optimization problem. Firstly, PSO algorithm often employs continuous real-valued encodings, but the admission decision matrix A is a matrix with integer elements equal to 0 or 1; Second, traditional PSO did not need to check the constraints; Third, traditional PSO initializes the particle population randomly, and it does not take advantage of the CQI information. In this regard, we propose a new U-based particle swarm optimization (U-PSO) algorithm to solve the MINLP problem efficiently.</p>
        <p>Firstly, we improve the coding of particle. In our U-PSO algorithm, the particle can be represented as:</p>
        <p>where a i = 0 means that the i-th UE decides to execute the task itself, and a i = k means that the i-th UE decides to offload the task to the k-th H-MEC, while k ∈ {1, 2,</p>
        <p>This representation transforms the decision matrix A and resource allocation matrix F to a terse coding for PSO. Then we can round x a part of the particle after each iteration.</p>
        <p>Secondly, we add a constraint check step evaluating each particle. If a particle leads to constraint violation, we will assign a large penalty ρ to the fitness value which is set to be equal to the objective function of (19).</p>
        <p>Thirdly, the final solution of the U-PSO algorithm mainly depends on the initial input of the algorithm. Improper selection of the initial point may cause the final solution to be stuck at a locally optimal point with low performance. Hence, it is critical to select a good initial point. In this paper, we use U-based roulette wheel selection strategy to provide highquality initial solution for accelerating convergence. However, to implement the U-based roulette wheel, we need to know the probability of each UE to select which H-MEC to offload. One intuitive method is to use the parameter µ ij in (22) after the LS-FCM algorithm in the above subsection. In specific, the probability of the i-th UE to select the j-th H-MEC is given by</p>
        <p>However, this selection does not capture the instantaneous small-scale channel information and interference among the UEs. To resolve this issue, we provide a novel fuzzy membership matrix based method. It applies the small-scale fading and interference information to generate dynamic membership information, so it can output a novel fuzzy membership matrix, which includes the CQI and interference information for UEs. The fuzzy membership matrix is very important in our framework. It can not only be used here for generating the initial point of the U-PSO algorithm, but also serves as the input as the DNN discussed in the next subsection.</p>
        <p>we define the novel fuzzy membership matrix U = [u ij ] including the small-scale fading and interference information, then we update the fuzzy membership matrix in the dynamically changing environment. The membership degree u ij is expressed as following:</p>
        <p>where</p>
        <p>is an enhanced version of d ij , which includes the small-scale fading component α j for the j-th MEC and the referenced interference information k∈N ,k =i P T kj α j R -2 kj , ∀j ∈ {K, M}, and γ is the trade-off factor. The fuzzy membership matrix U can reflect the changes of channel and the interferences of environment in real time.</p>
        <p>By using the updated dynamic membership information defined in Eq. ( 28), we now can obtain the probability of UE i to select H-MEC j is given by</p>
        <p>With the probability values, we can now employ the Ubased roulette wheel to initialize the initial solution. For example, suppose there are five H-MECs that UE i can choose to offload (three UAVs, one GV and one GS), in Fig. 3 the circumference of the roulette wheel is equal to one. UAV1 is the most fit individual and has the largest probability to be selected, whereas GS and GV are the least fit and have smaller intervals within the roulette wheel. To select a H-MEC, a random number is generated in the interval [0,1], and the H-MEC whose segment spans the random number is selected and UE i will offload its task to this H-MEC. This process is repeated until all UEs have selected their H-MECs. Then based on the offloading decision, the resource of each H-MEC is allocated evenly to its associated UEs. The process of U-PSO algorithm is present in Algorithm 2.</p>
        <p>The fuzzy membership matrix U which captures small-scale fading and mutual interference information plays a key role in our H2O framework. The fuzzy membership matrix U can not only guide the initialization of U-PSO, but also provide a concise representation of the relationship between UEs and H-MECs, which will be a perfect input of DNNs.</p>
        <p>Given the locations of UAVs and GVs, the Problem P 1 can be regarded as an unknown function mapping from the fuzzy membership matrix U to the optimal task admission</p>
        <p>(30) Fig. 3: Roulette wheel selection strategy.</p>
        <p>Input: H-MEC positions, UE positions, P , ρ, w max , w min , T pso . Output: p g .</p>
        <p>1: Calculate the dynamic fuzzy membership matrix U using Eq. ( 28). 2: Initialize the particle population by using the U-based roulette wheel selection strategy according to U. 3: while t &lt; T pso do 4:</p>
        <p>Calculate the fitness value of each particle using Eq. ( 19).</p>
        <p>Check the constraints and assign the penalty ρ to the particle with constraint violations.</p>
        <p>Save the global best particle p g of the swarm.</p>
        <p>Save the individual best p bi of each particle.</p>
        <p>Update the velocity of each particle using Eq. ( 23) and Eq. ( 25).</p>
        <p>Update the position of each particle using Eq. ( 24). 10:</p>
        <p>Round the x a part of each particle. 11:</p>
        <p>12: end while where a i = 0 means the i-th UE decides to execute the task itself, a i = k means the i-th UE decides to offload the task to the k-th H-MEC, while k ∈ {1, 2,</p>
        <p>Considering that DNN is a universal function approximator, we use DNN to learn the unknown function mapping. The DNN with L layers describes a mapping f (r 0 ; θ) ∈ R N0 → r L ∈ R N L of an input vector r 0 ∈ R N0 to an output vector r L ∈ R N L through L iterative processing steps:</p>
        <p>where r ∈ R N is the output of the -th layer. θ is a set of parameters of the -th layer. The -th layer is called fully- Categorical cross-entropy j p j log(r j )</p>
        <p>connected if f (r -1 ; θ ) has the form</p>
        <p>where W ∈ R N ×N -1 is the weights of the -th layer, b ∈ R N is the thresholds of the -th layer. The set of parameters for this layer is</p>
        <p>to denote the set of all parameters of the DNN. σ(•) is an activation function. Some commonly used activation functions are ReLU, tanh, sigmoid and softmax listed in TABLE II [26].</p>
        <p>In order for the DNN to learn the desired input-output mapping, it is necessary to tune the parameters θ in a supervised learning fashion. We define the loss function L(p (n) , r</p>
        <p>L ) that is used to measure the loss between the desired output p (n) and the actual output r (n) L . The goal of the training process is to tune the network parameters θ in order to minimize the average loss, defined by</p>
        <p>where N t is the number of DNN samples. Several relevant loss functions are represented in TABLE III [27]. This minimization problem can be tackled by (stochastic) gradient descent methods, i.e. iteratively updating the parameters = {W , b} according to the formulas:</p>
        <p>where β is the learning rate, and the gradients are conveniently estimated based on random subsets of the complete training set, called mini-batches and leveraging the back-propagation algorithm [26].</p>
        <p>Once the parameters W and b to be used are determined as a result of the training process, the DNN is configured and able to compute task admission and resource allocation directly. This means that once the small-scale channel information is changing, the task admission and resource allocation of UEs are updated by a simple feedforward computing of the DNN through performing some simple algebraic calculations, instead of solving Problem P 1 through high-complexity heuristic algorithms. This yields a significant complexity reduction.</p>
        <p>However, there are still two open problems in the design of DNN model for our system. First, the number of UEs accessing the network is time-varying, so the size of U is ever-changing and we cannot obtain a group of unified samples with the same dimensionality. Second, the Problem P 1 is a constrained optimization problem, but traditional DNN cannot guarantee the task constraints. With this regard, we propose a novel DNN with a scheduling layer. The main improvements of this new network are listed as follows.</p>
        <p>Firstly, to model an efficient DNN for large-scale UEs, we change function mapping F to F1:</p>
        <p>where u i = [u i1 , u i2 , ..., u ic ] represents the membership vector of the i-th UE, a i and f i represents the task admission and resource allocation value of the i-th UE, respectively. a i = 0 means the i-th UE decides to execute the task itself,</p>
        <p>. This modification has the following benefits. The input dimension of the DNN only depends on the number of H-MECs and is not related to the number of UEs. In general, the number of access points or H-MECs changes much slower than the number of UEs accessing the network. Hence, our DNN can be applied in a long time once it has been trained, which is more practical. Reducing the dimension of input data can also reduce the training complexity, which is suitable for largescale networks with large number of UEs.</p>
        <p>Secondly, in order to guarantee task constraints, we propose a novel DNN structure with a scheduling layer after DNN training. As shown in Fig. 4, this scheduling layer includes a constraint layer and a decision layer, the constraint layer is used to check whether the output a i and f i satisfy the constraints or not and each node in this layer represents a constraint check. The output of the j-th node in the constraint layer can be represented as:</p>
        <p>where g j is the j-th constraint check function. If the output layer of the DNN satisfy the constraint, the function outputs '1' to the next layer, else outputs '0' to the next layer.</p>
        <p>The node in the decision layer is labeled as Π, indicating that they play the role of a simple multiplier. If the output layer of the DNN doesn't satisfy all constraints, the final output r L+2 = 0, which means UE execute the task locally (a i = 0, f i = f L i ), else the final output of the DNN is r L+2 = r L . The decision layer can be represented as:</p>
        <p>where N c is the number of constraints. The detailed process of the DNN with the scheduling layer is shown in Algorithm 3.</p>
        <p>The online implementation of the algorithm is as follows. Once the DNN is trained by the supervised learning method. Each UE only needs to input its fuzzy membership values into the DNN, and it will output the resource allocation solution with some simple algebraic calculations, which is much faster than the high-complexity heuristic algorithms. Once one new UE is accessing the network, we need to execute the FCM algorithm to obtain the new locations of the H-MECs and then this UE calculates its fuzzy membership values based on the small-scale channel information and instantaneous interference power. Then, this UE inputs the calculated membership values into the trained DNN, and it will output the resource allocation solution. Hence, our proposed algorithm is very suitable for dynamic scenarios where the number of UEs is varying, which is more practical for implementation.</p>
        <p>In addition, the feedback mechanism is applied to H2O framework for online implementation. In practical terms, we use a differential check method to realize the feedback mechanism. When the new data is inputted to the DNN, we check the difference between the new data and the existing samples in the database, which is evaluated by the Euclidean distance. If there is a big difference between the new data and the existing samples, the new data will be fed back to the U-PSO and resolved as a new sample.</p>
        <p>Algorithm 3 DNN with a scheduling layer algorithm</p>
        <p>Training stage : 1: Randomly initialize network parameters θ. Calculate the loss function according to Eq. (33).</p>
        <p>Update of DNN according to Eq. (34). Calculate the output a i and f i of the DNN based on the trained θ according to the input u i .</p>
        <p>Check the output of DNN by the constraint layer according to Eq. (36).</p>
        <p>12:</p>
        <p>Calculate the decision output r L+2 by the decision layer according to Eq. (37).</p>
        <p>13: i = i + 1. 14: end while</p>
        <p>In this section, we use simulations to evaluate the performance of the proposed H2O algorithm. In all simulations, we use three UAVs, one GV and one GS. Other parameters used in the simulations are summarized in TABLE IV, unless otherwise specified. The parameters of the LS-FCM method are chosen as follows: τ = 2, ε = 0.0001, T F CM = 100; The parameters of the U-PSO method are chosen as follows: P = 10, ρ = 100, w max = 0.9, w min = 0.4, T P SO = 100; The parameters of the DNN method are chosen as follows: All sample vectors in the dataset are split randomly into a training set and a testing set. 80 percent of the sample vectors are assigned into the training set, while 20 percent of the sample vectors are assigned into the testing set. Then cross validation method [28] is used to evaluate the performance of DNN. In Fig. 5, we compare the performance of DNN with different number of hidden nodes in hidden layer, as the number of hidden layers varies from 1 to 8. With the increase of hidden layer number, the testing loss of DNN with 20 hidden nodes and 30 hidden nodes first decrease and then stabilize when the hidden layer number is above 6. This is because increasing hidden nodes and hidden layers can enhance the learning ability of DNN and allow the DNN to learn more information. The DNN with 30 hidden nodes of each hidden layer achieves the minimum testing loss when the hidden layer number is above 6. Notice that the testing loss of DNN with 10 hidden nodes first decrease and then increase when the hidden layer number is above 4. This is due to the concept of overfitting and the DNN cannot improve its learning ability when the hidden nodes is too less. For this reason, in the follow simulations, we set the hidden layer number equal 6, the hidden nodes number equal 30. In Fig. 6, we plot the training loss and testing loss of DNN. It is clearly seen that the testing loss declines sharply at the beginning of procedure, then decreases slowly and stabilize at around 0.07 when t is above 300. Meanwhile, the training loss gradually decreases and stabilizes at around 0.06, whose value is less than the testing loss curve. In Fig. 7, we further study the error distribution of all samples for the DNN. We see that 70% of the training errors are less than 0.025 and the maximum error is less than 0.47. The same situation applies to the error distribution of the testing samples. The simulation results demonstrate the effectiveness of the proposed DNN which can quickly converge to an optimal decision model for our offloading problem.</p>
        <p>In Fig. 8, we compare the performance of DNN trained by different samples under varying time slots. Before the evaluation, DNN has been trained with 10000 independent samples generated from different algorithms (the proposed PSO, Greedy and Random), and the error curve has converged. We see that DNN achieves optimal performance with the samples generated from the proposed PSO (PSO+DNN), and significantly outperforms the DNN with the greedy offloading samples (Greedy+DNN) and the random offloading samples (Random+DNN). This is because the performance of DNN depends on the quality of samples. The proposed PSO can solve the offloading problem by a heuristic global search and achieve a high quality global solution, which guarantee the good performance of DNN from the learning stage.</p>
        <p>We then evaluate the performance of 30 independent random scenarios for time slots prediction. We see that DNN with the samples generated from the proposed PSO can achieve the best performance under all time slots. This is because the trained DNN has good generalization performance, and can make the offloading decision continuously in fast changing environments. In Fig. 9, we compare the average energy consumption between the proposed method, PSO, Greedy, Random and Local, as the number of devices varies from 10 to 100. As shown in the Fig. 9, the average energy consumptions of all methods increase gradually while the number of devices increases. PSO method achieves the lowest average energy consumption. The proposed method provides almost the same energy consumption compared as PSO. This is because the proposed method is a DNN model trained by a set of high quality global solutions generated by PSO and construct a nonlinear mapping from UE and MEC information to offloading decision. Greedy method saves more energy than Random method. The energy consumption of Local is highest, since Local does not admit any devices. Fig. 10 shows the number of admitted devices (the devices who decide to offload the tasks) achieved by the proposed method, Greedy, Random and Local, where the number of devices range from 10 to 100. We can see that the proposed method admit the most devices for offloading. Greedy can admit more devices for offloading than Random. In contrast, Local does not admit any device. Fig. 11 shows the number of admitted devices achieved by the proposed method, Greedy, Random and Local, where T req ranges from 1s to 3s. We can see the similar results again, there may be some interesting conclusions that, for achieving the goal of minimum energy, the number of admitted devices increases as the number of devices varies from 10 to 100 or T req varies from 1s to 3s. Finally, we evaluate the computation time of the proposed algorithm. The computational complexity of all algorithms greatly depends on the number of uses. Fig. 12 compares runtime between the proposed method and PSO. We can see the proposed method is superior in terms of time efficiency. In particular, it generates an offloading action in less than 0.03 second when N equals to 100, while PSO takes 80 times longer CPU time. Overall, trained DNN achieves similar performance as PSO algorithm but requires substantially less CPU time. This makes real-time offloading and resource allocation viable for H-MEC networks in fast changing environment.</p>
        <p>V. CONCLUSION In this paper, we have proposed a hybrid deep learning based online offloading algorithm, H2O, to minimize the sum energy consumption of UEs in a H-MEC network with binary computation offloading. The framework includes three artificial intelligence algorithms: an LS-FCM method is used to locate the GVs and UAVs, a U-PSO is used to solve the MINLP problem and provide high quality samples to DNN, a DNN with a scheduling layer is applied to make the task admission and resource allocation decision in real time. Compared to conventional optimization methods, the proposed H2O algorithm completely removes the need of solving MINLP problems in the decision period of DNN. Simulation results show that H2O achieves similar nearoptimal performance as heuristic methods but reduces the CPU time by more than several orders of magnitude, making realtime system optimization feasible for the H-MEC networks in fast-changing environment.</p>
        <p>• We then introduce a fuzzy membership matrix U-based particle swarm optimization (U-PSO) algorithm, which can solve the task admission and resource allocation problem with different initial states. This procedure is repeated until enough samples are collected. PSO can solve the complex MINLP problems precisely and provide high quality labeled samples to the DNN for offline training. feasible and efficient in large-size networks with different number of UEs, which is suitable for continually dynamic scenarios. Moreover, the online new input and output of the DNN will be collected, recalculated and stored back to the sample memory database, which is very important for improving the performance of DNN in real scenarios.</p>
        <p>• We further develop an additional scheduling layer of DNN to check if the constraints are guaranteed. Also, admission control is conducted in this layer. The H2O framework is suitable for solving large-scale MINLP problem in real-time.</p>
        <p>• Local execution (Local):</p>
        <p>There is no offloading. All tasks are executed locally.</p>
        <p>• PSO offloading (PSO): the task admission is optimized by the U-PSO method.</p>
        <p>This work was supported in part by the National Natural Science Foundation of China under Grant no. 41604117, 41904127, 41874148, 61620106011, 61572389 and 61871109. This work was also supported in part by the Royal Academy of Engineering under the Distinguished Visiting Fellowship scheme (DVFS21819\9\7) and by Scientific Research Fund of Hunan Provincial Education Department in China under Grant no. 18A031 Feibo Jiang</p>
    </text>
</tei>
