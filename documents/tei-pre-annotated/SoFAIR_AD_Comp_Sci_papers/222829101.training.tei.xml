<?xml version="1.0" encoding="UTF-8"?>
<tei xmlns="http://www.tei-c.org/ns/1.0">
    <teiHeader>
        <fileDesc xml:id="_1"/>
        <encodingDesc>
            <appInfo>
                <application version="0.8.1-SNAPSHOT" ident="GROBID" when="2024-06-13T15:16+0000">
                    <ref target="https://github.com/kermitt2/grobid">A machine learning software for extracting information from scholarly documents</ref>
                </application>
            </appInfo>
        </encodingDesc>
    </teiHeader>
    <text xml:lang="en">
        <p>Proliferation of low-cost, lightweight, and power efficient sensors and advances in networked systems enable the employment of multiple sensors. Distributed estimation provides a scalable and fault-robust fusion framework with a peer-to-peer communication architecture. For this reason, there seems to be a real need for a critical review of existing and, more importantly, recent advances in the domain of distributed estimation over a low-cost sensor network. This paper presents a comprehensive review of the state-of-the-art solutions in this research area, exploring their characteristics, advantages, and challenging issues. Additionally, several open problems and future avenues of research are highlighted.Proliferation of low-cost, lightweight, and power efficient sensors and advances in networked systems enable the employment of multiple sensors. Distributed estimation provides a scalable and fault-robust fusion framework with a peer-to-peer communication architecture. For this reason, there seems to be a real need for a critical review of existing and, more importantly, recent advances in the domain of distributed estimation over a low-cost sensor network. This paper presents a comprehensive review of the state-of-the-art solutions in this research area, exploring their characteristics, advantages, and challenging issues. Additionally, several open problems and future avenues of research are highlighted.</p>
        <p>There has been an ever-increasing interest in utilising wireless sensor networks for target tracking or estimation in recent decades, driven by its versatility and diverse range of recent applications, including environmental monitoring [1], habitat monitoring [2], airborne target tracking [3], space situation awareness [4], spacecraft navigation [5], etc. The availability of low-cost sensors has enabled the employment of multiple sensor nodes to cooperatively perform large-scale sensing tasks, which are otherwise difficult to accomplish by individually operate these sensing devices. Since each individual sensor has its own inherent deficiencies, uncertainties, and limited spatial coverage, leveraging proper fusion algorithms over the sensor network could synergistically merge the redundant information and effectively complement the limitations of each sensor node, thus providing the possibility to improve the tracking and perception performance.There has been an ever-increasing interest in utilising wireless sensor networks for target tracking or estimation in recent decades, driven by its versatility and diverse range of recent applications, including environmental monitoring [1], habitat monitoring [2], airborne target tracking [3], space situation awareness [4], spacecraft navigation [5], etc. The availability of low-cost sensors has enabled the employment of multiple sensor nodes to cooperatively perform large-scale sensing tasks, which are otherwise difficult to accomplish by individually operate these sensing devices. Since each individual sensor has its own inherent deficiencies, uncertainties, and limited spatial coverage, leveraging proper fusion algorithms over the sensor network could synergistically merge the redundant information and effectively complement the limitations of each sensor node, thus providing the possibility to improve the tracking and perception performance.</p>
        <p>Multi-sensor fusion in wireless sensor networks generally refers to the process of combining sensory data, e.g., position, range, bearing angle, time of arrival, etc, from several local sensor nodes, such that the resulting perception is in some sense better than when these sensors are used individually for sensing 1 . Note that sensor fusion can be viewed as a subset of information fusion 2 , which exploits the synergism of information gathered from different sources, i.e., sensor, database, human, for better decision-making. Multi-sensor fusion can be categorised into three architectures in general: centralised, decentralised and distributed [9,10,11,12]. Examples of different fusion architectures are shown in Fig. 1. In the centralised fusion architecture, all sensors broadcast their local measurements to a fusion centre via single-hop or multi-hop communications. The fusion centre simultaneously processes the measurements provided by all sensors to update the estimate. Unlike centralised fusion, the decentralised architecture utilises several fusion centres, capable of communicating with their neighbours, as backups in data integration, thus showing less vulnerable against system failure. The sensors are allocated to these fusion centres either statically or dynamically depending on the application scenarios [13]. Although multi-sensor fusion through a fusion centre is ideally Bayesian optimal in terms of tracking performance, this architecture normally requires very reliable sensors, which are generally very expensive, and is not scalable. Furthermore, the fusion centre cannot effectively communicate with all sensors for large-scale sensor networks because of physical constraints, e.g., communication delay, limiting communication bandwidth. Each sensor node in the distributed architecture performs fusion using the information only obtained from locally connected neighbours. This could provide enhanced built-in redundancy, which can improve robustness against sensor failure, compared with the other two types of architectures. The distributed fusion architecture can also lower the communication burden since data is not required to be transmitted to the processing centre and is fused in a distributed way over multiple local nodes. Unlike centralised architecture, the information in the distributed architecture is processed at local nodes and the fusion process only requires the network to be partially connected. This could therefore provide improved flexibility. This paper mainly focuses on the distributed estimation over a low-cost sensor network. However, this does not mean the algorithms discussed in this paper are only limited to low-cost sensors. The low-cost sensors are generally battery powered with limited sensing capability, communication and computation abilities, e.g., visual camera, infrared/laser range finder, acoustic sensor, etc. Therefore, developing distributed estimation algorithms with communication, computation and energy efficiency is the key enabler for successful application of low-cost sensor networks. Although distributed fusion architecture brings many attractive features, challenges associated with the low-cost sensor networks have to be addressed. It is known that low-cost sensor networks are generally subject to certain degree of uncertainties, meaning that the data quality from such sensing hardware is mainly characterised by reduced accuracy and reliability [14,15,16,17].Multi-sensor fusion in wireless sensor networks generally refers to the process of combining sensory data, e.g., position, range, bearing angle, time of arrival, etc, from several local sensor nodes, such that the resulting perception is in some sense better than when these sensors are used individually for sensing 1 . Note that sensor fusion can be viewed as a subset of information fusion 2 , which exploits the synergism of information gathered from different sources, i.e., sensor, database, human, for better decision-making. Multi-sensor fusion can be categorised into three architectures in general: centralised, decentralised and distributed [9,10,11,12]. Examples of different fusion architectures are shown in Fig. 1. In the centralised fusion architecture, all sensors broadcast their local measurements to a fusion centre via single-hop or multi-hop communications. The fusion centre simultaneously processes the measurements provided by all sensors to update the estimate. Unlike centralised fusion, the decentralised architecture utilises several fusion centres, capable of communicating with their neighbours, as backups in data integration, thus showing less vulnerable against system failure. The sensors are allocated to these fusion centres either statically or dynamically depending on the application scenarios [13]. Although multi-sensor fusion through a fusion centre is ideally Bayesian optimal in terms of tracking performance, this architecture normally requires very reliable sensors, which are generally very expensive, and is not scalable. Furthermore, the fusion centre cannot effectively communicate with all sensors for large-scale sensor networks because of physical constraints, e.g., communication delay, limiting communication bandwidth. Each sensor node in the distributed architecture performs fusion using the information only obtained from locally connected neighbours. This could provide enhanced built-in redundancy, which can improve robustness against sensor failure, compared with the other two types of architectures. The distributed fusion architecture can also lower the communication burden since data is not required to be transmitted to the processing centre and is fused in a distributed way over multiple local nodes. Unlike centralised architecture, the information in the distributed architecture is processed at local nodes and the fusion process only requires the network to be partially connected. This could therefore provide improved flexibility. This paper mainly focuses on the distributed estimation over a low-cost sensor network. However, this does not mean the algorithms discussed in this paper are only limited to low-cost sensors. The low-cost sensors are generally battery powered with limited sensing capability, communication and computation abilities, e.g., visual camera, infrared/laser range finder, acoustic sensor, etc. Therefore, developing distributed estimation algorithms with communication, computation and energy efficiency is the key enabler for successful application of low-cost sensor networks. Although distributed fusion architecture brings many attractive features, challenges associated with the low-cost sensor networks have to be addressed. It is known that low-cost sensor networks are generally subject to certain degree of uncertainties, meaning that the data quality from such sensing hardware is mainly characterised by reduced accuracy and reliability [14,15,16,17].</p>
        <p>For this reason, the utilisation of low-cost sensor networks often encounters with several challenging issues, including miss detection, false alarm, sensor bias, limited communication bandwidth, communication delay, unreliable data links, and limited onboard energy to supply the device 3 .For this reason, the utilisation of low-cost sensor networks often encounters with several challenging issues, including miss detection, false alarm, sensor bias, limited communication bandwidth, communication delay, unreliable data links, and limited onboard energy to supply the device 3 .</p>
        <p>This paper is an endeavour to investigate the state-of-the-art solutions of distributed estimation over a low-cost sensor network, including existing approaches, recent advances, challenging aspects, and remaining problems. Notice that most distributed fusion methodologies can be roughly categorised into two main classes: (1) state vector fusion (SVF); and (2) information vector fusion (IVF). Discussions of the existing G k,i information matrix when considering false alarm g k,i information vector when considering false alarmThis paper is an endeavour to investigate the state-of-the-art solutions of distributed estimation over a low-cost sensor network, including existing approaches, recent advances, challenging aspects, and remaining problems. Notice that most distributed fusion methodologies can be roughly categorised into two main classes: (1) state vector fusion (SVF); and (2) information vector fusion (IVF). Discussions of the existing G k,i information matrix when considering false alarm g k,i information vector when considering false alarm</p>
        <p>x k ∈ R n system state vector local consistency, communication burden and specific implementation requirements. We also point out some challenging issues pertinent to distributed fusion over a low-cost sensor network, and discuss some remaining problems and future avenues of research in this area.x k ∈ R n system state vector local consistency, communication burden and specific implementation requirements. We also point out some challenging issues pertinent to distributed fusion over a low-cost sensor network, and discuss some remaining problems and future avenues of research in this area.</p>
        <p>There have been numerous contributions proposed for the design of distributed estimation algorithms for a wireless sensor network. The state-of-the-arts are broad and rich, but quite fragmented. There exist several general [18,19,20] and specific [21] literature reviews of multi-sensor fusion. However, up to the best of our knowledge, there is no critical and comprehensive review of distributed estimations using low-cost sensor networks. Also, there is no survey that addresses challenges in distributed estimations using low-cost sensor networks and the techniques required for their design and implementation. This paper aims to contribute to such an overview. We achieve this aim by surveying the noteworthy contributions to distributed estimation algorithms, which have great potentials for application in low-cost sensor networks, and discussing research gaps and emerging trends in this domain. Unlike existing reviews, we identify several inherent challenges and limitations in utilising low-cost sensor networks in distributed estimation, e.g., unreliable communication link, sensor bias and limited energy, which have not received much attention in other works. Nonetheless, as the focus of this paper is low-cost sensor network, computationally expensive distributed particle filters are excluded from the discussions.There have been numerous contributions proposed for the design of distributed estimation algorithms for a wireless sensor network. The state-of-the-arts are broad and rich, but quite fragmented. There exist several general [18,19,20] and specific [21] literature reviews of multi-sensor fusion. However, up to the best of our knowledge, there is no critical and comprehensive review of distributed estimations using low-cost sensor networks. Also, there is no survey that addresses challenges in distributed estimations using low-cost sensor networks and the techniques required for their design and implementation. This paper aims to contribute to such an overview. We achieve this aim by surveying the noteworthy contributions to distributed estimation algorithms, which have great potentials for application in low-cost sensor networks, and discussing research gaps and emerging trends in this domain. Unlike existing reviews, we identify several inherent challenges and limitations in utilising low-cost sensor networks in distributed estimation, e.g., unreliable communication link, sensor bias and limited energy, which have not received much attention in other works. Nonetheless, as the focus of this paper is low-cost sensor network, computationally expensive distributed particle filters are excluded from the discussions.</p>
        <p>The rest of the paper is organised as follows. Section 2 presents a brief introduction of the benchmark centralised fusion algorithm. Section 3 reviews several existing and more recently-proposed distributed fusion methodologies. In Sec. 4, the extensions to practical scenarios are presented, followed by some challenging aspects discussed in Sec. 5. Finally, some future directions of research and concluding remarks are offered.The rest of the paper is organised as follows. Section 2 presents a brief introduction of the benchmark centralised fusion algorithm. Section 3 reviews several existing and more recently-proposed distributed fusion methodologies. In Sec. 4, the extensions to practical scenarios are presented, followed by some challenging aspects discussed in Sec. 5. Finally, some future directions of research and concluding remarks are offered.</p>
        <p>The notations utilised in this paper are summarised in the Nomenclature table.The notations utilised in this paper are summarised in the Nomenclature table.</p>
        <p>An optimal fusion strategy and benchmark for performance evaluation of distributed state estimation algorithms is the centralised estimation, which processes all sensors' measurements simultaneously through a fusion centre. For this reason, this section will briefly review the centralised solution to facilitate the discussions carried out in the following sections. To begin with, consider a linear stochastic discrete-time system with N sensors asAn optimal fusion strategy and benchmark for performance evaluation of distributed state estimation algorithms is the centralised estimation, which processes all sensors' measurements simultaneously through a fusion centre. For this reason, this section will briefly review the centralised solution to facilitate the discussions carried out in the following sections. To begin with, consider a linear stochastic discrete-time system with N sensors as</p>
        <p>For simplicity, it is usually assumed that the measurement noise is uncorrelated across the sensor nodes. Notice that the measurement matrix H k,i becomes different for different types of sensory data 4 . The centralised estimation requires a fusion centre to collect measurements from all sensors asFor simplicity, it is usually assumed that the measurement noise is uncorrelated across the sensor nodes. Notice that the measurement matrix H k,i becomes different for different types of sensory data 4 . The centralised estimation requires a fusion centre to collect measurements from all sensors as</p>
        <p>Then, the centralised estimation of state x k can be obtained using standard Kalman filter [22,23] as Prediction:Then, the centralised estimation of state x k can be obtained using standard Kalman filter [22,23] as Prediction:</p>
        <p>It is known that the information form of Kalman filter is a suitable formula to address multi-sensor data fusion problem in a distributed manner. This information-form variant is functionally identical to the original Kalman filter, but has computational advantages for high-dimensional data. Based on the property of estimators with information form, incorporating additional information from other sensors could be achieved by summation of the corresponding information terms. This implies that the update procedure of the Bayesian optimal centralised Kalman filter can be formulated in an alternative way as [11]It is known that the information form of Kalman filter is a suitable formula to address multi-sensor data fusion problem in a distributed manner. This information-form variant is functionally identical to the original Kalman filter, but has computational advantages for high-dimensional data. Based on the property of estimators with information form, incorporating additional information from other sensors could be achieved by summation of the corresponding information terms. This implies that the update procedure of the Bayesian optimal centralised Kalman filter can be formulated in an alternative way as [11]</p>
        <p>It is clear that centralised estimation (4) requires full information of all sensors. Considering the fact that each sensor usually can only communicate with its neighbors due to communication limit, the centralised Kalman filter is generally not applicable in practical low-cost sensor networks. However, the Bayesian optimal centralised solution will be utilised as a benchmark for the performance comparison and evaluation of the distributed fusion algorithms discussed in the following sections.It is clear that centralised estimation (4) requires full information of all sensors. Considering the fact that each sensor usually can only communicate with its neighbors due to communication limit, the centralised Kalman filter is generally not applicable in practical low-cost sensor networks. However, the Bayesian optimal centralised solution will be utilised as a benchmark for the performance comparison and evaluation of the distributed fusion algorithms discussed in the following sections.</p>
        <p>Generally, most existing multi-sensor fusion algorithms can be categories into two classes: (1) SVF; andGenerally, most existing multi-sensor fusion algorithms can be categories into two classes: (1) SVF; and</p>
        <p>(2) IVF. SVF refers to direct fusion of local state estimations over a sensor network [24] while IVF refers to direct or indirect exchanges of local measurements among sensor nodes. This section will provide a detailed review and critical assessment of existing distributed estimation algorithms in terms of these two different cases.(2) IVF. SVF refers to direct fusion of local state estimations over a sensor network [24] while IVF refers to direct or indirect exchanges of local measurements among sensor nodes. This section will provide a detailed review and critical assessment of existing distributed estimation algorithms in terms of these two different cases.</p>
        <p>As there is no processing centre in the distributed fusion architecture, the fundamental problem naturally arises: how to effectively perform either SVF or IVF using only neighbours' information? Depending on how the local sensor nodes communicate with their neighbours, four representative distributed fusion strategies have been proposed in the existing literature: sequential fusion, consensus protocol, gossip process and diffusion strategy. The main characteristics of these four different fusion strategies are summarised in Table 1. Based on these facts, the reviews and discussions of both SVF and IVF will be carried out by considering these four different fusion strategies. The main criteria and performance metrics that are utilised in algorithm assessment are summarised in Table 2. Note that when we discuss about the possibility of global convergence or global optimality for a specific distributed estimation algorithm, we assume that the sensor network is strongly connected. However, this does not mean the algorithm assessed requires the network to be strongly connected in implementation.As there is no processing centre in the distributed fusion architecture, the fundamental problem naturally arises: how to effectively perform either SVF or IVF using only neighbours' information? Depending on how the local sensor nodes communicate with their neighbours, four representative distributed fusion strategies have been proposed in the existing literature: sequential fusion, consensus protocol, gossip process and diffusion strategy. The main characteristics of these four different fusion strategies are summarised in Table 1. Based on these facts, the reviews and discussions of both SVF and IVF will be carried out by considering these four different fusion strategies. The main criteria and performance metrics that are utilised in algorithm assessment are summarised in Table 2. Note that when we discuss about the possibility of global convergence or global optimality for a specific distributed estimation algorithm, we assume that the sensor network is strongly connected. However, this does not mean the algorithm assessed requires the network to be strongly connected in implementation.</p>
        <p>The algorithm is able to converge to the Bayesian-optimal centralised solution asymptotically or in finite timeThe algorithm is able to converge to the Bayesian-optimal centralised solution asymptotically or in finite time</p>
        <p>The fused estimate can preserve local consistency, i.e., the actual local covariance is always bounded by the fused covarianceThe fused estimate can preserve local consistency, i.e., the actual local covariance is always bounded by the fused covariance</p>
        <p>The fusion algorithm requires no global information, e.g., network size, node number Communication burdenThe fusion algorithm requires no global information, e.g., network size, node number Communication burden</p>
        <p>The number of communication rounds during the fusion process Specific topologyThe number of communication rounds during the fusion process Specific topology</p>
        <p>Whether or not the fusion algorithm requires specific network topologyWhether or not the fusion algorithm requires specific network topology</p>
        <p>Based on different fusion strategies, this subsection first reviews existing solutions of distributed implementation of SVF and then summarises the characteristics of different SVF algorithms.Based on different fusion strategies, this subsection first reviews existing solutions of distributed implementation of SVF and then summarises the characteristics of different SVF algorithms.</p>
        <p>Bar-Shalom and Campo [25] first suggested a SVF algorithm for two sensors by considering one local estimate as a pseudo measurement of another sensor. This idea was later extended to a sensor network with N nodes in [26] by maximising the joint likelihood (MJL) function. The resultant fusion rule was given by a matrix weighted SVF [27,28]. Using the weighted least square (WLS) criterion, Li et al. [29] suggested an optimal fusion algorithm for the cases where measurement noises are arbitrarily correlated across sensor nodes, over time, and/or arbitrarily correlated with the estimates. Later in [30,31], MJL and WLS algorithms were proven to be equivalent under Gaussian assumption and also optimal in the linear unbiased minimum variance (LUMV) sense. The final fusion rule by minimising the LUMV is given byBar-Shalom and Campo [25] first suggested a SVF algorithm for two sensors by considering one local estimate as a pseudo measurement of another sensor. This idea was later extended to a sensor network with N nodes in [26] by maximising the joint likelihood (MJL) function. The resultant fusion rule was given by a matrix weighted SVF [27,28]. Using the weighted least square (WLS) criterion, Li et al. [29] suggested an optimal fusion algorithm for the cases where measurement noises are arbitrarily correlated across sensor nodes, over time, and/or arbitrarily correlated with the estimates. Later in [30,31], MJL and WLS algorithms were proven to be equivalent under Gaussian assumption and also optimal in the linear unbiased minimum variance (LUMV) sense. The final fusion rule by minimising the LUMV is given by</p>
        <p>where the optimal weighting matrices A i are determined bywhere the optimal weighting matrices A i are determined by</p>
        <p>-1 e T Σ -1 with the (i, j)th element of matrix Σ ∈ R nN ×nN being the cross covariance P k|k,ij .-1 e T Σ -1 with the (i, j)th element of matrix Σ ∈ R nN ×nN being the cross covariance P k|k,ij .</p>
        <p>Although algorithms [26,27,28,30,31] are locally optimal, it can be noted that the implementation requires the computation of cross covariance P k|k,ij among sensor nodes, which is clearly computationally expensive. To reduce the complexity, diagonal matrix and scalar weighted fusion rules were proposed in [32,33]. The performance comparison of these algorithms was theoretically analysed in [34]. Even though algorithms [25,26,27,28,30,31,32,33] are only designed for locally connected sensor nodes in a decentralised fashion, global performance can be somehow ensured via the sequential fusion implementation in a similar way as [35] provided that the network is sequentially connected, e.g., ring/chain communication topology.Although algorithms [26,27,28,30,31] are locally optimal, it can be noted that the implementation requires the computation of cross covariance P k|k,ij among sensor nodes, which is clearly computationally expensive. To reduce the complexity, diagonal matrix and scalar weighted fusion rules were proposed in [32,33]. The performance comparison of these algorithms was theoretically analysed in [34]. Even though algorithms [25,26,27,28,30,31,32,33] are only designed for locally connected sensor nodes in a decentralised fashion, global performance can be somehow ensured via the sequential fusion implementation in a similar way as [35] provided that the network is sequentially connected, e.g., ring/chain communication topology.</p>
        <p>Otherwise, sequential fusion for global estimation is not applicable and therefore this fusion strategy cannot be viewed as a fully distributed approach.Otherwise, sequential fusion for global estimation is not applicable and therefore this fusion strategy cannot be viewed as a fully distributed approach.</p>
        <p>With the development of network theory, the control-theoretic consensus algorithm [36,37,38,39,40,41] was found to be a powerful tool in designing distributed estimation filters that guarantee global convergence. This can be attributed to the fact that this algorithm enables performing network-wide computation tasks, such as averaging of quantities and functions. Olfati-Saber [42] suggested a distributed algorithm, termed as Kalman consensus filter (KCF), by performing average consensus on local estimates. This work seems to be the pioneer work in the domain of globally distributed estimation over a sensor network. The stability and performance bounds were theoretically analysed later in [43]. The fused estimate at the lth consensus iteration step is given asWith the development of network theory, the control-theoretic consensus algorithm [36,37,38,39,40,41] was found to be a powerful tool in designing distributed estimation filters that guarantee global convergence. This can be attributed to the fact that this algorithm enables performing network-wide computation tasks, such as averaging of quantities and functions. Olfati-Saber [42] suggested a distributed algorithm, termed as Kalman consensus filter (KCF), by performing average consensus on local estimates. This work seems to be the pioneer work in the domain of globally distributed estimation over a sensor network. The stability and performance bounds were theoretically analysed later in [43]. The fused estimate at the lth consensus iteration step is given as</p>
        <p>where the consensus gain π k,ij &gt; 0 is normally chosen based on the degree of the network graph [44].where the consensus gain π k,ij &gt; 0 is normally chosen based on the degree of the network graph [44].</p>
        <p>Maximum-degree weights and metropolis weights are two widely-used suboptimal consensus gains to achieve average consensus [45]. As the consensus gain poses great effect on the overall estimation performance, the work in [46] studied how to jointly optimise the consensus gain π k,ij and Kalman gain K k,i for KCF by minimising the trace of the estimation error covariance.Maximum-degree weights and metropolis weights are two widely-used suboptimal consensus gains to achieve average consensus [45]. As the consensus gain poses great effect on the overall estimation performance, the work in [46] studied how to jointly optimise the consensus gain π k,ij and Kalman gain K k,i for KCF by minimising the trace of the estimation error covariance.</p>
        <p>The limitation of KCF lies in that it weights all local neighbours' prior states equally and thus the performance degrades drastically when some sensors cannot detect the target due to limited field-of-view.The limitation of KCF lies in that it weights all local neighbours' prior states equally and thus the performance degrades drastically when some sensors cannot detect the target due to limited field-of-view.</p>
        <p>For better illustration, let us consider a two-sensor fusion application example. Assuming that the first sensor can detect the target while the second sensor miss the target, then x k|k,1 should be closer to the true target state x k and x k|k,2 inevitably has much higher uncertainty due to target loss. Simply averaging between x k|k,1 and x k|k,2 using KCF definitely cannot improve the estimation performance and might cause erroneous estimation results if one sensor has long-term target loss. The limited sensing range, together with sparse communication network topologies, will have a profound effect on the transient behaviour of KCF and even result in divergent estimation. To mitigate this issue, the authors of [47] proposed a generalised KCF (GKCF) via weighting neighbours' prior states by their corresponding prior covariance matrices. Although GKCF outperforms KCF in terms of estimation accuracy, it cannot guarantee global optimality, i.e., its accuracy does not converge to that of the centralised filter (4) even with infinite number of consensus iterations. The reason is that GKCF never utilises the useful local posterior covariance information in sensor fusion. Many due to this fact, both KCF and GKCF are suboptimal. However, it is worth pointing out that the major merit of consensus-based distributed estimators is that they guarantee global performance convergence because the detectability/observability of a linear plant via a sensor network can be ensured through interconnections [48].For better illustration, let us consider a two-sensor fusion application example. Assuming that the first sensor can detect the target while the second sensor miss the target, then x k|k,1 should be closer to the true target state x k and x k|k,2 inevitably has much higher uncertainty due to target loss. Simply averaging between x k|k,1 and x k|k,2 using KCF definitely cannot improve the estimation performance and might cause erroneous estimation results if one sensor has long-term target loss. The limited sensing range, together with sparse communication network topologies, will have a profound effect on the transient behaviour of KCF and even result in divergent estimation. To mitigate this issue, the authors of [47] proposed a generalised KCF (GKCF) via weighting neighbours' prior states by their corresponding prior covariance matrices. Although GKCF outperforms KCF in terms of estimation accuracy, it cannot guarantee global optimality, i.e., its accuracy does not converge to that of the centralised filter (4) even with infinite number of consensus iterations. The reason is that GKCF never utilises the useful local posterior covariance information in sensor fusion. Many due to this fact, both KCF and GKCF are suboptimal. However, it is worth pointing out that the major merit of consensus-based distributed estimators is that they guarantee global performance convergence because the detectability/observability of a linear plant via a sensor network can be ensured through interconnections [48].</p>
        <p>Instead of average consensus, Ma et al. [49] developed a gossip distributed Kalman filter (GDKF) by performing randomised gossip process to local state estimate. At every round of gossip iteration, each sensor using GDKF randomly selects a locally-connected neighbour node and performs averaging on these two local state estimations. The main positive feature of GDKF is that it has relatively low communication burden since each sensor only needs to communicate with one connected sensor node during one gossip iteration. Compared to GDKF, a sensor node running KCF receives information from all its locally-connected neighbours and hence generates better estimation performance in terms of accuracy at the price of high communication cost. Notice that both KCF and GKCF only utilise local state estimates in the fusion process. This means that GDKF also cannot recover the performance of centralised estimation even with infinite number of gossip iterations. Another benefit of utilising gossip process in distributed estimation is that gossip-based algorithms are applicable to asynchronous fusion. However, gossip-based estimators under asynchronous condition show much slower convergence speed than the synchronous mode [50].Instead of average consensus, Ma et al. [49] developed a gossip distributed Kalman filter (GDKF) by performing randomised gossip process to local state estimate. At every round of gossip iteration, each sensor using GDKF randomly selects a locally-connected neighbour node and performs averaging on these two local state estimations. The main positive feature of GDKF is that it has relatively low communication burden since each sensor only needs to communicate with one connected sensor node during one gossip iteration. Compared to GDKF, a sensor node running KCF receives information from all its locally-connected neighbours and hence generates better estimation performance in terms of accuracy at the price of high communication cost. Notice that both KCF and GKCF only utilise local state estimates in the fusion process. This means that GDKF also cannot recover the performance of centralised estimation even with infinite number of gossip iterations. Another benefit of utilising gossip process in distributed estimation is that gossip-based algorithms are applicable to asynchronous fusion. However, gossip-based estimators under asynchronous condition show much slower convergence speed than the synchronous mode [50].</p>
        <p>Except for consensus and gossip algorithms, diffusion strategy [51,52,53,54,55] was found to be another popular way for the design of distributed estimation algorithms. The authors of [56] first suggested a distributed Kalman filter for a sensor network using diffusion strategy. Unlike KCF and GKCF, the diffusion Kalman filter (DKF) utilised a single-step convex combination of the estimates of local neighbours asExcept for consensus and gossip algorithms, diffusion strategy [51,52,53,54,55] was found to be another popular way for the design of distributed estimation algorithms. The authors of [56] first suggested a distributed Kalman filter for a sensor network using diffusion strategy. Unlike KCF and GKCF, the diffusion Kalman filter (DKF) utilised a single-step convex combination of the estimates of local neighbours as</p>
        <p>It follows from Eq. ( 7) that the fused estimate at every sensor node provided by the diffusion strategy is a linear combination of the estimates available within the connected neighbours. This observation reveals that the scalar weights c k,ij pose significant impact on the fusion performance. For this reason, the authors of [57] discussed the optimal choice of the combination weights and formulated a constrained optimisation problem for this purpose. As the optimal solution requires the knowledge of full observation model at every sensor node, a gradient-descent-based solution was proposed to find the suboptimal weights. By using the optimised weights, an adaptive DKF (ADKF) was proposed for real-time implementation. Except for the optimisation-based approach [57], the combination weights c k,ij of the diffusion step can also be selected by using covariance intersection (CI) approach [58]. The theoretical performance analysis in [56] revealed that DKF guarantees unbiased and bounded estimation if the system is locally observable. To relax this assumption, Hu et al. [58] developed a new version of DKF by integrating consensus approach with diffusion strategy (CDKF). But still there is no guarantee that the performance of this filter will converge to the benchmark centralised filter. Instead of exchanging all intermediate estimated state vectors, the partial DKF (PDKF) proposed in [59] only requires sharing a subset of local estimations, thus showing advantages in low communication loads.It follows from Eq. ( 7) that the fused estimate at every sensor node provided by the diffusion strategy is a linear combination of the estimates available within the connected neighbours. This observation reveals that the scalar weights c k,ij pose significant impact on the fusion performance. For this reason, the authors of [57] discussed the optimal choice of the combination weights and formulated a constrained optimisation problem for this purpose. As the optimal solution requires the knowledge of full observation model at every sensor node, a gradient-descent-based solution was proposed to find the suboptimal weights. By using the optimised weights, an adaptive DKF (ADKF) was proposed for real-time implementation. Except for the optimisation-based approach [57], the combination weights c k,ij of the diffusion step can also be selected by using covariance intersection (CI) approach [58]. The theoretical performance analysis in [56] revealed that DKF guarantees unbiased and bounded estimation if the system is locally observable. To relax this assumption, Hu et al. [58] developed a new version of DKF by integrating consensus approach with diffusion strategy (CDKF). But still there is no guarantee that the performance of this filter will converge to the benchmark centralised filter. Instead of exchanging all intermediate estimated state vectors, the partial DKF (PDKF) proposed in [59] only requires sharing a subset of local estimations, thus showing advantages in low communication loads.</p>
        <p>The main characteristics of the aforementioned distributed SVF estimators are summarised in Table 3.The main characteristics of the aforementioned distributed SVF estimators are summarised in Table 3.</p>
        <p>As can be noted from this table, the major drawback of SVF algorithms is that they cannot ensure theoretical convergence to the optimal centralised solution. Although the one-iteration-only diffusion-based methods [56,57,58,59] have great potentials in fully distributed estimation and reduction of communication burden, consensus/gossip based distributed SVF estimators usually provide better performance in terms of tracking accuracy, if multiple rounds of communications are allowed in the applications. For practical situations where the target cannot be observed by some local sensor nodes due to limited sensing range, both KCF [42,43,46] and GDKF [47] show performance degradation as they cannot preserve the local consistency.As can be noted from this table, the major drawback of SVF algorithms is that they cannot ensure theoretical convergence to the optimal centralised solution. Although the one-iteration-only diffusion-based methods [56,57,58,59] have great potentials in fully distributed estimation and reduction of communication burden, consensus/gossip based distributed SVF estimators usually provide better performance in terms of tracking accuracy, if multiple rounds of communications are allowed in the applications. For practical situations where the target cannot be observed by some local sensor nodes due to limited sensing range, both KCF [42,43,46] and GDKF [47] show performance degradation as they cannot preserve the local consistency.</p>
        <p>Although GKCF [47] is capable of improving the tracking performance for such scenarios, it requires the network topology to select the consensus gain.Although GKCF [47] is capable of improving the tracking performance for such scenarios, it requires the network topology to select the consensus gain.</p>
        <p>From Table 3, we can also note that the sequential fusion strategy requires specific topology, i.e., the network needs to be sequentially connected, e.g., chain, ring, and therefore this method is not applicable when the topology condition is not satisfied. Another drawback of sequential fusion is that it usually requires each sensor's field-of-view to cover the entire surveillance region; otherwise, the actual fusion cannot improve the overall tracking performance. Compared with sequential fusion, the other three fusion strategies are more flexible and hence they are more preferred in real applications.From Table 3, we can also note that the sequential fusion strategy requires specific topology, i.e., the network needs to be sequentially connected, e.g., chain, ring, and therefore this method is not applicable when the topology condition is not satisfied. Another drawback of sequential fusion is that it usually requires each sensor's field-of-view to cover the entire surveillance region; otherwise, the actual fusion cannot improve the overall tracking performance. Compared with sequential fusion, the other three fusion strategies are more flexible and hence they are more preferred in real applications.</p>
        <p>with its covariance Rk,i beingwith its covariance Rk,i being</p>
        <p>Similar to SVF, the MVF can also be implemented in a sequential way. The performance analysis, shown in [61], reveals that direct MVF [60] shows performance improvement in terms of error covariance reduction, compared to standard SVF [25]. Another extension of MVF to multiple sensors was reported in [62]. This algorithm was developed by converting the measurement set to a proxy and homologous measurement via simple moment matching. As stated in [63], the moment-preserving approximation, which simply merges all Gaussian mixtures, is accurate enough provided that the distance between Gaussian terms is far enough.Similar to SVF, the MVF can also be implemented in a sequential way. The performance analysis, shown in [61], reveals that direct MVF [60] shows performance improvement in terms of error covariance reduction, compared to standard SVF [25]. Another extension of MVF to multiple sensors was reported in [62]. This algorithm was developed by converting the measurement set to a proxy and homologous measurement via simple moment matching. As stated in [63], the moment-preserving approximation, which simply merges all Gaussian mixtures, is accurate enough provided that the distance between Gaussian terms is far enough.</p>
        <p>If two local measurements are not well-spaced, the resulting Gaussian mixture exhibits multi-modality and thus this approximation may destroy valuable information.If two local measurements are not well-spaced, the resulting Gaussian mixture exhibits multi-modality and thus this approximation may destroy valuable information.</p>
        <p>Apart from MVF, the well-established CI rule [64,65,66,67] provides another alternative way to perform IVF in a distributed way. The fused estimate xk|k,i and its corresponding covariance Pk|k,i obtained from the CI rule for two sensors is given byApart from MVF, the well-established CI rule [64,65,66,67] provides another alternative way to perform IVF in a distributed way. The fused estimate xk|k,i and its corresponding covariance Pk|k,i obtained from the CI rule for two sensors is given by</p>
        <p>where the weight ω is normally optimised by minimising the trace of the fused covariance Pk|k,i . This optimisation problem can be easily solved by using some numerical methods, e.g., golden section method.where the weight ω is normally optimised by minimising the trace of the fused covariance Pk|k,i . This optimisation problem can be easily solved by using some numerical methods, e.g., golden section method.</p>
        <p>The basic idea behind CI is the geometric interpretation of estimation error covariance. CI encloses the intersection region between two local error covariances if the two local estimates have overlapped covariance ellipsoid. The utilisation of CI ensures consistency of the fused estimates even when the correlation between the two local estimates is unknown. The work in [35] studied a distributed estimation filter for a sensor network by repeatedly applying the CI rule to every two sensors in a sequential way. Theoretical performance analysis reveals that the accuracy of sequential CI fusion is lower than that of ideal batch CI fusion. The problem associated with the CI fusion algorithms is that they are pessimistic since the ellipse of fused estimate is larger than it needs to be. Ellipsoid CI (ECI) [68] and inverse CI (ICI) [69] are two improvements over the original CI. Both ECI and ICI provide increased confidence level, i.e., smaller ellipsoid region, compared to the CI, and they can also be applied for multi-sensor fusion in a sequential fusion.The basic idea behind CI is the geometric interpretation of estimation error covariance. CI encloses the intersection region between two local error covariances if the two local estimates have overlapped covariance ellipsoid. The utilisation of CI ensures consistency of the fused estimates even when the correlation between the two local estimates is unknown. The work in [35] studied a distributed estimation filter for a sensor network by repeatedly applying the CI rule to every two sensors in a sequential way. Theoretical performance analysis reveals that the accuracy of sequential CI fusion is lower than that of ideal batch CI fusion. The problem associated with the CI fusion algorithms is that they are pessimistic since the ellipse of fused estimate is larger than it needs to be. Ellipsoid CI (ECI) [68] and inverse CI (ICI) [69] are two improvements over the original CI. Both ECI and ICI provide increased confidence level, i.e., smaller ellipsoid region, compared to the CI, and they can also be applied for multi-sensor fusion in a sequential fusion.</p>
        <p>Similar to KCF, average consensus algorithm can also be exploited to implement MVF [70,71,72]. The resultant fusion structure, termed as consensus-based MVF Kalman filter (CMVFKF), aims to achieve average consensus on the innovation term of Kalman filter. In order to guarantee global convergence to the centralised estimation, Olfati-Saber [73] utilised the concept of consensus on measurement in Kalman filter (CMKF). The idea of CMKF is to compute the information termsSimilar to KCF, average consensus algorithm can also be exploited to implement MVF [70,71,72]. The resultant fusion structure, termed as consensus-based MVF Kalman filter (CMVFKF), aims to achieve average consensus on the innovation term of Kalman filter. In order to guarantee global convergence to the centralised estimation, Olfati-Saber [73] utilised the concept of consensus on measurement in Kalman filter (CMKF). The idea of CMKF is to compute the information terms</p>
        <p>a distributed manner through average consensus protocol A (•) to match with the centralised Kalman filter. By exchanging the local information vectora distributed manner through average consensus protocol A (•) to match with the centralised Kalman filter. By exchanging the local information vector</p>
        <p>, the update rule of CMKF is given by, the update rule of CMKF is given by</p>
        <p>The convergence and stability of CMKF was analysed in [74]. A new rule of selecting the fusion weights for CMKF was studied in [75] by minimising the lower detectability Gramian bound. The advantage of CMKF is that it is asymptotically optimal at each time instant provided that the priors are converged.The convergence and stability of CMKF was analysed in [74]. A new rule of selecting the fusion weights for CMKF was studied in [75] by minimising the lower detectability Gramian bound. The advantage of CMKF is that it is asymptotically optimal at each time instant provided that the priors are converged.</p>
        <p>However, since only finite number of consensus iterations is tractable in practice, convergence will not be fully achieved. Therefore, all local estimates are auto-correlated during the fusion phase and thus CMKF suffers from the well-known auto-correlation problem. As CMKF never exploits the prior information in fusion, it constrains the posterior estimates as the prior estimates if the sensor and its neighbors cannot detect the target within allowable number of consensus iterations due to limited field-of-view. Also note from Eq. ( 10) that CMKF weights the local prior estimate using its own prior covariance matrix, which means it cannot preserve the consistency of local estimates since the observability condition of local sensor can only be ensured with enough number of iterations. Apparently, this issue becomes more severe for sparse networks. Therefore, the performance of CMKF with small number of consensus iterations will degrade significantly.However, since only finite number of consensus iterations is tractable in practice, convergence will not be fully achieved. Therefore, all local estimates are auto-correlated during the fusion phase and thus CMKF suffers from the well-known auto-correlation problem. As CMKF never exploits the prior information in fusion, it constrains the posterior estimates as the prior estimates if the sensor and its neighbors cannot detect the target within allowable number of consensus iterations due to limited field-of-view. Also note from Eq. ( 10) that CMKF weights the local prior estimate using its own prior covariance matrix, which means it cannot preserve the consistency of local estimates since the observability condition of local sensor can only be ensured with enough number of iterations. Apparently, this issue becomes more severe for sparse networks. Therefore, the performance of CMKF with small number of consensus iterations will degrade significantly.</p>
        <p>To solve the associated problems of CMKF, the authors of [76,77] presented a distributed CI Kalman filter (CIKF) based on the concept of generalised CI [78] asTo solve the associated problems of CMKF, the authors of [76,77] presented a distributed CI Kalman filter (CIKF) based on the concept of generalised CI [78] as</p>
        <p>For CIKF with single-step consensus, He et al. [79] proposed an optimal fusion weight design algorithm using convex optimisation to minimise the fusion uncertainty. The CIKF was proven to generate unbiased local estimates and to be equivalent to perform consensus on the Kullback-Leibler average of local probability density functions in [80]. Due to the nature of the CI fusion rule, CI-based distributed estimators ensure the consistency of local estimate and hence generally shows better performance than CMKF when the number of consensus iterations is limited. But, unfortunately, CIKF is not globally optimal as it underweights the information related termsFor CIKF with single-step consensus, He et al. [79] proposed an optimal fusion weight design algorithm using convex optimisation to minimise the fusion uncertainty. The CIKF was proven to generate unbiased local estimates and to be equivalent to perform consensus on the Kullback-Leibler average of local probability density functions in [80]. Due to the nature of the CI fusion rule, CI-based distributed estimators ensure the consistency of local estimate and hence generally shows better performance than CMKF when the number of consensus iterations is limited. But, unfortunately, CIKF is not globally optimal as it underweights the information related terms</p>
        <p>. This will generate the so-called local redundancy issue. Although ECI and ICI have great potentials to reduce the conservativeness of CI, these two fusion rules currently can only be implemented in a sequential way for multiple sensors.. This will generate the so-called local redundancy issue. Although ECI and ICI have great potentials to reduce the conservativeness of CI, these two fusion rules currently can only be implemented in a sequential way for multiple sensors.</p>
        <p>Comparing CMKF and CIKF, we can observe that these two algorithms have complementary properties: CMKF is asymptotically optimal but its performance degrades significantly when the number of consensus iterations is small; CIKF is beneficial for ensuring the consistency of fused estimates but cannot recover the performance of centralised estimator. Motivated by these observations, the authors of [81,82] proposed a new distributed estimation algorithm, termed as information consensus filter (ICF). The fusion rule of this filter is given byComparing CMKF and CIKF, we can observe that these two algorithms have complementary properties: CMKF is asymptotically optimal but its performance degrades significantly when the number of consensus iterations is small; CIKF is beneficial for ensuring the consistency of fused estimates but cannot recover the performance of centralised estimator. Motivated by these observations, the authors of [81,82] proposed a new distributed estimation algorithm, termed as information consensus filter (ICF). The fusion rule of this filter is given by</p>
        <p>The ICF algorithm is able to converge asymptotically to the centralised filter (4) with a strongly connected undirected network topology. However, it requires some global information, e.g., degree of the sensor network and network size, in implementation. To partially relax this assumption, Yao et al. [83] suggested an average ICF (AICF), which, however, essentially coincides with the original CIKF [76,77]. A generalised consensus fusion framework that encompasses CMKF, CIKF and ICF was presented in [84] via a parallel CM and CI (P-CMCI) asThe ICF algorithm is able to converge asymptotically to the centralised filter (4) with a strongly connected undirected network topology. However, it requires some global information, e.g., degree of the sensor network and network size, in implementation. To partially relax this assumption, Yao et al. [83] suggested an average ICF (AICF), which, however, essentially coincides with the original CIKF [76,77]. A generalised consensus fusion framework that encompasses CMKF, CIKF and ICF was presented in [84] via a parallel CM and CI (P-CMCI) as</p>
        <p>where the normalisation factor ω k,i &gt; 0 is a design parameter to tune the filter performance. Similar to ICF, P-CMCI handles the redundancy of the priors and thus has possibility of global convergence to the centralised solution by setting the normalisation factor as the network size, i.e., ω k,i = N , but requires double communication cost due to the inherent parallel consensus process. The main promising feature of P-CMCI filter is that it has been proved to be able to guarantee stability for any choice of the normalisation weights ω k,i and for any number of consensus steps.where the normalisation factor ω k,i &gt; 0 is a design parameter to tune the filter performance. Similar to ICF, P-CMCI handles the redundancy of the priors and thus has possibility of global convergence to the centralised solution by setting the normalisation factor as the network size, i.e., ω k,i = N , but requires double communication cost due to the inherent parallel consensus process. The main promising feature of P-CMCI filter is that it has been proved to be able to guarantee stability for any choice of the normalisation weights ω k,i and for any number of consensus steps.</p>
        <p>Note that most consensus-based distributed estimators require sufficient number of iterations to guarantee the convergence, which normally has high communication burdens. To mitigate this issue, several efforts have been made to improve the convergence speed for consensus-based distributed estimation. Instead of using average consensus, Petitti [85] developed a Consensus-based Distributed Target Tracking (CDTT) algorithm based on a max-consensus protocol. All sensor nodes make agreement on the best local estimate by finding the maximum perception confidence value 1/Trace P k|k,i of all local estimates. The main advantage of this algorithm is that it permits finite-time convergence of the consensus iterations provided that the number of consensus iterations is at least the diameter of the network (in hops). However, the max consensus protocol only performs a node selection process, instead of fusion, and thus cannot reduce the estimation uncertainty. As opposed to asymptotic convergence, a finite-time convergence CMKF (FT-CMKF) was proposed for a sensor network in [86]. This algorithm, however, is only applicable to acyclic network topology. Although max consensus algorithm can be utilised to construct a spanning tree in a distributed manner [87], it is unclear whether or not the integration of these two methods will pose significant advance over the original CMKF. Another attempt to reduce the communication complexity was reported in [88,89], where the authors modified the CMKF by using a minimum-time consensus algorithm [90] and hence the resulting filter is termed as MT-CMKF. This new variant of CMKF only uses local past state estimates to form a Hankel matrix, with which all local sensor nodes achieve average consensus in a minimum number of time steps. This algorithm improves the existing finite-time consensus to a minimal time consensus. However, there is a trade-off between the communication burden, i.e., consensus iterations, and computational complexity. Instead of exchanging information among all local neighbours, KatragaddaNote that most consensus-based distributed estimators require sufficient number of iterations to guarantee the convergence, which normally has high communication burdens. To mitigate this issue, several efforts have been made to improve the convergence speed for consensus-based distributed estimation. Instead of using average consensus, Petitti [85] developed a Consensus-based Distributed Target Tracking (CDTT) algorithm based on a max-consensus protocol. All sensor nodes make agreement on the best local estimate by finding the maximum perception confidence value 1/Trace P k|k,i of all local estimates. The main advantage of this algorithm is that it permits finite-time convergence of the consensus iterations provided that the number of consensus iterations is at least the diameter of the network (in hops). However, the max consensus protocol only performs a node selection process, instead of fusion, and thus cannot reduce the estimation uncertainty. As opposed to asymptotic convergence, a finite-time convergence CMKF (FT-CMKF) was proposed for a sensor network in [86]. This algorithm, however, is only applicable to acyclic network topology. Although max consensus algorithm can be utilised to construct a spanning tree in a distributed manner [87], it is unclear whether or not the integration of these two methods will pose significant advance over the original CMKF. Another attempt to reduce the communication complexity was reported in [88,89], where the authors modified the CMKF by using a minimum-time consensus algorithm [90] and hence the resulting filter is termed as MT-CMKF. This new variant of CMKF only uses local past state estimates to form a Hankel matrix, with which all local sensor nodes achieve average consensus in a minimum number of time steps. This algorithm improves the existing finite-time consensus to a minimal time consensus. However, there is a trade-off between the communication burden, i.e., consensus iterations, and computational complexity. Instead of exchanging information among all local neighbours, Katragadda</p>
        <p>and Cavallaro [91] suggested a N -consensus Kalman filter (NCKF). The idea behind is that only neighbours within N -hops are selected in information fusion to reduce the communication burden.and Cavallaro [91] suggested a N -consensus Kalman filter (NCKF). The idea behind is that only neighbours within N -hops are selected in information fusion to reduce the communication burden.</p>
        <p>Distributed implementation of IVF has also been investigated from the perspective of gossip process in recent years. The authors of [92] developed a linear distributed estimator, which is called as gossip interactive Kalman filter (GIKF). The fundamental difference between GIKF and other consensus-based distributed Kalman filters is that GIKF runs the consensus and observation updates at the same time scale. At a random time instant, a local sensor node i randomly selects a neighbour ī ∈ N i to swap their prior estimates and the corresponding error covariances for measurement update asDistributed implementation of IVF has also been investigated from the perspective of gossip process in recent years. The authors of [92] developed a linear distributed estimator, which is called as gossip interactive Kalman filter (GIKF). The fundamental difference between GIKF and other consensus-based distributed Kalman filters is that GIKF runs the consensus and observation updates at the same time scale. At a random time instant, a local sensor node i randomly selects a neighbour ī ∈ N i to swap their prior estimates and the corresponding error covariances for measurement update as</p>
        <p>which guarantees probabilistically global convergence. Li et al. [93] developed a modified GIKF (M-GIKF) to improve the performance of GIKF by adding one additional observation mixing step.which guarantees probabilistically global convergence. Li et al. [93] developed a modified GIKF (M-GIKF) to improve the performance of GIKF by adding one additional observation mixing step.</p>
        <p>Different from [92,93], Qin et al. [94] developed a gossip CMKF (G-CMKF) algorithm that leverages the randomised consensus in information vector fusion by replacing the average consensus in CMKF with the randomised gossip algorithm. Theoretical analysis reveals that the utilisation of randomised protocols helps to avoid the need of cumbersome communication, thus reducing the need of time to perform sensor fusion. Although the randomised gossip process is proved to guarantee average agreement among all sensor nodes with infinite number of iterations [50], the performance of G-CMKF degrades drastically due to its slow convergence, compared to the original CMKF. To address this problem, a deterministic communication strategy using greedy gossip was suggested in [95] to develop a new CMKF, termed as greedy gossip CMKF (GG-CMKF), that can improve the convergence rate of the gossip process.Different from [92,93], Qin et al. [94] developed a gossip CMKF (G-CMKF) algorithm that leverages the randomised consensus in information vector fusion by replacing the average consensus in CMKF with the randomised gossip algorithm. Theoretical analysis reveals that the utilisation of randomised protocols helps to avoid the need of cumbersome communication, thus reducing the need of time to perform sensor fusion. Although the randomised gossip process is proved to guarantee average agreement among all sensor nodes with infinite number of iterations [50], the performance of G-CMKF degrades drastically due to its slow convergence, compared to the original CMKF. To address this problem, a deterministic communication strategy using greedy gossip was suggested in [95] to develop a new CMKF, termed as greedy gossip CMKF (GG-CMKF), that can improve the convergence rate of the gossip process.</p>
        <p>In principle, randomised gossip and greedy gossip have complementary characteristics. Specifically, randomised gossip has lower computational burden but its convergence rate is relatively slow because of the randomised nature. On the other hand, greedy gossip enjoys faster convergence to the average value at expense of higher communication burden. This can be attributed to the fact that greedy gossip requires each sensor node to communicate with all its connected neighbours to find an optimal path. Motivated by these observations, the authors of [96] suggested a novel sample greedy gossip ICF (SGG-ICF) to exhibit positive features of both randomised gossip and greedy gossip. This is achieved by utilising the greedy node selection strategy among a randomly selected active sensor node set. Each node using SGG-ICF determines the communication with its neighbour nodes based on a stochastic uniform sampling procedure. Once the sampling result is larger than a certain threshold, the communication is triggered. Also, this algorithm leverages the information weighted fusion rule while the previous gossip approaches utilised the concept of measurement vector fusion. This enables the algorithm developed to preserve the consistency of local estimates unlike the previous gossip algorithms. Performance evaluation reveals that the SGG-ICF algorithm achieves comparable performance to the greedy gossip based algorithm with significantly less communication overhead.In principle, randomised gossip and greedy gossip have complementary characteristics. Specifically, randomised gossip has lower computational burden but its convergence rate is relatively slow because of the randomised nature. On the other hand, greedy gossip enjoys faster convergence to the average value at expense of higher communication burden. This can be attributed to the fact that greedy gossip requires each sensor node to communicate with all its connected neighbours to find an optimal path. Motivated by these observations, the authors of [96] suggested a novel sample greedy gossip ICF (SGG-ICF) to exhibit positive features of both randomised gossip and greedy gossip. This is achieved by utilising the greedy node selection strategy among a randomly selected active sensor node set. Each node using SGG-ICF determines the communication with its neighbour nodes based on a stochastic uniform sampling procedure. Once the sampling result is larger than a certain threshold, the communication is triggered. Also, this algorithm leverages the information weighted fusion rule while the previous gossip approaches utilised the concept of measurement vector fusion. This enables the algorithm developed to preserve the consistency of local estimates unlike the previous gossip algorithms. Performance evaluation reveals that the SGG-ICF algorithm achieves comparable performance to the greedy gossip based algorithm with significantly less communication overhead.</p>
        <p>Unlike consensus-based approaches, the diffusion strategy does not require the information on the network size and has low communication burden by using single communication step. Mainly due to this fact, the one-iteration-only diffusion strategy was also found to be widely employed in IVF.Unlike consensus-based approaches, the diffusion strategy does not require the information on the network size and has low communication burden by using single communication step. Mainly due to this fact, the one-iteration-only diffusion strategy was also found to be widely employed in IVF.</p>
        <p>In [97], the authors proposed a cost-effective DKF (CE-DKF) by applying optimal estimation (4) to local connected sensors before performing diffusion to fuse the local estimates through the network. This enables diffusion not only on the local state estimations but also their corresponding covariances, hence providing performance improvement compared to the original DKF [56]. Similar to the original DKF [56],In [97], the authors proposed a cost-effective DKF (CE-DKF) by applying optimal estimation (4) to local connected sensors before performing diffusion to fuse the local estimates through the network. This enables diffusion not only on the local state estimations but also their corresponding covariances, hence providing performance improvement compared to the original DKF [56]. Similar to the original DKF [56],</p>
        <p>Zhang et al. [98] also only leveraged diffusion in state vector fusion, but the local CI was utilised to improve the local estimation performance before the diffusion step and therefore the resulting algorithm is termed as CI-DKF. Wang et al. [99] integrated the ideas of [97], [98] to propose a new variant of CI-DKF and showed performance improvement of their new algorithm. Another improvement over [98] was reported in [100], where the authors developed a distributed hybrid information fusion (DHIF) filter. This algorithm is composed of two main steps: the first step utilises the batch CI to fuse local priors, in a similar way as [98], and the second step applies optimal fusion (4) to local sensors to update the state estimates. Note that the DHIF can be considered as a special version of P-CMCI [84] with single consensus iteration. Compared to consensus and gossip based approaches, diffusion-based algorithms normally do not require the knowledge on the network size and thus can be viewed as fully distributed algorithms. However, it should be pointed out that the asymptotic convergence property of the consensus process is lost in diffusion.Zhang et al. [98] also only leveraged diffusion in state vector fusion, but the local CI was utilised to improve the local estimation performance before the diffusion step and therefore the resulting algorithm is termed as CI-DKF. Wang et al. [99] integrated the ideas of [97], [98] to propose a new variant of CI-DKF and showed performance improvement of their new algorithm. Another improvement over [98] was reported in [100], where the authors developed a distributed hybrid information fusion (DHIF) filter. This algorithm is composed of two main steps: the first step utilises the batch CI to fuse local priors, in a similar way as [98], and the second step applies optimal fusion (4) to local sensors to update the state estimates. Note that the DHIF can be considered as a special version of P-CMCI [84] with single consensus iteration. Compared to consensus and gossip based approaches, diffusion-based algorithms normally do not require the knowledge on the network size and thus can be viewed as fully distributed algorithms. However, it should be pointed out that the asymptotic convergence property of the consensus process is lost in diffusion.</p>
        <p>The main properties of different distributed IVF estimators are summarised in Table 4. The advantages and disadvantages of the discussed distributed IVF algorithms are compared with respect to different metrics.The main properties of different distributed IVF estimators are summarised in Table 4. The advantages and disadvantages of the discussed distributed IVF algorithms are compared with respect to different metrics.</p>
        <p>As IVF directly or indirectly leverages local measurements in the fusion process, algorithms that using IVF have possibility of global convergence to the centralised solution and usually generate more accurate estimation results, compared to SVF-based algorithms. However, as infinite number of communication rounds is normally intractable in practical applications, the centralised estimation usually provides better performance than the distributed estimation algorithms in terms of tracking accuracy.As IVF directly or indirectly leverages local measurements in the fusion process, algorithms that using IVF have possibility of global convergence to the centralised solution and usually generate more accurate estimation results, compared to SVF-based algorithms. However, as infinite number of communication rounds is normally intractable in practical applications, the centralised estimation usually provides better performance than the distributed estimation algorithms in terms of tracking accuracy.</p>
        <p>It is worthy pointing out that CMKF [73] and its related variants [88,89,86,94,95] are not preferred if the communication capacity is limited as the performance of these algorithms degrades drastically with small number of consensus or gossip iterations. Since ICF-based approaches [82,83,84,96] are proved to be able to guarantee stability for any number of consensus steps, these algorithms are applicable for scenarios with limited communication resource. Similar to SVF, both consensus and gossip based distributed IVF filters have capability to provide better performance in terms of tracking accuracy at the price of higher communication cost, compared with diffusion-based IVF approaches. From these observations, we can conclude that there is a significant conflict between the fusion performance and communication requirement, as a higher estimation accuracy normally requires more communication resources, either more communication iterations or higher communication bandwidth which are usually limited for low-cost sensors.It is worthy pointing out that CMKF [73] and its related variants [88,89,86,94,95] are not preferred if the communication capacity is limited as the performance of these algorithms degrades drastically with small number of consensus or gossip iterations. Since ICF-based approaches [82,83,84,96] are proved to be able to guarantee stability for any number of consensus steps, these algorithms are applicable for scenarios with limited communication resource. Similar to SVF, both consensus and gossip based distributed IVF filters have capability to provide better performance in terms of tracking accuracy at the price of higher communication cost, compared with diffusion-based IVF approaches. From these observations, we can conclude that there is a significant conflict between the fusion performance and communication requirement, as a higher estimation accuracy normally requires more communication resources, either more communication iterations or higher communication bandwidth which are usually limited for low-cost sensors.</p>
        <p>Local consistencyLocal consistency</p>
        <p>In order to provide better insights into different distributed estimation approaches, extensive Monte-Carlo comparisons of several representative algorithms are carried out in this subsection. Since sequential fusion is not applicable to a generic sensor network topology, distributed estimation algorithms using this fusion strategy is excluded in the simulation analysis for simplicity. As for other three different fusion strategies, we pick several representative algorithms for each fusion strategy. Table 5 summarises the selected distributed estimation algorithms and their corresponding communication requirement. When implementing DKF, we utilise the well-known CI rule to choose the diffusion weights [58]. The sensor activation probability is set as 0.5 in the implementation of SGG-ICF. [42,43,46] x k|k,i [76,80] x k|k,i , P k|k,iIn order to provide better insights into different distributed estimation approaches, extensive Monte-Carlo comparisons of several representative algorithms are carried out in this subsection. Since sequential fusion is not applicable to a generic sensor network topology, distributed estimation algorithms using this fusion strategy is excluded in the simulation analysis for simplicity. As for other three different fusion strategies, we pick several representative algorithms for each fusion strategy. Table 5 summarises the selected distributed estimation algorithms and their corresponding communication requirement. When implementing DKF, we utilise the well-known CI rule to choose the diffusion weights [58]. The sensor activation probability is set as 0.5 in the implementation of SGG-ICF. [42,43,46] x k|k,i [76,80] x k|k,i , P k|k,i</p>
        <p>Random 0.5|N i | sensors from N i in average sense Diffusion DKF [56,58] x k|k,i , P k|k,iRandom 0.5|N i | sensors from N i in average sense Diffusion DKF [56,58] x k|k,i , P k|k,i</p>
        <p>* |Ni| denotes the cardinality, i.e., the number of elements, of set Ni* |Ni| denotes the cardinality, i.e., the number of elements, of set Ni</p>
        <p>All simulations in this subsection are performed in a 500m×500m rectangular monitoring area and every sensor has a limited sensing range of 100m. We carried out extensive performance evaluation and comparison based on six different types of network topologies. Considering the similar tendency in the results, this paper demonstrates the simulation results on the two representative types of network topologies: random geometric network topology with 20 sensors, and deterministic grid network topology with 16 sensors. Note that these two types of topologies are widely utilised in analysing the performance of distributed networkwide estimation algorithms [101]. For the random geometric network, each sensor is randomly placed inside the surveillance region and two sensors are connected if their relative distance is less than 300m. Examples of these two different sensor topologies are presented Fig. 2.All simulations in this subsection are performed in a 500m×500m rectangular monitoring area and every sensor has a limited sensing range of 100m. We carried out extensive performance evaluation and comparison based on six different types of network topologies. Considering the similar tendency in the results, this paper demonstrates the simulation results on the two representative types of network topologies: random geometric network topology with 20 sensors, and deterministic grid network topology with 16 sensors. Note that these two types of topologies are widely utilised in analysing the performance of distributed networkwide estimation algorithms [101]. For the random geometric network, each sensor is randomly placed inside the surveillance region and two sensors are connected if their relative distance is less than 300m. Examples of these two different sensor topologies are presented Fig. 2.</p>
        <p>Each target's state is represented by a 4-D vector, with 2-D position and 2-D velocity components. In estimation update, the system equation is assumed to be the well-known constant velocity model, e.g., with T s = 1s being the sampling time. The variance of process noise of the considered constant velocity model is determined asEach target's state is represented by a 4-D vector, with 2-D position and 2-D velocity components. In estimation update, the system equation is assumed to be the well-known constant velocity model, e.g., with T s = 1s being the sampling time. The variance of process noise of the considered constant velocity model is determined as</p>
        <p>Each sensor collects position measurements at regular time instantsEach sensor collects position measurements at regular time instants</p>
        <p>The measurement noise is subject to a Gaussian white noise asThe measurement noise is subject to a Gaussian white noise as</p>
        <p>For initialisation, the covariance matrix of the target at sensor node i is chosen as P 0|0 ,i = diag (100, 100, 10, 10). The initial state estimates are generated from a Gaussian distribution around the true target state with the covariance P 0|0 ,i . The starting point of the target is also randomly generated inside the surveillance region at every Monte-Carlo run.For initialisation, the covariance matrix of the target at sensor node i is chosen as P 0|0 ,i = diag (100, 100, 10, 10). The initial state estimates are generated from a Gaussian distribution around the true target state with the covariance P 0|0 ,i . The starting point of the target is also randomly generated inside the surveillance region at every Monte-Carlo run.</p>
        <p>For rigorous evaluation, the performance of the selected algorithms is examined against four different metrics: root mean square error (RMSE), root of the trace of error covariance (RTRC), mean standard deviation (MSTD) and running time. Let p j k|k ,i denote the estimated position of the target provided by sensor node i at time instant k of the jth Monte Carlo run and P j k|k ,i be the corresponding error covariance matrix. Define p j k represent the true target position at time instant k of the jth Monte Carlo run. The RMSE, RTRC and MSTD of position estimation averaged over T time instants and N sensors, are defined asFor rigorous evaluation, the performance of the selected algorithms is examined against four different metrics: root mean square error (RMSE), root of the trace of error covariance (RTRC), mean standard deviation (MSTD) and running time. Let p j k|k ,i denote the estimated position of the target provided by sensor node i at time instant k of the jth Monte Carlo run and P j k|k ,i be the corresponding error covariance matrix. Define p j k represent the true target position at time instant k of the jth Monte Carlo run. The RMSE, RTRC and MSTD of position estimation averaged over T time instants and N sensors, are defined as</p>
        <p>For performance evaluation of the selected algorithms, the average RMSE, RTRP and MSTD over M Monte Carlo runs are utilised. These three metrics are computed asFor performance evaluation of the selected algorithms, the average RMSE, RTRP and MSTD over M Monte Carlo runs are utilised. These three metrics are computed as</p>
        <p>Besides these three accuracy-related metrics, the average running time is also leveraged in algorithm evaluation. Note that these four different metrics can reflect the characteristics of the selected algorithms.Besides these three accuracy-related metrics, the average running time is also leveraged in algorithm evaluation. Note that these four different metrics can reflect the characteristics of the selected algorithms.</p>
        <p>The RMSE can be utilised to evaluate the tracking accuracy and global optimality. If the algorithm provides global optimality, its RMSE will asymptotically converge to that of the centralised solution. The RTRC is an indicator of local consistency and conservativeness. If the algorithm guarantees local consistency, its RMSE should be upper bounded by (and very close to) its RTRC. Also, if the RMSE is much smaller than the RTRC, the estimation provided by the algorithm is very conservative, which, in turn, will indirectly increase the tracking error. Under various different conditions, the MSTD can be leveraged as an metric to quantify the robustness of the algorithm evaluated. Finally, the running time is an reflection of the communication cost and computational complexity, which are of paramount importance to low-cost sensors.The RMSE can be utilised to evaluate the tracking accuracy and global optimality. If the algorithm provides global optimality, its RMSE will asymptotically converge to that of the centralised solution. The RTRC is an indicator of local consistency and conservativeness. If the algorithm guarantees local consistency, its RMSE should be upper bounded by (and very close to) its RTRC. Also, if the RMSE is much smaller than the RTRC, the estimation provided by the algorithm is very conservative, which, in turn, will indirectly increase the tracking error. Under various different conditions, the MSTD can be leveraged as an metric to quantify the robustness of the algorithm evaluated. Finally, the running time is an reflection of the communication cost and computational complexity, which are of paramount importance to low-cost sensors.</p>
        <p>The simulation results obtained from 2000 Monte-Carlo runs are presented in Figs. 3 and4, where Fig. 3 is for random geometric network topology and Fig. 4 is for deterministic grid network topology.The simulation results obtained from 2000 Monte-Carlo runs are presented in Figs. 3 and4, where Fig. 3 is for random geometric network topology and Fig. 4 is for deterministic grid network topology.</p>
        <p>From Figs. 3 (a) and 4 (a), it is clear that both KCF and GDKF cannot converge to the centralised Kalman filter for all tested sensor networks since these two algorithms only utilise the state estimations in the fusion process. Although KCF provides acceptable performance for random geometric network, its performance degrades drastically when applying it to the grid sensor network. This can be attributed to the fact that KCF has no strategy to deal with the naive sensor nodes. Compared to KCF, GDKF only utilises one local node's information in the fusion process and therefore generates less accurate tracking performance.From Figs. 3 (a) and 4 (a), it is clear that both KCF and GDKF cannot converge to the centralised Kalman filter for all tested sensor networks since these two algorithms only utilise the state estimations in the fusion process. Although KCF provides acceptable performance for random geometric network, its performance degrades drastically when applying it to the grid sensor network. This can be attributed to the fact that KCF has no strategy to deal with the naive sensor nodes. Compared to KCF, GDKF only utilises one local node's information in the fusion process and therefore generates less accurate tracking performance.</p>
        <p>As both KCF and GDKF never share the error covariance, their RTRCs remain almost the same regardless of the number of consensus iterations, as confirmed by Figs. estimations, which will have adverse effect on the tracking performance. However, as can be noted from KCF and GDKF are suitable for applications when sensors' computational and communication burden are very limited.As both KCF and GDKF never share the error covariance, their RTRCs remain almost the same regardless of the number of consensus iterations, as confirmed by Figs. estimations, which will have adverse effect on the tracking performance. However, as can be noted from KCF and GDKF are suitable for applications when sensors' computational and communication burden are very limited.</p>
        <p>From Figs. 3 (a) and 4 (a), it can be noted that CMKF-based algorithms, i.e., original CMKF [73], G-CMKF [94] and GG-CMKF [95], can recover the performance of the optimal centralised solution with enough number of communication iterations, but these algorithms provide relatively poor estimation performance when the number of consensus/gossip iterations is limited. The reason is that CMKF-based algorithms cannot preserve local consistency, as confirmed by comparing RMSE and RTRC in Figs. 3 and4. Interestingly, it can be noted that leveraging greedy gossip algorithm for sensor fusion, e.g., GG-CMKF, can significantly improve the performance of CMKF with small number of communication iterations. This can be attributed to the fact that the greedy gossip algorithm finds the best neighbour of each sensor node for information exchange and therefore can partially avoid the drawback of CMKF. However, this greedy node selection strategy significantly increases the execution time, as confirmed by Figs. 3 (d) and 4 (d).From Figs. 3 (a) and 4 (a), it can be noted that CMKF-based algorithms, i.e., original CMKF [73], G-CMKF [94] and GG-CMKF [95], can recover the performance of the optimal centralised solution with enough number of communication iterations, but these algorithms provide relatively poor estimation performance when the number of consensus/gossip iterations is limited. The reason is that CMKF-based algorithms cannot preserve local consistency, as confirmed by comparing RMSE and RTRC in Figs. 3 and4. Interestingly, it can be noted that leveraging greedy gossip algorithm for sensor fusion, e.g., GG-CMKF, can significantly improve the performance of CMKF with small number of communication iterations. This can be attributed to the fact that the greedy gossip algorithm finds the best neighbour of each sensor node for information exchange and therefore can partially avoid the drawback of CMKF. However, this greedy node selection strategy significantly increases the execution time, as confirmed by Figs. 3 (d) and 4 (d).</p>
        <p>Compared to CMKF, CIKF [80] shows strong robustness against the variation of the number of communication iterations. However, CIKF generates less accurate tracking performance for both network topologies with enough communication resources. Among all the tested algorithms, ICF [82], P-CMCI [84] and SGG-ICF [96], provide more accurate performance in all tested scenarios. The reason of this fact is clear: these algorithms exploit the benefits of both CMKF and CIKF: they guarantee local consistency when the number of communication iterations is small and provide asymptotically global convergence to the centralised solution. Another benefit of SGG-ICF algorithm is that it provides great flexibility and well balance between communication cost and convergence performance. If enough resource is available for communication, then a higher sensor activation probability can be chosen to increase the convergence rate; otherwise, a relatively small value of sensor activation probability is desirable.Compared to CMKF, CIKF [80] shows strong robustness against the variation of the number of communication iterations. However, CIKF generates less accurate tracking performance for both network topologies with enough communication resources. Among all the tested algorithms, ICF [82], P-CMCI [84] and SGG-ICF [96], provide more accurate performance in all tested scenarios. The reason of this fact is clear: these algorithms exploit the benefits of both CMKF and CIKF: they guarantee local consistency when the number of communication iterations is small and provide asymptotically global convergence to the centralised solution. Another benefit of SGG-ICF algorithm is that it provides great flexibility and well balance between communication cost and convergence performance. If enough resource is available for communication, then a higher sensor activation probability can be chosen to increase the convergence rate; otherwise, a relatively small value of sensor activation probability is desirable.</p>
        <p>For the two selected diffusion-based estimators, i.e., DKF with CI weights [58] and DHIF [100], their performance is comparable to that of ICF, P-CMCI and SGG-ICF with one communication iteration. The reason is that these five algorithms all apply CI rule in the fusion and hence local consistency is theoretically guaranteed. However, the convergence to the centralised fusion is lost in both DKF and DHIF as these two algorithms apply one-iteration-only fusion strategies. With these facts in mind, these approaches are suitable to scenarios where the sensors' communication resource is very limited.For the two selected diffusion-based estimators, i.e., DKF with CI weights [58] and DHIF [100], their performance is comparable to that of ICF, P-CMCI and SGG-ICF with one communication iteration. The reason is that these five algorithms all apply CI rule in the fusion and hence local consistency is theoretically guaranteed. However, the convergence to the centralised fusion is lost in both DKF and DHIF as these two algorithms apply one-iteration-only fusion strategies. With these facts in mind, these approaches are suitable to scenarios where the sensors' communication resource is very limited.</p>
        <p>From Figs. 3 (c) and 4 (c), we can observe that using only local measurements in sensor fusion, i.e., CMKF and its related algorithms, is sensitive to environmental variations. As a comparison, leveraging the CI rule brings improved robustness against parameter variations, which is helpful for applications in a dynamic scenario. Another conclusion, drawn from the MSTD results, is that the sensitivity to parameter variations can be mitigated by increasing the number of communication iterations for consensus/gossip-based algorithms.From Figs. 3 (c) and 4 (c), we can observe that using only local measurements in sensor fusion, i.e., CMKF and its related algorithms, is sensitive to environmental variations. As a comparison, leveraging the CI rule brings improved robustness against parameter variations, which is helpful for applications in a dynamic scenario. Another conclusion, drawn from the MSTD results, is that the sensitivity to parameter variations can be mitigated by increasing the number of communication iterations for consensus/gossip-based algorithms.</p>
        <p>Based on the simulation results, it can be concluded that utilising hybrid CMKF and CIKF, e.g., ICF, P-CMCI and SGG-ICF, helps to achieve global convergence to the optimal centralised solution (induced by CMKF), guarantee local consistency and improve robustness against parameter variations (induced by CIKF). However, these algorithms require multiple rounds of communications to improve the estimation performance. For this reason, one fundamental question of using these using distributed estimation algorithms is how to how to properly determine the number of iterations with allowable error bounds. As the SGG-ICF algorithm provides great flexibility and well balance between communication cost and tracking performance, it has strong potentials in distributed estimation over a low-cost sensor network. In extreme situations where the communication resource is very limited, diffusion-based algorithms could be wise options.Based on the simulation results, it can be concluded that utilising hybrid CMKF and CIKF, e.g., ICF, P-CMCI and SGG-ICF, helps to achieve global convergence to the optimal centralised solution (induced by CMKF), guarantee local consistency and improve robustness against parameter variations (induced by CIKF). However, these algorithms require multiple rounds of communications to improve the estimation performance. For this reason, one fundamental question of using these using distributed estimation algorithms is how to how to properly determine the number of iterations with allowable error bounds. As the SGG-ICF algorithm provides great flexibility and well balance between communication cost and tracking performance, it has strong potentials in distributed estimation over a low-cost sensor network. In extreme situations where the communication resource is very limited, diffusion-based algorithms could be wise options.</p>
        <p>Notice that most previous methods mentioned in Sec. 3 are dedicated for linear Gaussian discrete-time systems with no uncertainties and no state constraints. Considering this fact, we will present a brief review of several extensions of existing algorithms to practical scenarios in this section. Table 6 summarises the representative works and their corresponding baseline approaches as well as fusion strategies.Notice that most previous methods mentioned in Sec. 3 are dedicated for linear Gaussian discrete-time systems with no uncertainties and no state constraints. Considering this fact, we will present a brief review of several extensions of existing algorithms to practical scenarios in this section. Table 6 summarises the representative works and their corresponding baseline approaches as well as fusion strategies.</p>
        <p>Nonlinear system EKF [102,103,104], UKF [105,106], CKF [107,4,108] KCF [104], CMKF [107], CIKF [105], ICF [102,4], P-CMCI [103,108], Diffusion [106] Continuous-time system Kalman-bucy filter [109,110,111] KCF [110], CMKF [109], CIKF [111] Unknown statistics of measurement noise VB Kalman filter [112,113] P-CMCI [112], Diffusion [113] Unknown dynamics model [114,115,116,117,118,119,120],Nonlinear system EKF [102,103,104], UKF [105,106], CKF [107,4,108] KCF [104], CMKF [107], CIKF [105], ICF [102,4], P-CMCI [103,108], Diffusion [106] Continuous-time system Kalman-bucy filter [109,110,111] KCF [110], CMKF [109], CIKF [111] Unknown statistics of measurement noise VB Kalman filter [112,113] P-CMCI [112], Diffusion [113] Unknown dynamics model [114,115,116,117,118,119,120],</p>
        <p>IMM Kalman filter [121,122,123,124,125,126] KCF [124,120], CMKF [114,116,118,123,121], Hybrid KCF and CMKF [115,117,119], ICF [114], P-CMCI [122], Diffusion [125,126]IMM Kalman filter [121,122,123,124,125,126] KCF [124,120], CMKF [114,116,118,123,121], Hybrid KCF and CMKF [115,117,119], ICF [114], P-CMCI [122], Diffusion [125,126]</p>
        <p>Moving horizon filter [127,128,129] Diffusion [127,128,129] As most practical systems are nonlinear, either system model or measurement model, developing nonlinear filtering algorithms for sensor network is necessary. For example, if system states are defined in Cartesian coordinate, e.g., 3D position, 3D velocity and 3D acceleration, and sensor measurements are given by range, bearing angle or time of arrival, then the measurement model is a nonlinear function of system states. The extended Kalman filter (EKF), by far, is the most-widely used nonlinear filter, which approximates the nonlinear dynamics through first-order linearisation. Combing the EKF concept with the consensus algorithm, EKF was embedded into P-CMCI [103] to accommodate nonlinear range and angle measurements. For scenarios where pinhole cameras are utilised as local sensors, EKF-based KCF [104] and ICF [102] were reported to address the nonlinear issue of pinhole camera measurement model. The major shortcoming of EKF is that the estimation might diverge with large initialisation error or highly nonlinear dynamics. Attacking this problem, unscented Kalman filter (UKF) and cubature Kalman filter (CKF) were later embedded into CMKF [107], CIKF [105], ICF [4], P-CMCI [108] and DKF [106], to accommodate nonlinear range and range rate [107], sinusoidal measurement [105], bearing angle [4], range and bearing angle [108] and range [106].Moving horizon filter [127,128,129] Diffusion [127,128,129] As most practical systems are nonlinear, either system model or measurement model, developing nonlinear filtering algorithms for sensor network is necessary. For example, if system states are defined in Cartesian coordinate, e.g., 3D position, 3D velocity and 3D acceleration, and sensor measurements are given by range, bearing angle or time of arrival, then the measurement model is a nonlinear function of system states. The extended Kalman filter (EKF), by far, is the most-widely used nonlinear filter, which approximates the nonlinear dynamics through first-order linearisation. Combing the EKF concept with the consensus algorithm, EKF was embedded into P-CMCI [103] to accommodate nonlinear range and angle measurements. For scenarios where pinhole cameras are utilised as local sensors, EKF-based KCF [104] and ICF [102] were reported to address the nonlinear issue of pinhole camera measurement model. The major shortcoming of EKF is that the estimation might diverge with large initialisation error or highly nonlinear dynamics. Attacking this problem, unscented Kalman filter (UKF) and cubature Kalman filter (CKF) were later embedded into CMKF [107], CIKF [105], ICF [4], P-CMCI [108] and DKF [106], to accommodate nonlinear range and range rate [107], sinusoidal measurement [105], bearing angle [4], range and bearing angle [108] and range [106].</p>
        <p>Although discrete-time distributed Kalman filter can be applied to real-world continuous systems, it is more beneficial to directly design continuous-time distributed estimation algorithms to mitigate the approximation errors of discretisation. For this reason, continuous-time distributed Kalman-bucy filters for sensor networks were proposed in [109,110,111] based on average consensus protocols and different fusion rules, e.g., KCF [110], CMKF [109] and CIKF [111].Although discrete-time distributed Kalman filter can be applied to real-world continuous systems, it is more beneficial to directly design continuous-time distributed estimation algorithms to mitigate the approximation errors of discretisation. For this reason, continuous-time distributed Kalman-bucy filters for sensor networks were proposed in [109,110,111] based on average consensus protocols and different fusion rules, e.g., KCF [110], CMKF [109] and CIKF [111].</p>
        <p>Although the statistics of measurement noise, which is dependent on the sensors and the application scenarios, can be tested through extensive offline experiments, it might not be cost-effective and they are typically unavailable for low-cost sensors. Furthermore, the statistics of measurement noise of the same sensor might change in a great deal in a dynamic environment. For example, in a vision-based target tracking mission using camera networks, measurements are typically extracted from various object detection algorithms, ranging from classical template matching to recent deep learning method. Obviously, the statistics of measurement noise is different when applying different object detection algorithms. Therefore, the usual assumption on the exact knowledge of the statistics of measurement noise over time might be impractical and a sophisticated variant of Kalman filter is required to estimate the statistical parameters. To tackle this issue, variational Bayesian (VB) inference was embedded into P-CMCI [112] and DKF [113] to dynamically estimate the covariance of the measurement noise.Although the statistics of measurement noise, which is dependent on the sensors and the application scenarios, can be tested through extensive offline experiments, it might not be cost-effective and they are typically unavailable for low-cost sensors. Furthermore, the statistics of measurement noise of the same sensor might change in a great deal in a dynamic environment. For example, in a vision-based target tracking mission using camera networks, measurements are typically extracted from various object detection algorithms, ranging from classical template matching to recent deep learning method. Obviously, the statistics of measurement noise is different when applying different object detection algorithms. Therefore, the usual assumption on the exact knowledge of the statistics of measurement noise over time might be impractical and a sophisticated variant of Kalman filter is required to estimate the statistical parameters. To tackle this issue, variational Bayesian (VB) inference was embedded into P-CMCI [112] and DKF [113] to dynamically estimate the covariance of the measurement noise.</p>
        <p>Except for unknown statistical parameters, the dynamics model utilised in distributed Kalman filters also might have uncertainties. Significant mismatch of the dynamics model could result in erroneous tracking outputs. One popular way to mitigate the effect of model uncertainty is to incorporate the H ∞ concept with typical distributed Kalman filters, such as KCF [120], CMKF [114,116,118], hybrid KCF and CMKF [115,117,119] and ICF [114]. However, distributed H ∞ filters only consider the worst case and therefore is conservative. An alternative choice for handling model uncertainty is the widely-accepted multiple model methodology, which utilises several dynamics models in parallel with each model representing one possible target dynamics. Since the propagation of mixture is computationally intractable in practical applications, interactive multiple model (IMM) was proposed to approximate the mixture distribution by a single distribution using moment-preserving. By embedding the IMM concept into KCF [124], CMKF [121,123], P-CMCI [122], DKF [125,126], several consensus/diffusion-based distributed estimation algorithms have been suggested for systems with uncertain model.Except for unknown statistical parameters, the dynamics model utilised in distributed Kalman filters also might have uncertainties. Significant mismatch of the dynamics model could result in erroneous tracking outputs. One popular way to mitigate the effect of model uncertainty is to incorporate the H ∞ concept with typical distributed Kalman filters, such as KCF [120], CMKF [114,116,118], hybrid KCF and CMKF [115,117,119] and ICF [114]. However, distributed H ∞ filters only consider the worst case and therefore is conservative. An alternative choice for handling model uncertainty is the widely-accepted multiple model methodology, which utilises several dynamics models in parallel with each model representing one possible target dynamics. Since the propagation of mixture is computationally intractable in practical applications, interactive multiple model (IMM) was proposed to approximate the mixture distribution by a single distribution using moment-preserving. By embedding the IMM concept into KCF [124], CMKF [121,123], P-CMCI [122], DKF [125,126], several consensus/diffusion-based distributed estimation algorithms have been suggested for systems with uncertain model.</p>
        <p>In some practical applications, system states might have some constraints. For example, when tracking a ground moving vehicle, the target's position naturally needs to be constrained inside the road boundary.In some practical applications, system states might have some constraints. For example, when tracking a ground moving vehicle, the target's position naturally needs to be constrained inside the road boundary.</p>
        <p>As stated in [130], the algorithms based on classical Kalman filter might become unstable for constrained systems. Furthermore, it has been proved that the utilisation of the information on constraint in filter design is helpful in improving the tracking performance [131,132]. For this reason, the authors of [127,128,129] developed distributed estimation algorithms for constrained systems using moving horizon estimation approach and diffusion fusion strategy.As stated in [130], the algorithms based on classical Kalman filter might become unstable for constrained systems. Furthermore, it has been proved that the utilisation of the information on constraint in filter design is helpful in improving the tracking performance [131,132]. For this reason, the authors of [127,128,129] developed distributed estimation algorithms for constrained systems using moving horizon estimation approach and diffusion fusion strategy.</p>
        <p>In recent years, low-cost sensor networks have been widely-utilised in many practical applications for distributed target tracking, especially in autonomous systems. Two representative application examples are presented in Fig. 5. Fig. 5 (a) provides an example of using multi-sensor fusion to aid autonomous driving in an uncertain or unknown dynamic environment [133]. The autonomous vehicle leverages a variety of different sensors, e.g., surrounding radars and acoustic sensors, front camera, to estimate the landmarks and obstacles for safe and reliable navigation. Despite their wide applications, low-cost sensor networks are generally subject to a certain degree of random uncertainties. These include, but not limited to, miss detection, false alarm, sensor bias, and communication-related issues, e.g., limited communication bandwidth and communication delay, and limited onboard energy. Therefore, developing distributed estimation algorithms for low-cost sensor network is more challenging, compared to the utilisation of reliable and expensive sensors. Mainly due to this fact, there is a strong necessity in developing new distributed estimators for low-cost sensor networks to fit practical applications. This section will give a detailed overview of the low-cost-sensor-network-induced issues and discuss existing solutions as well as some remaining challenges.In recent years, low-cost sensor networks have been widely-utilised in many practical applications for distributed target tracking, especially in autonomous systems. Two representative application examples are presented in Fig. 5. Fig. 5 (a) provides an example of using multi-sensor fusion to aid autonomous driving in an uncertain or unknown dynamic environment [133]. The autonomous vehicle leverages a variety of different sensors, e.g., surrounding radars and acoustic sensors, front camera, to estimate the landmarks and obstacles for safe and reliable navigation. Despite their wide applications, low-cost sensor networks are generally subject to a certain degree of random uncertainties. These include, but not limited to, miss detection, false alarm, sensor bias, and communication-related issues, e.g., limited communication bandwidth and communication delay, and limited onboard energy. Therefore, developing distributed estimation algorithms for low-cost sensor network is more challenging, compared to the utilisation of reliable and expensive sensors. Mainly due to this fact, there is a strong necessity in developing new distributed estimators for low-cost sensor networks to fit practical applications. This section will give a detailed overview of the low-cost-sensor-network-induced issues and discuss existing solutions as well as some remaining challenges.</p>
        <p>Notice that low-cost sensors are generally subject to low detection probability. For this reason, distributed estimation over a low-cost sensor network should take into account this factor to support practical applications. Up to now, most existing solutions model this random miss detection, also known as intermittent observation, in a probabilistic way by either Bernoulli distribution or Markovian chain, and conduct performance analysis and algorithm development based on the probabilistic model.Notice that low-cost sensors are generally subject to low detection probability. For this reason, distributed estimation over a low-cost sensor network should take into account this factor to support practical applications. Up to now, most existing solutions model this random miss detection, also known as intermittent observation, in a probabilistic way by either Bernoulli distribution or Markovian chain, and conduct performance analysis and algorithm development based on the probabilistic model.</p>
        <p>When considering miss observations, the measurement model can be modified as [134,135,136,137,138,139] zWhen considering miss observations, the measurement model can be modified as [134,135,136,137,138,139] z</p>
        <p>where the miss detection is modelled by is a random variable γ k,i that satisfies a Bernoulli distribution, i.e., γ k,i takes the value 1 with probability P D and the value 0 with probability 1 -P D . Stability and performance of classical Kalman filter with Bernoulli-distribution-based miss observations was analysed in the literature [134,137]. Extensions to EKF and UKF were, respectively, reported in [135], [136]. Under the assumption that the system is controllable and observable, the general conclusion is that there exists a critical value p such that if the detection probability satisfies P D &gt; p, then the expectation of the estimation error covariance is bounded; otherwise, the estimation might diverge for some initial conditions. Except for the Bernoulli distribution model, Markovian chain model was also utilised in [140] to analyse the mean square error performance of Kalman filter with miss observations. However, the advantage of this model over the popular Bernoulli model was not justified in [140].where the miss detection is modelled by is a random variable γ k,i that satisfies a Bernoulli distribution, i.e., γ k,i takes the value 1 with probability P D and the value 0 with probability 1 -P D . Stability and performance of classical Kalman filter with Bernoulli-distribution-based miss observations was analysed in the literature [134,137]. Extensions to EKF and UKF were, respectively, reported in [135], [136]. Under the assumption that the system is controllable and observable, the general conclusion is that there exists a critical value p such that if the detection probability satisfies P D &gt; p, then the expectation of the estimation error covariance is bounded; otherwise, the estimation might diverge for some initial conditions. Except for the Bernoulli distribution model, Markovian chain model was also utilised in [140] to analyse the mean square error performance of Kalman filter with miss observations. However, the advantage of this model over the popular Bernoulli model was not justified in [140].</p>
        <p>Under the condition of miss detection, the centralised fusion solution reduces to [141]Under the condition of miss detection, the centralised fusion solution reduces to [141]</p>
        <p>Comparing Eqs. ( 4) and ( 21), it can be noted that the performance of centralised estimation degrades as the miss detection results in inevitable information loss. This means that the achievable performance of distributed estimation will also degrade with miss observations. Although each sensor node is subject to limited sensing capability, the stochastic stability of distributed estimation can be ensured by collective observability of the sensor network, i.e., any two sensor nodes are direct (one-hop) or indirect connected (multi-hop). However, if the target is miss detected, the condition of collective observability might be violated. Therefore, the primary question to be answered under lossy network is that whether or not the existing distributed estimation algorithms guarantee stable target tracking process. For this reason, the authors of [142,143] analysed the stability of KCF with possible miss detections based on the analysis tools utilised in [134,135,137]. The results reveal that KCF is strictly stable provided that the detection probability is larger than a lower bound. The drawback of the stability analysis presented in [142,143] is that the critical value of the detection probability only characterises the boundedness of the expectation of estimation error and its covariance. To completely characterise the effect of intermittent observation on the tracking performance, it is more desirable to calculate the probability distribution of estimation error instead of only considering the boundedness of its expectation.Comparing Eqs. ( 4) and ( 21), it can be noted that the performance of centralised estimation degrades as the miss detection results in inevitable information loss. This means that the achievable performance of distributed estimation will also degrade with miss observations. Although each sensor node is subject to limited sensing capability, the stochastic stability of distributed estimation can be ensured by collective observability of the sensor network, i.e., any two sensor nodes are direct (one-hop) or indirect connected (multi-hop). However, if the target is miss detected, the condition of collective observability might be violated. Therefore, the primary question to be answered under lossy network is that whether or not the existing distributed estimation algorithms guarantee stable target tracking process. For this reason, the authors of [142,143] analysed the stability of KCF with possible miss detections based on the analysis tools utilised in [134,135,137]. The results reveal that KCF is strictly stable provided that the detection probability is larger than a lower bound. The drawback of the stability analysis presented in [142,143] is that the critical value of the detection probability only characterises the boundedness of the expectation of estimation error and its covariance. To completely characterise the effect of intermittent observation on the tracking performance, it is more desirable to calculate the probability distribution of estimation error instead of only considering the boundedness of its expectation.</p>
        <p>Improvement over KCF with intermittent observations was reported in [144], where the Kalman gain of a local sensor node was optimised by the minimisation of mean square estimation error in this reference. The sufficient condition for guaranteeing exponentially bounded mean square estimation error was also derived as an appropriate guideline for the choice of consensus gains. Another attempt to improve the performance of KCF with miss detections was proposed in [145], where the consensus gain was adaptively updated depending on the value of γ k,i by adding one additional binary information exchange between two neighbours. This adaptation process places more weighting on the nodes that currently detect the target, thus providing the possibility of substantial performance improvement. Following similar procedures shown in [144], Li et al.Improvement over KCF with intermittent observations was reported in [144], where the Kalman gain of a local sensor node was optimised by the minimisation of mean square estimation error in this reference. The sufficient condition for guaranteeing exponentially bounded mean square estimation error was also derived as an appropriate guideline for the choice of consensus gains. Another attempt to improve the performance of KCF with miss detections was proposed in [145], where the consensus gain was adaptively updated depending on the value of γ k,i by adding one additional binary information exchange between two neighbours. This adaptation process places more weighting on the nodes that currently detect the target, thus providing the possibility of substantial performance improvement. Following similar procedures shown in [144], Li et al.</p>
        <p>[146] revisited the DKF by finding the optimal Kalman gain with intermittent observations to minimise the estimation uncertainty. A three-layer architecture was proposed in [147] to tackle the issue of distributed estimation with miss observations. The first layer utilised an average consensus protocol to fuse the received measurements from different sensors; the second layer applied the minimum variance filter [148] to improve the local estimation performance; and the third layer, again, leveraged the average consensus algorithm, similar to KCF, to get the fused estimate.[146] revisited the DKF by finding the optimal Kalman gain with intermittent observations to minimise the estimation uncertainty. A three-layer architecture was proposed in [147] to tackle the issue of distributed estimation with miss observations. The first layer utilised an average consensus protocol to fuse the received measurements from different sensors; the second layer applied the minimum variance filter [148] to improve the local estimation performance; and the third layer, again, leveraged the average consensus algorithm, similar to KCF, to get the fused estimate.</p>
        <p>Table 7 summarises the representative works that consider the effect of miss detection in distributed estimation. Except for KCF and DKF, the discussions and analysis of other distributed filters, shown in Tables 3 and4, related to miss observations, however, are rare. Analogous to KCF and DKF, there are two fundamental questions need to be answered for other distributed Kalman filters: (1) Whether or not these filters are stable with intermittent observations? and (2) How to optimise the Kalman gain and consensus/diffusion gain to improve the estimation performance with miss detection?Table 7 summarises the representative works that consider the effect of miss detection in distributed estimation. Except for KCF and DKF, the discussions and analysis of other distributed filters, shown in Tables 3 and4, related to miss observations, however, are rare. Analogous to KCF and DKF, there are two fundamental questions need to be answered for other distributed Kalman filters: (1) Whether or not these filters are stable with intermittent observations? and (2) How to optimise the Kalman gain and consensus/diffusion gain to improve the estimation performance with miss detection?</p>
        <p>Except for target-generated measurement, low-cost sensors also might randomly or occasionally receive false alarms or clutters, also known as spurious measurements. Under this condition, the source origins of received measurements become uncertain: the mappings between the target and the measurements are unknown. To resolve this issue, data association technique is usually integrated into existing distributed estimation algorithms to discern target-generated measurement from clutters. Depending on the types of decisions, data association can be generally categorised into two main classes: hard decision and softExcept for target-generated measurement, low-cost sensors also might randomly or occasionally receive false alarms or clutters, also known as spurious measurements. Under this condition, the source origins of received measurements become uncertain: the mappings between the target and the measurements are unknown. To resolve this issue, data association technique is usually integrated into existing distributed estimation algorithms to discern target-generated measurement from clutters. Depending on the types of decisions, data association can be generally categorised into two main classes: hard decision and soft</p>
        <p>Reference Approach KCF [142,143] Deriving the lower bound of the detection probability for ensuring stochastic stability KCF [144] Optimising the Kalman gain to minimise the estimation uncertainty KCF [145] Adaptively updating the consensus gain to minimise the estimation uncertainty KCF [147] Utilising the minimum variance filter to mitigate the effect of miss detection DKF [146] Optimising the Kalman gain to minimise the estimation uncertainty decision. Hard decision utilises only one specific measurement for updating target estimation while soft decision considers all possible measurements for in track update.Reference Approach KCF [142,143] Deriving the lower bound of the detection probability for ensuring stochastic stability KCF [144] Optimising the Kalman gain to minimise the estimation uncertainty KCF [145] Adaptively updating the consensus gain to minimise the estimation uncertainty KCF [147] Utilising the minimum variance filter to mitigate the effect of miss detection DKF [146] Optimising the Kalman gain to minimise the estimation uncertainty decision. Hard decision utilises only one specific measurement for updating target estimation while soft decision considers all possible measurements for in track update.</p>
        <p>Since hard decision data association finds the most likely measurement to update each target, the measurement update can be carried out using typical Kalman filter and its related algorithms as long as the data association process is finished. This means that the local filter shares similar structure as traditional information-form Kalman filter. Therefore, the fusion algorithms discussed in Tables 3 and4 can be directly applied to fuse local estimates. An example of this type of distributed estimation algorithm was nearest-neighbour-CMKF [149], where the local filter utilises the nearest neighbour approach [150] in data association and the fusion strategy is based on CMKF. Although hard decision is easy for real implementation, it prunes all other feasible measurements from the association and therefore the overall tracking performance degrades drastically for nontrivial scenarios. For this reason, it is more desirable to conduct data association using a probabilistic or Bayesian decision process.Since hard decision data association finds the most likely measurement to update each target, the measurement update can be carried out using typical Kalman filter and its related algorithms as long as the data association process is finished. This means that the local filter shares similar structure as traditional information-form Kalman filter. Therefore, the fusion algorithms discussed in Tables 3 and4 can be directly applied to fuse local estimates. An example of this type of distributed estimation algorithm was nearest-neighbour-CMKF [149], where the local filter utilises the nearest neighbour approach [150] in data association and the fusion strategy is based on CMKF. Although hard decision is easy for real implementation, it prunes all other feasible measurements from the association and therefore the overall tracking performance degrades drastically for nontrivial scenarios. For this reason, it is more desirable to conduct data association using a probabilistic or Bayesian decision process.</p>
        <p>Unlike hard decision, utilising soft decision in local filter introduces additional terms related to data association uncertainty in the fusion statge. By analysing the effect of data association uncertainty, the authors of [151] revealed that the centralised probabilistic data association filter becomesUnlike hard decision, utilising soft decision in local filter introduces additional terms related to data association uncertainty in the fusion statge. By analysing the effect of data association uncertainty, the authors of [151] revealed that the centralised probabilistic data association filter becomes</p>
        <p>The difference between Eq. ( 22) and Eq. ( 4) is resulted from the measurement origin uncertainty. This is reflected by the two information-related terms g k,i and G k,i . Note that the centralised estimation (22) reduces to the original one, i.e., Eq. ( 4), if there is no data association uncertainty. Comparing Eqs. ( 4) and ( 22), it is clear that simply applying the existing distributed estimation algorithms, as shown in Tables 3 and4, cannot recover the performance of centralised estimation due to data association uncertainty and therefore sensor fusion with false alarms requires careful adjustment.The difference between Eq. ( 22) and Eq. ( 4) is resulted from the measurement origin uncertainty. This is reflected by the two information-related terms g k,i and G k,i . Note that the centralised estimation (22) reduces to the original one, i.e., Eq. ( 4), if there is no data association uncertainty. Comparing Eqs. ( 4) and ( 22), it is clear that simply applying the existing distributed estimation algorithms, as shown in Tables 3 and4, cannot recover the performance of centralised estimation due to data association uncertainty and therefore sensor fusion with false alarms requires careful adjustment.</p>
        <p>By formulating a Bayesian framework for identifying spurious measurements, a sequential multi-sensor fusion algorithm was proposed in [152]. Except for local estimates, this newly-developed algorithm utilised an additional term in the fusion process between two connected sensors. This term corresponds to the probability that the received data is not spurious and is formulated using Bayesian theory. Both maximum a posterior (MAP) and MMSE solutions are derived in this work. In the presence of false alarms, direct extension of previous distributed estimation algorithms, shown in Tables 3 and4, is not straightforward due to the measurement origin uncertainty and hence requires careful adjustment. By leveraging the concept of equivalent measurement (EM), the authors of [153] proposed a distributed estimation algorithm using probabilistic data association (PDA) [154]. Each local sensor runs Kalman filter backward to calculate the EM and transmits this information to a neighbour for information fusion. Similar to the sequential CI [35], a distributed PDA target tracking algorithm considering clutters was proposed by sequentially fusing the information between two connected sensors [155,156]. Although this strategy is scalable, it requires each sensor's field-of-view to cover the entire surveillance region, which might be impractical [156]. The authors of [157,158,159] integrated KCF and PDA in distributed target tracking to resolve the clutter issue. An adaptive update law for the consensus gain was also suggested in [159] to improve the tracking performance. The adaptive law places more weight on the nodes that have higher probability of receiving a target-originated measurement, thus enabling substantial performance improvement. As KCF requires every sensor node and its neighbours have joint observability or at least detectability about the target of interest, PDA was integrated into ICF to relax this assumption in [160,161]. However, this algorithm requires the global information on the network size, i.e., total number of sensors, in implementation. In practice, an unexpected sensor failure will inevitably change the total number of nodes, leading to performance degradation if the original value of network size is used. Ref. [151] extended CM and CI strategies to cater for the clutter issue, addressing the inherent data association uncertainty issue, and proposed a fully distributed target tracking algorithm with a hybrid fusion strategy. The network size was dynamically estimated in this work through a max consensus algorithm. A consensus Bernoulli filter was proposed in [162] for target tracking over a network of separately located Doppler-shift sensors using generalised CI [163].By formulating a Bayesian framework for identifying spurious measurements, a sequential multi-sensor fusion algorithm was proposed in [152]. Except for local estimates, this newly-developed algorithm utilised an additional term in the fusion process between two connected sensors. This term corresponds to the probability that the received data is not spurious and is formulated using Bayesian theory. Both maximum a posterior (MAP) and MMSE solutions are derived in this work. In the presence of false alarms, direct extension of previous distributed estimation algorithms, shown in Tables 3 and4, is not straightforward due to the measurement origin uncertainty and hence requires careful adjustment. By leveraging the concept of equivalent measurement (EM), the authors of [153] proposed a distributed estimation algorithm using probabilistic data association (PDA) [154]. Each local sensor runs Kalman filter backward to calculate the EM and transmits this information to a neighbour for information fusion. Similar to the sequential CI [35], a distributed PDA target tracking algorithm considering clutters was proposed by sequentially fusing the information between two connected sensors [155,156]. Although this strategy is scalable, it requires each sensor's field-of-view to cover the entire surveillance region, which might be impractical [156]. The authors of [157,158,159] integrated KCF and PDA in distributed target tracking to resolve the clutter issue. An adaptive update law for the consensus gain was also suggested in [159] to improve the tracking performance. The adaptive law places more weight on the nodes that have higher probability of receiving a target-originated measurement, thus enabling substantial performance improvement. As KCF requires every sensor node and its neighbours have joint observability or at least detectability about the target of interest, PDA was integrated into ICF to relax this assumption in [160,161]. However, this algorithm requires the global information on the network size, i.e., total number of sensors, in implementation. In practice, an unexpected sensor failure will inevitably change the total number of nodes, leading to performance degradation if the original value of network size is used. Ref. [151] extended CM and CI strategies to cater for the clutter issue, addressing the inherent data association uncertainty issue, and proposed a fully distributed target tracking algorithm with a hybrid fusion strategy. The network size was dynamically estimated in this work through a max consensus algorithm. A consensus Bernoulli filter was proposed in [162] for target tracking over a network of separately located Doppler-shift sensors using generalised CI [163].</p>
        <p>This algorithm avoids the data association process by using the random finite set theory.This algorithm avoids the data association process by using the random finite set theory.</p>
        <p>Table 8 summarises the main solutions to the problem of false alarm in distributed estimation. From these published works, it is clear that the integration of previous distributed estimation algorithms with data association could be a possible way to solve the clutter problem. However, theoretical stochastic stability analysis of these integrated algorithms remains a challenging task.Table 8 summarises the main solutions to the problem of false alarm in distributed estimation. From these published works, it is clear that the integration of previous distributed estimation algorithms with data association could be a possible way to solve the clutter problem. However, theoretical stochastic stability analysis of these integrated algorithms remains a challenging task.</p>
        <p>Reference Approach CMKF [149] Embedding nearest neighbour data association into CMKF Sequential SVF [152] Bayesian inference of the spurious measurement Sequential SVF [153,155,156] Embedding PDA into sequential SVF based distributed Kalman filter KCF [157,158,159] Embedding PDA into KCF ICF [160,161] Embedding PDA into ICF P-CMCI [151] Embedding PDA and node counting algorithm into P-CMCI Generalised CI [162] Combining Bernoulli filter and consensus protocolReference Approach CMKF [149] Embedding nearest neighbour data association into CMKF Sequential SVF [152] Bayesian inference of the spurious measurement Sequential SVF [153,155,156] Embedding PDA into sequential SVF based distributed Kalman filter KCF [157,158,159] Embedding PDA into KCF ICF [160,161] Embedding PDA into ICF P-CMCI [151] Embedding PDA and node counting algorithm into P-CMCI Generalised CI [162] Combining Bernoulli filter and consensus protocol</p>
        <p>In distributed estimation over a sensor network, iterative communication is usually required to improve the fusion performance. However, low-cost sensors generally have limited communication bandwidth and onboard power. With the increase of the network size, distributed estimators inevitably suffer from the problem of limited energy, computational power, and communication resources. These considerations motivate the growing interest towards the development of distributed estimation algorithm to reduce the communication load. Data quantisation/compression and event-triggered communication scheduling are two main tools available that have been exploited to reduce the communication burden in distributed estimation.In distributed estimation over a sensor network, iterative communication is usually required to improve the fusion performance. However, low-cost sensors generally have limited communication bandwidth and onboard power. With the increase of the network size, distributed estimators inevitably suffer from the problem of limited energy, computational power, and communication resources. These considerations motivate the growing interest towards the development of distributed estimation algorithm to reduce the communication load. Data quantisation/compression and event-triggered communication scheduling are two main tools available that have been exploited to reduce the communication burden in distributed estimation.</p>
        <p>Data quantisation is a popular way to save bandwidth in communication, which is closely related to the optimisation of bandwidth allocation and sensor power [164,165,166]. Instead of reconstructing the original signal, the objective is to find optimal estimators using quantised observations. The authors of [167] utilised a linear transformation to compress the raw measurements of each sensor to reduce the onboard communication load for the two-sensor fusion and extended this algorithm to multiple sensors using sequential fusion. The implementation, therefore, requires the network to be sequentially connected and this algorithm cannot be applied to a generic network topology. Taking into account the stringent communication constraints, Ribeiro et. al. [168] suggested a decentralised single-bit quantised innovation filter, termed as sign-of-innovations Kalman filter (SOI-KF). This filter quantises observations as a sequence of the sign of the innovations, i.e., 1 or -1, before sending messages to the fusion processor. The most prominent feature of SOI-KF lies in that it enables a simple recursive implementation form with complexity very close to the original Kalman filter.Data quantisation is a popular way to save bandwidth in communication, which is closely related to the optimisation of bandwidth allocation and sensor power [164,165,166]. Instead of reconstructing the original signal, the objective is to find optimal estimators using quantised observations. The authors of [167] utilised a linear transformation to compress the raw measurements of each sensor to reduce the onboard communication load for the two-sensor fusion and extended this algorithm to multiple sensors using sequential fusion. The implementation, therefore, requires the network to be sequentially connected and this algorithm cannot be applied to a generic network topology. Taking into account the stringent communication constraints, Ribeiro et. al. [168] suggested a decentralised single-bit quantised innovation filter, termed as sign-of-innovations Kalman filter (SOI-KF). This filter quantises observations as a sequence of the sign of the innovations, i.e., 1 or -1, before sending messages to the fusion processor. The most prominent feature of SOI-KF lies in that it enables a simple recursive implementation form with complexity very close to the original Kalman filter.</p>
        <p>However, this rough '1 or -1' quantisation inevitably results in large estimation errors and is only limited to a 1-bit per observation quantiser. Fundamentally, improved estimation performance can be resulted by neglecting an innovation that is close to zero rather than quantising it into 1 or -1 in updating the state estimation. Based on this concept, a modified SOI-KF using dead zone technique was proposed in [169]. More specifically, only when an innovation is outside the dead zone, it is quantised by its sign in measurement update. The quantisation threshold of the dead zone is obtained by optimising the filter error covariance. In principle, there is a trade-off between communication requirements (reflected by the number of quantisation bits) and overall estimation performance. To address this dilemma, the authors of [170] suggested a multi-bit quantisation filter and the estimation performance using 2 to 3 bits was shown to be very close to the optimal Kalman filter, with only moderate increase in the computational complexity.However, this rough '1 or -1' quantisation inevitably results in large estimation errors and is only limited to a 1-bit per observation quantiser. Fundamentally, improved estimation performance can be resulted by neglecting an innovation that is close to zero rather than quantising it into 1 or -1 in updating the state estimation. Based on this concept, a modified SOI-KF using dead zone technique was proposed in [169]. More specifically, only when an innovation is outside the dead zone, it is quantised by its sign in measurement update. The quantisation threshold of the dead zone is obtained by optimising the filter error covariance. In principle, there is a trade-off between communication requirements (reflected by the number of quantisation bits) and overall estimation performance. To address this dilemma, the authors of [170] suggested a multi-bit quantisation filter and the estimation performance using 2 to 3 bits was shown to be very close to the optimal Kalman filter, with only moderate increase in the computational complexity.</p>
        <p>Instead of quantising the innovation, the authors of [171] suggested an one-bit quantisation scheme over measurement and utilised sequential fusion for distributed estimation. In this approach, each local sensor node accumulates earlier information received from other sensor nodes and uses the accumulated value as the threshold to dynamically modulate the quantisation process.Instead of quantising the innovation, the authors of [171] suggested an one-bit quantisation scheme over measurement and utilised sequential fusion for distributed estimation. In this approach, each local sensor node accumulates earlier information received from other sensor nodes and uses the accumulated value as the threshold to dynamically modulate the quantisation process.</p>
        <p>Different from innovation and observation quantisation, Li et al. [172] proposed a quantised GIKF (QGIKF) by randomly swapping the quantised local estimates with a locally-connected neighbour asDifferent from innovation and observation quantisation, Li et al. [172] proposed a quantised GIKF (QGIKF) by randomly swapping the quantised local estimates with a locally-connected neighbour as</p>
        <p>The associated estimation error covariance is determined asThe associated estimation error covariance is determined as</p>
        <p>Similar to GIKF [92,93], QGIKF also guarantees probabilistic convergence to a unique invariant measure.Similar to GIKF [92,93], QGIKF also guarantees probabilistic convergence to a unique invariant measure.</p>
        <p>However, how to tackle the quantisation error has not been addressed in this reference. Even though data quantisation is a promising technique, bit quantisations [168,170,169] bring a stochastic approximation error with unknown covariance. Therefore, simple implementation of Kalman filter with an empirical covariance matrix is not a wise option. For this reason, Ge et al. [173] proposed an adaptive quantised Kalman filter by dynamically estimating the covariance matrix using variational Bayesian approach. This algorithm was extended to multi-sensor network via a sequential fusion rule in [174].However, how to tackle the quantisation error has not been addressed in this reference. Even though data quantisation is a promising technique, bit quantisations [168,170,169] bring a stochastic approximation error with unknown covariance. Therefore, simple implementation of Kalman filter with an empirical covariance matrix is not a wise option. For this reason, Ge et al. [173] proposed an adaptive quantised Kalman filter by dynamically estimating the covariance matrix using variational Bayesian approach. This algorithm was extended to multi-sensor network via a sequential fusion rule in [174].</p>
        <p>Apart from data quantisation, another efficient approach to limit data transmission is event-triggered (or data-driven) strategy to schedule data communication. As pointed out in [175], information is transmitted to the processor only when an event occurs in event-triggered state estimations. Currently, most works in this domain focus on the centralised algorithms with different triggering conditions. For example, the communication between the fusion centre and local sensor node can be triggered via periodic transmission at a prescribed rate [175], when the innovation is bigger than a threshold [176,177], via solving a constrained stochastic optimisation problem that minimises the trace of error covariance [178], when the difference between the current sensor value and the previously transmitted one is greater than a threshold [179], when the difference of error covariance between a full-communication Kalman filter and an event-based Kalman filter is larger than a threshold [180], when the difference between the predicted state and updated state is bigger than a lower bound [181].Apart from data quantisation, another efficient approach to limit data transmission is event-triggered (or data-driven) strategy to schedule data communication. As pointed out in [175], information is transmitted to the processor only when an event occurs in event-triggered state estimations. Currently, most works in this domain focus on the centralised algorithms with different triggering conditions. For example, the communication between the fusion centre and local sensor node can be triggered via periodic transmission at a prescribed rate [175], when the innovation is bigger than a threshold [176,177], via solving a constrained stochastic optimisation problem that minimises the trace of error covariance [178], when the difference between the current sensor value and the previously transmitted one is greater than a threshold [179], when the difference of error covariance between a full-communication Kalman filter and an event-based Kalman filter is larger than a threshold [180], when the difference between the predicted state and updated state is bigger than a lower bound [181].</p>
        <p>Based on the original KCF, the authors of [182,183,184,185] developed several variants of eventtriggered KCFs using different triggering conditions. One common triggering condition that is utilised in these works is the difference between two local estimates, i.e., two sensors exchange their local estimates if the difference is larger than a lower threshold. The approach proposed in [183] additionally considered the local estimation error covariance as the triggering condition, i.e., the local estimation error covariance exceeds a given threshold. Except for local state estimations, Ref. [185] leverages local measurement as additional triggering condition, i.e., the different of local measurement between two consecutive time instants is bigger than a lower bound. Refs. [182,184,185] also optimised the Kalman gain for event-triggered KCF by minimising the trace of the error covariance. Conversely, event-triggered measurement-based transmission was developed in [186,187]. More specifically, Ref. [186] developed a variant of CMKF by triggering the communication when the difference between current and last innovations exceeds a lower bound, whileBased on the original KCF, the authors of [182,183,184,185] developed several variants of eventtriggered KCFs using different triggering conditions. One common triggering condition that is utilised in these works is the difference between two local estimates, i.e., two sensors exchange their local estimates if the difference is larger than a lower threshold. The approach proposed in [183] additionally considered the local estimation error covariance as the triggering condition, i.e., the local estimation error covariance exceeds a given threshold. Except for local state estimations, Ref. [185] leverages local measurement as additional triggering condition, i.e., the different of local measurement between two consecutive time instants is bigger than a lower bound. Refs. [182,184,185] also optimised the Kalman gain for event-triggered KCF by minimising the trace of the error covariance. Conversely, event-triggered measurement-based transmission was developed in [186,187]. More specifically, Ref. [186] developed a variant of CMKF by triggering the communication when the difference between current and last innovations exceeds a lower bound, while</p>
        <p>Ref. [187] utilised hybrid KCF/CMKF and the communication was triggered by the difference between current and last measurements. To counteract the drawback of KCF, the authors of [188] developed eventtriggered P-CMCI and the communication triggered by the difference between two local estimates. Further improvement over [188] can also be found in [189], where the communication is triggered only when the Kullback-Leibler divergence between the predicted and updated distributions exceeds a certain threshold.Ref. [187] utilised hybrid KCF/CMKF and the communication was triggered by the difference between current and last measurements. To counteract the drawback of KCF, the authors of [188] developed eventtriggered P-CMCI and the communication triggered by the difference between two local estimates. Further improvement over [188] can also be found in [189], where the communication is triggered only when the Kullback-Leibler divergence between the predicted and updated distributions exceeds a certain threshold.</p>
        <p>This newly developed algorithm guarantees bounded mean-square performance provided that the network is strongly connected and the system is collectively observable.This newly developed algorithm guarantees bounded mean-square performance provided that the network is strongly connected and the system is collectively observable.</p>
        <p>Table 9 summarises the main solutions to reduce the communication burden of existing distributed estimation algorithms. From this table, it can be noted that, except for GIKF, the integration of data quantisation with other distributed Kalman filters, e.g., KCF, DKF, etc, still remains an open problem.Table 9 summarises the main solutions to reduce the communication burden of existing distributed estimation algorithms. From this table, it can be noted that, except for GIKF, the integration of data quantisation with other distributed Kalman filters, e.g., KCF, DKF, etc, still remains an open problem.</p>
        <p>Also, it is clear that the event-triggered concept can be easily integrated into existing distributed Kalman filters, especially consensus-based and diffusion-based algorithms, with a specific triggering condition to reduce the communication burden. However, most triggering conditions in distributed fusion are constructed heuristically and the performance analysis of different triggering conditions still needs further explorations to support practical applications. A more promising way to tackle this problem is to modify the centralised stochastic optimisation approach [178] into a distribution version such that an optimal triggering condition can be found given specific communication constraint. Fusion strategy Reference Approach Sequential SVF [167] Compressing the raw measurements using a linear transformation Sequential MVF [171] Quantising the observation of each local sensor node into an one-bit binary data Gossip [172] Embedding data quantisation method into GIKF KCF [182,183,184,185] Communication is triggered if the difference between two local estimates exceeds certain threshold CMKF [186] Communication is triggered if the difference between current and last innovations exceeds certain threshold Hybrid KCF/CMKF [187] Communication is triggered if the difference between current and last measurements exceeds certain threshold P-CMCI [188] Communication is triggered if the difference between two local estimates exceeds certain threshold P-CMCI [189] Communication is triggered if the Kullback-Leibler divergence between the predicted and updated distributions exceeds certain thresholdAlso, it is clear that the event-triggered concept can be easily integrated into existing distributed Kalman filters, especially consensus-based and diffusion-based algorithms, with a specific triggering condition to reduce the communication burden. However, most triggering conditions in distributed fusion are constructed heuristically and the performance analysis of different triggering conditions still needs further explorations to support practical applications. A more promising way to tackle this problem is to modify the centralised stochastic optimisation approach [178] into a distribution version such that an optimal triggering condition can be found given specific communication constraint. Fusion strategy Reference Approach Sequential SVF [167] Compressing the raw measurements using a linear transformation Sequential MVF [171] Quantising the observation of each local sensor node into an one-bit binary data Gossip [172] Embedding data quantisation method into GIKF KCF [182,183,184,185] Communication is triggered if the difference between two local estimates exceeds certain threshold CMKF [186] Communication is triggered if the difference between current and last innovations exceeds certain threshold Hybrid KCF/CMKF [187] Communication is triggered if the difference between current and last measurements exceeds certain threshold P-CMCI [188] Communication is triggered if the difference between two local estimates exceeds certain threshold P-CMCI [189] Communication is triggered if the Kullback-Leibler divergence between the predicted and updated distributions exceeds certain threshold</p>
        <p>In a low-cost sensor network, random communication delay is inevitable during information exchange among sensor nodes due to limited communication bandwidth and network congestion. Moreover, practical sensors might have different processing rates depending on the type of the sensor. These factors, obviously, will result in the misalignment in the clocks of local sensor nodes, meaning that the synchronisation assumption in typical distributed fusion algorithms is not valid. For this reason, asynchronous distributed fusion has received much attention in recent years in an attempt to fit the practical applications. Current works related to this topic mainly focus on clock synchronisation of received information or fusion using most recent information.In a low-cost sensor network, random communication delay is inevitable during information exchange among sensor nodes due to limited communication bandwidth and network congestion. Moreover, practical sensors might have different processing rates depending on the type of the sensor. These factors, obviously, will result in the misalignment in the clocks of local sensor nodes, meaning that the synchronisation assumption in typical distributed fusion algorithms is not valid. For this reason, asynchronous distributed fusion has received much attention in recent years in an attempt to fit the practical applications. Current works related to this topic mainly focus on clock synchronisation of received information or fusion using most recent information.</p>
        <p>Based on projection theory and induction hypothesis, a distributed fusion algorithm was proposed in [190] for two sensors with different sampling rates. This algorithm was also theoretically proven to be optimal in the sense of MMSE. Similar to sequential SVF, this approach can also be extended to multiple sensor distributed fusion in a sequential manner. Motivated by the idea of [30,31], a matrix weighted optimal, in the sense of LUMV, SVF algorithm was proposed in [191] for multiple sensors with different sampling rates. This work formulated the state space model at the measurement sampling points, thus manually synchronising local fusion. Considering the local sensor node has higher sampling rate than the information exchange rate among the sensor nodes, the authors of [192] developed a sequential fusion algorithms using lifting technique [193], which models the multi-rate estimation system as single-sampling-rate system with multiple stochastic parameters. For a sensor network with non-uniform estimation rates, Zhang et al. [194] proposed a matrix weighted fusion algorithm using innovation analysis and lifting technique. A set of recursive equations to compute the estimation error cross-covariance were also presented to support the implementation. Zhu et al. [195] suggested a sequential asynchronous fusion algorithms for target tracking in a wireless sensor network by a newly-introduced concept, called to-be-estimated state, which utilises each sensor's own state and most recently-received measurements for update. The limitation of this algorithm is that it didn't consider the processing delay at the local sensor node. Based on a new communication constraint model with compensation for communication constraints and random delays, a recursive distributed sequential CI estimator was proposed for a sensor network in [196]. It has also been proved that this distributed estimator guarantees probabilistically bounded estimation errors under a delay-dependent and probability-dependent condition. Assuming that the number of communication delay frames is subject to a known probability mass function, Xing and Xia [197] derived an suboptimal distributed federated Kalman filter using sequential CI fusion rule with the help of a finite length buffers to accommodate the measurement delay. One major drawback of the aforementioned asynchronous fusion algorithms is that they are not suitable for a generic network topology due to the nature of sequential fusion.Based on projection theory and induction hypothesis, a distributed fusion algorithm was proposed in [190] for two sensors with different sampling rates. This algorithm was also theoretically proven to be optimal in the sense of MMSE. Similar to sequential SVF, this approach can also be extended to multiple sensor distributed fusion in a sequential manner. Motivated by the idea of [30,31], a matrix weighted optimal, in the sense of LUMV, SVF algorithm was proposed in [191] for multiple sensors with different sampling rates. This work formulated the state space model at the measurement sampling points, thus manually synchronising local fusion. Considering the local sensor node has higher sampling rate than the information exchange rate among the sensor nodes, the authors of [192] developed a sequential fusion algorithms using lifting technique [193], which models the multi-rate estimation system as single-sampling-rate system with multiple stochastic parameters. For a sensor network with non-uniform estimation rates, Zhang et al. [194] proposed a matrix weighted fusion algorithm using innovation analysis and lifting technique. A set of recursive equations to compute the estimation error cross-covariance were also presented to support the implementation. Zhu et al. [195] suggested a sequential asynchronous fusion algorithms for target tracking in a wireless sensor network by a newly-introduced concept, called to-be-estimated state, which utilises each sensor's own state and most recently-received measurements for update. The limitation of this algorithm is that it didn't consider the processing delay at the local sensor node. Based on a new communication constraint model with compensation for communication constraints and random delays, a recursive distributed sequential CI estimator was proposed for a sensor network in [196]. It has also been proved that this distributed estimator guarantees probabilistically bounded estimation errors under a delay-dependent and probability-dependent condition. Assuming that the number of communication delay frames is subject to a known probability mass function, Xing and Xia [197] derived an suboptimal distributed federated Kalman filter using sequential CI fusion rule with the help of a finite length buffers to accommodate the measurement delay. One major drawback of the aforementioned asynchronous fusion algorithms is that they are not suitable for a generic network topology due to the nature of sequential fusion.</p>
        <p>With reference to more recent consensus-based distributed Kalman filters, Ref. [198] analysed the asymptotic stability of KCF in the presence of random communication delays. The problem is posed in terms of linear matrix inequalities (LMIs) and the maximum permissible upper bound of the communication delay can be obtained by solving the LMIs. Following similar approach of [198], the author of [199] analysed the stochastic stability of KCF by leveraging a Markov chain with known transition probability to model the network-induced delays. The main issue related to consensus-based distributed Kalman filters with communication delay is that the consensus process becomes unstable when the delay is larger than a threshold [200,201]. For this reason, the consensus gain should be carefully tuned to guarantee the stability of the consensus process.With reference to more recent consensus-based distributed Kalman filters, Ref. [198] analysed the asymptotic stability of KCF in the presence of random communication delays. The problem is posed in terms of linear matrix inequalities (LMIs) and the maximum permissible upper bound of the communication delay can be obtained by solving the LMIs. Following similar approach of [198], the author of [199] analysed the stochastic stability of KCF by leveraging a Markov chain with known transition probability to model the network-induced delays. The main issue related to consensus-based distributed Kalman filters with communication delay is that the consensus process becomes unstable when the delay is larger than a threshold [200,201]. For this reason, the consensus gain should be carefully tuned to guarantee the stability of the consensus process.</p>
        <p>By assuming that the random communication delay satisfies a Bernoulli distribution, a distributed estimator for sensor networks using jump Markovian system theory was proposed in [202], where each mode represents one possible time delay. The asynchronous implementation of the CDTT algorithm [85] for networks of sensors with random communication delays and possibly time-variant clocks was proposed in [203] by leveraging an asynchronous max-consensus algorithm. The basic assumption made in this work is that the time interval between two consecutive updates of each local sensor node is not arbitrarily long, which is also known as the partial asynchronous assumption [204]. Because the tracking algorithm, proposed in [203],By assuming that the random communication delay satisfies a Bernoulli distribution, a distributed estimator for sensor networks using jump Markovian system theory was proposed in [202], where each mode represents one possible time delay. The asynchronous implementation of the CDTT algorithm [85] for networks of sensors with random communication delays and possibly time-variant clocks was proposed in [203] by leveraging an asynchronous max-consensus algorithm. The basic assumption made in this work is that the time interval between two consecutive updates of each local sensor node is not arbitrarily long, which is also known as the partial asynchronous assumption [204]. Because the tracking algorithm, proposed in [203],</p>
        <p>never fuses local information of the sensors, it does not reduce the uncertainty on the estimate. Assuming that the relative measurement receiving offset between two sensors is known, the authors of [205] presented an average consensus-based asynchronous filter (ACAF), which can be considered as an asynchronous implementation of ICF. ACAF temporally aligns the data in the same time scale, depending on the known reception instants of local estimates, before performing fusion. More specifically, once a local sensor node receives its neighbour's information, it stores the received information and its corresponding reception time instant in a buffer. During the fusion process, each sensor node predicts the target state of other nodes based on the received information along with its time instant. Each local sensor node fuses the temporally-aligned local measurements and the predicted target information using ICF. A further improvement over ACAF was reported in [206], where both processing delay and communication delay are considered simultaneously in aligning the time instants of local estimates.never fuses local information of the sensors, it does not reduce the uncertainty on the estimate. Assuming that the relative measurement receiving offset between two sensors is known, the authors of [205] presented an average consensus-based asynchronous filter (ACAF), which can be considered as an asynchronous implementation of ICF. ACAF temporally aligns the data in the same time scale, depending on the known reception instants of local estimates, before performing fusion. More specifically, once a local sensor node receives its neighbour's information, it stores the received information and its corresponding reception time instant in a buffer. During the fusion process, each sensor node predicts the target state of other nodes based on the received information along with its time instant. Each local sensor node fuses the temporally-aligned local measurements and the predicted target information using ICF. A further improvement over ACAF was reported in [206], where both processing delay and communication delay are considered simultaneously in aligning the time instants of local estimates.</p>
        <p>Table 10 summarises the representative distributed estimation algorithms that consider asynchronous fusion. Notice that most existing solutions require the knowledge of the delay, either the exact value or a specific model, which might be difficult for practical applications. For this reason, a more beneficial and promising solution is to dynamically estimate target states in conjunction with the random delays.Table 10 summarises the representative distributed estimation algorithms that consider asynchronous fusion. Notice that most existing solutions require the knowledge of the delay, either the exact value or a specific model, which might be difficult for practical applications. For this reason, a more beneficial and promising solution is to dynamically estimate target states in conjunction with the random delays.</p>
        <p>Except for manually enforcing time consistency among the sensor nodes, another efficient way to solve the asynchronous fusion problem is designing consensus protocols in consideration of communication delays [207,208,209]. These approaches, however, require careful adjustment of the consensus gain to guarantee the stability of the fusion process. The integration of these asynchronous consensus algorithms with existing distributed estimators, shown in Tables 3 and4, also needs further explorations.Except for manually enforcing time consistency among the sensor nodes, another efficient way to solve the asynchronous fusion problem is designing consensus protocols in consideration of communication delays [207,208,209]. These approaches, however, require careful adjustment of the consensus gain to guarantee the stability of the fusion process. The integration of these asynchronous consensus algorithms with existing distributed estimators, shown in Tables 3 and4, also needs further explorations.</p>
        <p>Sequential SVF [190] Using projection theory to fuse two local estimates with different sampling ratesSequential SVF [190] Using projection theory to fuse two local estimates with different sampling rates</p>
        <p>Sequential SVF [191] Formulating the state space model at the measurement sampling points for synchronisationSequential SVF [191] Formulating the state space model at the measurement sampling points for synchronisation</p>
        <p>Sequential SVF [192,194] Modelling the multi-rate estimation system as a single-sampling-rate system for synchronisation Sequential SVF [195] Utilising the most recently-received measurements in fusionSequential SVF [192,194] Modelling the multi-rate estimation system as a single-sampling-rate system for synchronisation Sequential SVF [195] Utilising the most recently-received measurements in fusion</p>
        <p>Sequential CI [196] Establishing a new communication constraint model with compensation for random delays Sequential CI [198] Using finite length buffers to accommodate the measurement delay KCF [197,199] Finding the upper bound of communication delay using LMI KCF [202] Modelling the communication delay as a known Bernoulli distribution CDTT [203] Modifying CDTT using asynchronous max-consensus algorithm ICF [205,206] Manually aligning the data in the same time scale before performing fusionSequential CI [196] Establishing a new communication constraint model with compensation for random delays Sequential CI [198] Using finite length buffers to accommodate the measurement delay KCF [197,199] Finding the upper bound of communication delay using LMI KCF [202] Modelling the communication delay as a known Bernoulli distribution CDTT [203] Modifying CDTT using asynchronous max-consensus algorithm ICF [205,206] Manually aligning the data in the same time scale before performing fusion</p>
        <p>In a wireless sensor network, local information is exchanged in a multi-hop structure. This means that the fusion performance is heavily dependent on the reliability of communication links. Unfortunately, lowcost sensor networks might experience some undesirable communication disturbances, e.g., communication noises and communication loss/failures, induced by multipath fading, signal attenuation, background noise, external block, etc [210]. These unexpected factors will obviously degrade the fusion performance among the sensor nodes. Up to now, most existing solutions to unreliable communication link model this effect as a random process. More specifically, the noisy data transmitted from local sensor node i to node j is modelled as [211] xIn a wireless sensor network, local information is exchanged in a multi-hop structure. This means that the fusion performance is heavily dependent on the reliability of communication links. Unfortunately, lowcost sensor networks might experience some undesirable communication disturbances, e.g., communication noises and communication loss/failures, induced by multipath fading, signal attenuation, background noise, external block, etc [210]. These unexpected factors will obviously degrade the fusion performance among the sensor nodes. Up to now, most existing solutions to unreliable communication link model this effect as a random process. More specifically, the noisy data transmitted from local sensor node i to node j is modelled as [211] x</p>
        <p>where the communication failure λ k,ij is modelled as a random binary variable (1 and 0), usually subject to a known Bernoulli distribution or generated from a pre-determined Markovian chain. The random variable λ k,ij takes value 1 for successful communication between sensor nodes i and j, and 0 for sudden link failure.where the communication failure λ k,ij is modelled as a random binary variable (1 and 0), usually subject to a known Bernoulli distribution or generated from a pre-determined Markovian chain. The random variable λ k,ij takes value 1 for successful communication between sensor nodes i and j, and 0 for sudden link failure.</p>
        <p>Except for communication link failure, the communication noise η k,i is also considered to accommodate the communication disturbances and uncertainties.Except for communication link failure, the communication noise η k,i is also considered to accommodate the communication disturbances and uncertainties.</p>
        <p>One fundamental question to be answered for network-wide cooperative estimation under unreliable communication links is that whether or not the estimation process is stable, i.e., the error covariance is uniformly bounded or upper bounded by a constant. With known probability of data link failure, Deshmukh et al. [211] derived the stochastic stability condition of the centralised Kalman filter for a sensor network.One fundamental question to be answered for network-wide cooperative estimation under unreliable communication links is that whether or not the estimation process is stable, i.e., the error covariance is uniformly bounded or upper bounded by a constant. With known probability of data link failure, Deshmukh et al. [211] derived the stochastic stability condition of the centralised Kalman filter for a sensor network.</p>
        <p>The stochastic stability is given by a bounded region that is defined as the critical probabilities of receiving measurements on individual communication links. By modelling the data link failure as a Bernoulli process, the stochastic stability of KCF with unreliable network was analysed in [212], where the theoretical bound on link failure rate, that guarantees the convergence of the filter, was derived. Assuming that the the link failures are known at the receiving side, Liu et al. [213] analysed the performance of CIKF and derived sufficient conditions that ensure the boundedness of the estimation error covariance. The results revealed that the estimation error covariance of CIKF is stochastically bounded when the system is collectively observable and the sensor network topology satisfies certain conditions.The stochastic stability is given by a bounded region that is defined as the critical probabilities of receiving measurements on individual communication links. By modelling the data link failure as a Bernoulli process, the stochastic stability of KCF with unreliable network was analysed in [212], where the theoretical bound on link failure rate, that guarantees the convergence of the filter, was derived. Assuming that the the link failures are known at the receiving side, Liu et al. [213] analysed the performance of CIKF and derived sufficient conditions that ensure the boundedness of the estimation error covariance. The results revealed that the estimation error covariance of CIKF is stochastically bounded when the system is collectively observable and the sensor network topology satisfies certain conditions.</p>
        <p>Generally, the overall tracking performance of distributed estimators largely depends on the reliability of the underlying data exchange link. When the failure sequence is unknown at the receiving side, the authors of [214] extended CIKF to the case of unreliable networks by introducing a failure detection strategy: each local sensor node is endowed with a detector to inspect possible link failures before performing the consensus process. The authors of [215] suggested a variant of CMKF for sensor networks with random communication failures and the Kalman gain was also optimised to minimise the error covariance. As a result of the link loss/failure, the steady-state value of the average consensus process becomes a random variable. Under this condition, it is shown that the algorithm, proposed in [215], provides unbiased estimations.Generally, the overall tracking performance of distributed estimators largely depends on the reliability of the underlying data exchange link. When the failure sequence is unknown at the receiving side, the authors of [214] extended CIKF to the case of unreliable networks by introducing a failure detection strategy: each local sensor node is endowed with a detector to inspect possible link failures before performing the consensus process. The authors of [215] suggested a variant of CMKF for sensor networks with random communication failures and the Kalman gain was also optimised to minimise the error covariance. As a result of the link loss/failure, the steady-state value of the average consensus process becomes a random variable. Under this condition, it is shown that the algorithm, proposed in [215], provides unbiased estimations.</p>
        <p>Table 11 summarises the existing distributed estimation algorithms that are applicable to scenarios with unreliable communication link. Notice that most existing works utilise the Markovian chain or Bernoulli process, that is specified by a failure probability, to describe the link loss/failure. However, it is difficult to obtain the full statistics for these models due to the random nature of link failure. For this reason, one promising research direction in this domain is to leverage the random communication graph/topology in design and analysis of distributed estimation algorithms [216,217,218].Table 11 summarises the existing distributed estimation algorithms that are applicable to scenarios with unreliable communication link. Notice that most existing works utilise the Markovian chain or Bernoulli process, that is specified by a failure probability, to describe the link loss/failure. However, it is difficult to obtain the full statistics for these models due to the random nature of link failure. For this reason, one promising research direction in this domain is to leverage the random communication graph/topology in design and analysis of distributed estimation algorithms [216,217,218].</p>
        <p>As the information exchange among local sensor nodes usually involves unknown noise, Garulli andAs the information exchange among local sensor nodes usually involves unknown noise, Garulli and</p>
        <p>Giannitrapani [219] analysed the performance of average consensus with noisy communication. The results in this work reveal that the information discrepancy among local sensor nodes is bounded, but asymptotic convergence is lost, resulting in a bias error. To resolve the bias-variance dilemma induced by noisy consensus, two new average consensus algorithms, termed as A -N D and A -N C were proposed in [220] for networks with intermittent links and noisy channels. Li et al. [221] extended [220] to a more practical case that considers both multiplicative and additive communication disturbances. Using the random communication link model shown in Eq. ( 25), the authors of [222] proposed a distributed parameter estimation algorithm for unreliable networks in both discrete-time and continuous-time domains. Even though consensus algorithms [220,221,222] are appealing to perform average consensus in an unreliable network, how to integrate them with existing consensus-based distributed Kalman filters still remains open and needs further explorations. Fusion strategy Reference Approach KCF [212] Finding the theoretical bound on link failure rate CIKF [213] Finding the stochastically stable condition of CIKF CIKF [214] Embedding a failure detection strategy into CIKF CMKF [215] Optimising the Kalman gain to reduce estimation uncertaintyGiannitrapani [219] analysed the performance of average consensus with noisy communication. The results in this work reveal that the information discrepancy among local sensor nodes is bounded, but asymptotic convergence is lost, resulting in a bias error. To resolve the bias-variance dilemma induced by noisy consensus, two new average consensus algorithms, termed as A -N D and A -N C were proposed in [220] for networks with intermittent links and noisy channels. Li et al. [221] extended [220] to a more practical case that considers both multiplicative and additive communication disturbances. Using the random communication link model shown in Eq. ( 25), the authors of [222] proposed a distributed parameter estimation algorithm for unreliable networks in both discrete-time and continuous-time domains. Even though consensus algorithms [220,221,222] are appealing to perform average consensus in an unreliable network, how to integrate them with existing consensus-based distributed Kalman filters still remains open and needs further explorations. Fusion strategy Reference Approach KCF [212] Finding the theoretical bound on link failure rate CIKF [213] Finding the stochastically stable condition of CIKF CIKF [214] Embedding a failure detection strategy into CIKF CMKF [215] Optimising the Kalman gain to reduce estimation uncertainty</p>
        <p>It is known that the data quality of low-cost sensors is a concern because the sensing hardware of such sensors is generally characterised by reduced accuracy and reliability. Additionally, sensors drift from their initial factory calibration during the lifetime or due to environmental changes, e.g., temperature, humidity, etc. For these reasons, the measurements generated by low-cost sensors might not be useful or can even be misleading. Therefore, obtaining high-quality data through sensor calibration, also known as sensor registration, is of paramount importance when employing low-cost sensors in real applications. In sensor calibration, the generalised sensor measurement model is given byIt is known that the data quality of low-cost sensors is a concern because the sensing hardware of such sensors is generally characterised by reduced accuracy and reliability. Additionally, sensors drift from their initial factory calibration during the lifetime or due to environmental changes, e.g., temperature, humidity, etc. For these reasons, the measurements generated by low-cost sensors might not be useful or can even be misleading. Therefore, obtaining high-quality data through sensor calibration, also known as sensor registration, is of paramount importance when employing low-cost sensors in real applications. In sensor calibration, the generalised sensor measurement model is given by</p>
        <p>Typically, sensor calibration can be framed as a parameter estimation or identification problem. In the single sensor case, online sensor calibration is well-established by simply augmenting the system state x k,i with α k,i and β k,i . However, achieving good quality of the measurement data in a sensor network, especially in a distributed way, is challenging since individual calibration of a large-scale sensor network could be cumbersome and cost prohibitive. For this reason, sensor network calibration demands a new methodology.Typically, sensor calibration can be framed as a parameter estimation or identification problem. In the single sensor case, online sensor calibration is well-established by simply augmenting the system state x k,i with α k,i and β k,i . However, achieving good quality of the measurement data in a sensor network, especially in a distributed way, is challenging since individual calibration of a large-scale sensor network could be cumbersome and cost prohibitive. For this reason, sensor network calibration demands a new methodology.</p>
        <p>Currently, most network-level sensor calibration algorithms are limited to the centralised solution. For example, the authors in [223,224] framed network calibration as a general parameter estimation problem. For each local node, the parameter is calibrated by numerically optimising the overall network-wide response.Currently, most network-level sensor calibration algorithms are limited to the centralised solution. For example, the authors in [223,224] framed network calibration as a general parameter estimation problem. For each local node, the parameter is calibrated by numerically optimising the overall network-wide response.</p>
        <p>However, this algorithm suffers from the problem numerical complexity and is only applicable to certain network topologies where the calibration parameters are actually over-constrained. For densely-connected networks, the authors of [225] suggested a cooperative calibration scheme by exploiting the redundancies of local measurements among locally-connected sensors. To relax the assumption on dense networks, a centralised blind calibration algorithm was proposed in [226] to recover the scaling error and offset. The benefit of blind calibration is that it never relies on controlled stimuli input or high-fidelity ground-truth data.However, this algorithm suffers from the problem numerical complexity and is only applicable to certain network topologies where the calibration parameters are actually over-constrained. For densely-connected networks, the authors of [225] suggested a cooperative calibration scheme by exploiting the redundancies of local measurements among locally-connected sensors. To relax the assumption on dense networks, a centralised blind calibration algorithm was proposed in [226] to recover the scaling error and offset. The benefit of blind calibration is that it never relies on controlled stimuli input or high-fidelity ground-truth data.</p>
        <p>By modelling the spatio-temporal correlation of neighbouring sensors using support vector regression, the authors of [227] suggested a dynamic network calibration algorithm based on UKF. However, this approach can only estimate the sensor offset and has no measure to counteract the error of scaling factor. Notice that most previously-mentioned centralised algorithms formulate sensor network calibration as a constrained optimisation problem, i.e., find the calibration parameters that maximise the system performance. A potential extension of these results to distributed calibration is to use recently-developed distributed optimisation algorithms. For example, we could utilise distributed convex optimisation approaches [228,229,230,231] to solve the optimisation problem formulated in [232] for sensor network calibration.By modelling the spatio-temporal correlation of neighbouring sensors using support vector regression, the authors of [227] suggested a dynamic network calibration algorithm based on UKF. However, this approach can only estimate the sensor offset and has no measure to counteract the error of scaling factor. Notice that most previously-mentioned centralised algorithms formulate sensor network calibration as a constrained optimisation problem, i.e., find the calibration parameters that maximise the system performance. A potential extension of these results to distributed calibration is to use recently-developed distributed optimisation algorithms. For example, we could utilise distributed convex optimisation approaches [228,229,230,231] to solve the optimisation problem formulated in [232] for sensor network calibration.</p>
        <p>Assuming that the sensor network is composed of two types of sensors, namely calibrated and uncalibrated, Miluzzo et al. [233] proposed a distributed and scalable protocol to automatically calibrate the imperfect sensors. However, the assumption on the availability of ground truth nodes is too strong and the algorithm developed is therefore unsuitable for a general sensor network. By treating sensor calibration as a parameter estimation problem, a consensus-based distributed least-square parameter identification algorithm was proposed in [234]. The limitation of this approach is that it requires a reference sensor node and therefore is not generic. Naturally, significant interests are approaches for distributed sensor network calibration without referring to any reference nodes or external signals. These potentially important calibration techniques are normally called as blind calibration. Under the condition that there is no measurement noise, e.g., v k,i = 0, the authors of [235,236] suggested a distributed sensor network calibration algorithm using standard consensus protocols [36]. The idea in this work is to find the equivalent scaling factor and offset instead of calibrating the original bias. The final calibration rule was given by a distributed gradient-type recursive form, which ensures that all equivalent scaling factors and offsets converge to the same values asymptotically. The corrected sensor output y k,i , also known as the affine calibration function, is defined asAssuming that the sensor network is composed of two types of sensors, namely calibrated and uncalibrated, Miluzzo et al. [233] proposed a distributed and scalable protocol to automatically calibrate the imperfect sensors. However, the assumption on the availability of ground truth nodes is too strong and the algorithm developed is therefore unsuitable for a general sensor network. By treating sensor calibration as a parameter estimation problem, a consensus-based distributed least-square parameter identification algorithm was proposed in [234]. The limitation of this approach is that it requires a reference sensor node and therefore is not generic. Naturally, significant interests are approaches for distributed sensor network calibration without referring to any reference nodes or external signals. These potentially important calibration techniques are normally called as blind calibration. Under the condition that there is no measurement noise, e.g., v k,i = 0, the authors of [235,236] suggested a distributed sensor network calibration algorithm using standard consensus protocols [36]. The idea in this work is to find the equivalent scaling factor and offset instead of calibrating the original bias. The final calibration rule was given by a distributed gradient-type recursive form, which ensures that all equivalent scaling factors and offsets converge to the same values asymptotically. The corrected sensor output y k,i , also known as the affine calibration function, is defined as</p>
        <p>where the equivalent scaling factor g k,i and additive offset f k,i are determined aswhere the equivalent scaling factor g k,i and additive offset f k,i are determined as</p>
        <p>In presence of additive measurement noise, it was shown in [237] that the gradient algorithm proposed in [235,236] is not applicable. To solve this problem, Stanković et al. [237] developed a new instrumental variable type recursive algorithm for distributed sensor network calibration. Theoretical analysis reveals that all equivalent scaling factors and offsets converge to the same values asymptotically in the mean square sense and with probability one. An extension of [237] was reported in [238], where the authors presented a more flexible distributed sensor network calibration algorithm. This approach provides much faster convergence rate when the sensor network has one reference node, i.e., calibrated node. However, this does not mean the algorithm developed in [238] requires ground truth nodes in calibration.In presence of additive measurement noise, it was shown in [237] that the gradient algorithm proposed in [235,236] is not applicable. To solve this problem, Stanković et al. [237] developed a new instrumental variable type recursive algorithm for distributed sensor network calibration. Theoretical analysis reveals that all equivalent scaling factors and offsets converge to the same values asymptotically in the mean square sense and with probability one. An extension of [237] was reported in [238], where the authors presented a more flexible distributed sensor network calibration algorithm. This approach provides much faster convergence rate when the sensor network has one reference node, i.e., calibrated node. However, this does not mean the algorithm developed in [238] requires ground truth nodes in calibration.</p>
        <p>Table 12 summarises the existing main works of distributed sensor network calibration algorithms. As algorithms [235,236,237,238] all considered the sensor calibration problem separately from target estimation, it is unclear how they will affect the target tracking algorithm when we tackle target tracking and sensor calibration problems in an integrated manner. The preliminary work on the integration issue was found in [239], where joint target tracking and sensor network calibration was formulated as a Bayesian in-ference problem. However, this framework only considers sensor offset and analytic solution of the Bayesian inference problem is practically intractable.Table 12 summarises the existing main works of distributed sensor network calibration algorithms. As algorithms [235,236,237,238] all considered the sensor calibration problem separately from target estimation, it is unclear how they will affect the target tracking algorithm when we tackle target tracking and sensor calibration problems in an integrated manner. The preliminary work on the integration issue was found in [239], where joint target tracking and sensor network calibration was formulated as a Bayesian in-ference problem. However, this framework only considers sensor offset and analytic solution of the Bayesian inference problem is practically intractable.</p>
        <p>Reference Approach Sensor network with reference nodes [233,234] Average consensus to the reference nodes Sensor network without measurement noise [235,236] Gradient-type recursive consensus to the equivalent scaling factor and additive offset Generic sensor network [237,238] Instrumental-variable-type recursive consensus to the equivalent scaling factor and additive offsetReference Approach Sensor network with reference nodes [233,234] Average consensus to the reference nodes Sensor network without measurement noise [235,236] Gradient-type recursive consensus to the equivalent scaling factor and additive offset Generic sensor network [237,238] Instrumental-variable-type recursive consensus to the equivalent scaling factor and additive offset</p>
        <p>As stated before, sensor nodes of low-cost sensor networks are generally battery powered and are difficult to be recharged or replaced in some harsh environments, e.g., battlefields, disaster areas. For this reason, developing proper sensor scheduling or activation algorithms to save energy is of paramount importance for low-cost sensor networks. Unfortunately, energy efficiency and estimation performance are two conflict requirements of low-cost sensor network: if the energy consumption is reduced, the quality of the estimations is highly likely to be negatively influenced [245]. For example, if some sensor nodes are forced to be sleeping to enhance the energy efficiency, the network coverage will be definitely lowered and this, in turn, will result in the reduction of information gain. Therefore, the main purpose of sensor scheduling is to dynamically allocate the energy to a subset of sensor nodes to enhance energy efficiency with limited tracking performance loss.As stated before, sensor nodes of low-cost sensor networks are generally battery powered and are difficult to be recharged or replaced in some harsh environments, e.g., battlefields, disaster areas. For this reason, developing proper sensor scheduling or activation algorithms to save energy is of paramount importance for low-cost sensor networks. Unfortunately, energy efficiency and estimation performance are two conflict requirements of low-cost sensor network: if the energy consumption is reduced, the quality of the estimations is highly likely to be negatively influenced [245]. For example, if some sensor nodes are forced to be sleeping to enhance the energy efficiency, the network coverage will be definitely lowered and this, in turn, will result in the reduction of information gain. Therefore, the main purpose of sensor scheduling is to dynamically allocate the energy to a subset of sensor nodes to enhance energy efficiency with limited tracking performance loss.</p>
        <p>Deterministic and probabilistic target trajectory prediction techniques are the most popular approaches in sensor scheduling to improve energy efficiency for sensor networks [240,241,242,243,244,245,246].Deterministic and probabilistic target trajectory prediction techniques are the most popular approaches in sensor scheduling to improve energy efficiency for sensor networks [240,241,242,243,244,245,246].</p>
        <p>Deterministic approaches, e.g., [240,241,242], usually leverage a fixed kinematics model to predict target's future trajectory and use distance-based rule to active the sensor node, i.e., if the distance between the predicted target's location and a sensor node is lower than a given threshold, this sensor node is activated.Deterministic approaches, e.g., [240,241,242], usually leverage a fixed kinematics model to predict target's future trajectory and use distance-based rule to active the sensor node, i.e., if the distance between the predicted target's location and a sensor node is lower than a given threshold, this sensor node is activated.</p>
        <p>Different from [240,241,242], a deterministic optimisation problem is formulated in [243] to optimally activate the sensor nodes. Apart from the sensor index, this algorithm also finds the optimal sampling interval for each local node given specified predicted tracking accuracy. Notice that the information on true target position is not available to local sensor nodes in practical applications. This means that deterministic predictions are usually subject to certain amount of errors. These prediction errors also accumulate as time goes. Therefore, it more desirable to utilise probabilistic Bayesian inference approaches to activate local sensor nodes. Unlike the deterministic predictions, probabilistic methods, e.g., [244,245,246], additionally consider the possibilities of target movement and/or target detection. The local sensor nodes are then activated using Bayesian inference. For example, the probabilistic information-driven approach, proposed in [244], schedules sensor nodes by maximising the information gain while minimising the energy consumption given a predesigned target detection model. In [245], a probability-based prediction and sleep scheduling (PPSS) algorithm is proposed to improve energy efficiency of sensor networks in target tracking. Both fixed kinematics model and theory of probability are leveraged to predict target position in PPSS. Based on the prediction results, PPSS activates several local sensors nodes and reduces their activation time, so as to improve the energy efficiency with a relatively small sacrifice on the estimation performance. To prolong the life time of a sensor network, the authors of [246] optimised the energy consumption considering a α-k-coverage constraint. This constraint guarantees that the target trajectory is covered by at least k sensors with at least α probability. Although these deterministic and probabilistic approaches are proved to be effective in enhancing energy efficiency for sensor networks, most of them are dedicated for centralised estimation.Different from [240,241,242], a deterministic optimisation problem is formulated in [243] to optimally activate the sensor nodes. Apart from the sensor index, this algorithm also finds the optimal sampling interval for each local node given specified predicted tracking accuracy. Notice that the information on true target position is not available to local sensor nodes in practical applications. This means that deterministic predictions are usually subject to certain amount of errors. These prediction errors also accumulate as time goes. Therefore, it more desirable to utilise probabilistic Bayesian inference approaches to activate local sensor nodes. Unlike the deterministic predictions, probabilistic methods, e.g., [244,245,246], additionally consider the possibilities of target movement and/or target detection. The local sensor nodes are then activated using Bayesian inference. For example, the probabilistic information-driven approach, proposed in [244], schedules sensor nodes by maximising the information gain while minimising the energy consumption given a predesigned target detection model. In [245], a probability-based prediction and sleep scheduling (PPSS) algorithm is proposed to improve energy efficiency of sensor networks in target tracking. Both fixed kinematics model and theory of probability are leveraged to predict target position in PPSS. Based on the prediction results, PPSS activates several local sensors nodes and reduces their activation time, so as to improve the energy efficiency with a relatively small sacrifice on the estimation performance. To prolong the life time of a sensor network, the authors of [246] optimised the energy consumption considering a α-k-coverage constraint. This constraint guarantees that the target trajectory is covered by at least k sensors with at least α probability. Although these deterministic and probabilistic approaches are proved to be effective in enhancing energy efficiency for sensor networks, most of them are dedicated for centralised estimation.</p>
        <p>Compared to centralised algorithms, there are few, however, sensor scheduling approaches for distributed estimation. The authors of [247] introduced a stochastic sensor activation strategy to improve the energy efficiency of sensor networks for distributed target tracking. The activation of each sensor node is modelled by a random binary variable, which is subject to a known Bernoulli distribution. Under this probabilistic scheduling framework, the optimal Kalman gain of KCF was analytically derived and the stochastic stability of this new algorithm was also analysed. The results revealed that the consensus gain and the lower bound of the activation probability are critical parameters that determine the stability of this distributed estimation algorithm. Although the stochastic sensor activation scheme, developed in [247], is easy to implement in practice, all sensor nodes are subject to the same activation distribution. This might be impractical in some scenarios, especially when utilising heterogeneous sensors. In order to address this problem, a new probabilistic sensor activation scheme was recently proposed in [248], which models the activation distribution of each sensor with individual energy constraint. By embedding this sensor scheduling approach into KCF, the authors derived the optimal Kalman gain and analysed the stochastic stability of KCF. As the activation probability poses great impact on the estimation performance, a convex optimisation problem was also formulated to optimise the activation probability by minimising the estimation uncertainty while subject to the energy budget. Unlike [247,248], one recent work [249] leveraged the dynamic cluster concept in KCF to reduce the energy consumption of sensor networks. This concept closely resembles previous trajectory prediction approaches: sensor nodes are activated by the distance between their locations and the target.Compared to centralised algorithms, there are few, however, sensor scheduling approaches for distributed estimation. The authors of [247] introduced a stochastic sensor activation strategy to improve the energy efficiency of sensor networks for distributed target tracking. The activation of each sensor node is modelled by a random binary variable, which is subject to a known Bernoulli distribution. Under this probabilistic scheduling framework, the optimal Kalman gain of KCF was analytically derived and the stochastic stability of this new algorithm was also analysed. The results revealed that the consensus gain and the lower bound of the activation probability are critical parameters that determine the stability of this distributed estimation algorithm. Although the stochastic sensor activation scheme, developed in [247], is easy to implement in practice, all sensor nodes are subject to the same activation distribution. This might be impractical in some scenarios, especially when utilising heterogeneous sensors. In order to address this problem, a new probabilistic sensor activation scheme was recently proposed in [248], which models the activation distribution of each sensor with individual energy constraint. By embedding this sensor scheduling approach into KCF, the authors derived the optimal Kalman gain and analysed the stochastic stability of KCF. As the activation probability poses great impact on the estimation performance, a convex optimisation problem was also formulated to optimise the activation probability by minimising the estimation uncertainty while subject to the energy budget. Unlike [247,248], one recent work [249] leveraged the dynamic cluster concept in KCF to reduce the energy consumption of sensor networks. This concept closely resembles previous trajectory prediction approaches: sensor nodes are activated by the distance between their locations and the target.</p>
        <p>Table 13 summarises the existing distributed estimation algorithms that consider energy constraint.Table 13 summarises the existing distributed estimation algorithms that consider energy constraint.</p>
        <p>Following similar activation schemes as [247,248,249], we can develop more advanced distributed target tracking algorithms by using more powerful fusion strategies, e.g., ICF, CIKF, gossip process. However, the performance and stability analysis need to be carefully analysed to support practical applications. Fusion strategy Reference Approach KCF [247] All sensors are activated by a Bernoulli distribution KCF [248] Each sensor is activated by an individual Bernoulli distribution subject to its own energy constraint KCF [249] Each sensor is activated by the distance to the targetFollowing similar activation schemes as [247,248,249], we can develop more advanced distributed target tracking algorithms by using more powerful fusion strategies, e.g., ICF, CIKF, gossip process. However, the performance and stability analysis need to be carefully analysed to support practical applications. Fusion strategy Reference Approach KCF [247] All sensors are activated by a Bernoulli distribution KCF [248] Each sensor is activated by an individual Bernoulli distribution subject to its own energy constraint KCF [249] Each sensor is activated by the distance to the target</p>
        <p>Based on the literature reviewed, it is clear that the research on distributed estimation, especially for low-cost sensor networks, is gaining dramatically increasing attention. As we pointed out in the previous two sections, various theoretical gaps and practical challenges still remain open and require further explorations. Considering these facts, future research will potentially emphasise theoretical analysis, modelling and integration issues at various levels. To this end, there are a number of potential research venues that will most likely be highly active in the near future as follows:Based on the literature reviewed, it is clear that the research on distributed estimation, especially for low-cost sensor networks, is gaining dramatically increasing attention. As we pointed out in the previous two sections, various theoretical gaps and practical challenges still remain open and require further explorations. Considering these facts, future research will potentially emphasise theoretical analysis, modelling and integration issues at various levels. To this end, there are a number of potential research venues that will most likely be highly active in the near future as follows:</p>
        <p>(1) Performance and stochastic stability analysis of existing distributed estimators, e.g., KCF, DKF, etc, with multiple low-cost-sensor-network-induced issues, as described in Sec. 5, is a clear bottleneck. The main challenge of this problem is to find a proper mathematical model that can capture or describe several low-cost-sensor-network-induced issues in an integrated form. In practice, theoretical analysis of stochastic stability is important in ensuring confidence in the performance and reliability of the estimation algorithm, especially for some safety-critical applications such as autonomous driving.(1) Performance and stochastic stability analysis of existing distributed estimators, e.g., KCF, DKF, etc, with multiple low-cost-sensor-network-induced issues, as described in Sec. 5, is a clear bottleneck. The main challenge of this problem is to find a proper mathematical model that can capture or describe several low-cost-sensor-network-induced issues in an integrated form. In practice, theoretical analysis of stochastic stability is important in ensuring confidence in the performance and reliability of the estimation algorithm, especially for some safety-critical applications such as autonomous driving.</p>
        <p>(2) Robust fusion that resolves several low-cost-sensor-network-induced issues in a unified manner is an especially difficult and challenging research direction. The main challenge stems from the coupling effect between information exchange and low-cost-sensor-network-induced phenomena. It is known that there exists a tradeoff between the overall estimation performance and several low-cost sensor network related issues. How to properly address this dilemma and find a well-balanced tradeoff becomes the key enabler of successful deployment of multiple low-cost robots in a surveillance mission, especially when localising a high-value target.(2) Robust fusion that resolves several low-cost-sensor-network-induced issues in a unified manner is an especially difficult and challenging research direction. The main challenge stems from the coupling effect between information exchange and low-cost-sensor-network-induced phenomena. It is known that there exists a tradeoff between the overall estimation performance and several low-cost sensor network related issues. How to properly address this dilemma and find a well-balanced tradeoff becomes the key enabler of successful deployment of multiple low-cost robots in a surveillance mission, especially when localising a high-value target.</p>
        <p>(3) As stated before, there is a significant conflict between the fusion performance and communication requirement, i.e., if we force to reduce the communication burden, the quality of the fusion performance will be highly likely to be negatively affected. For this reason, developing distributed fusion algorithms that achieve reasonable performance but with significantly reduced communication cost is still an interesting and challenging topic. Notice that reducing the communication burden is of paramount importance for smallscale robots due to their physical constraints. From the discussions of Sec. 3, it seems that incorporating the sample greedy gossip process with proper fusion rules could be a potential solution: if enough resource is available for communication, then a higher sensor activation probability can be chosen to increase the convergence rate; otherwise, a relatively small value of sensor activation probability is desirable.(3) As stated before, there is a significant conflict between the fusion performance and communication requirement, i.e., if we force to reduce the communication burden, the quality of the fusion performance will be highly likely to be negatively affected. For this reason, developing distributed fusion algorithms that achieve reasonable performance but with significantly reduced communication cost is still an interesting and challenging topic. Notice that reducing the communication burden is of paramount importance for smallscale robots due to their physical constraints. From the discussions of Sec. 3, it seems that incorporating the sample greedy gossip process with proper fusion rules could be a potential solution: if enough resource is available for communication, then a higher sensor activation probability can be chosen to increase the convergence rate; otherwise, a relatively small value of sensor activation probability is desirable.</p>
        <p>(4) Despite of its advantages, distributed estimation algorithms usually suffer from the problem of unknown auto-correlations if the number of consensus/gossip iterations is small [82]. Although this problem can be resolved by using the information of cross-covariance among local sensor nodes, the calculation itself is computationally expensive and therefore might not be a wise option for low-cost sensors. Except for leveraging cross-covariance, increasing the number of consensus/gossip iterations can also partially mitigate the autocorrelation problem. This, however, will also result in the increase of communication and computation overheads, which might be prohibitive for applications using small-scale robots. It is known that the CI rule is insensitive to unknown autocorrelations, but this approach has been proved to be conservative in terms of tracking accuracy. For this reason, integration of robust ECI [68] and ICI [69] rules with consensus/gossip algorithms is an interesting problem to be explored. Successful integration will bring significant benefits for safe and autonomous navigation in unknown urban areas.(4) Despite of its advantages, distributed estimation algorithms usually suffer from the problem of unknown auto-correlations if the number of consensus/gossip iterations is small [82]. Although this problem can be resolved by using the information of cross-covariance among local sensor nodes, the calculation itself is computationally expensive and therefore might not be a wise option for low-cost sensors. Except for leveraging cross-covariance, increasing the number of consensus/gossip iterations can also partially mitigate the autocorrelation problem. This, however, will also result in the increase of communication and computation overheads, which might be prohibitive for applications using small-scale robots. It is known that the CI rule is insensitive to unknown autocorrelations, but this approach has been proved to be conservative in terms of tracking accuracy. For this reason, integration of robust ECI [68] and ICI [69] rules with consensus/gossip algorithms is an interesting problem to be explored. Successful integration will bring significant benefits for safe and autonomous navigation in unknown urban areas.</p>
        <p>(5) Joint sensor calibration and target tracking in a distributed way is an important yet challenging problem for practical application of low-cost sensor networks. A potential way to solve this problem is to integrate the concept of 'affine calibration function' [235,236,237] with consensus or gossip based distributed Kalman filters. Notice that reliable sensor calibration is the key foundation of some passive target localisation missions. For example, when utilising strapdown sensors, the measurements are described in terms of local body frame. For the purpose of target localisation, we need to utilise the knowledge of vehicle's position and attitude in formulating the measurement model. This inevitably introduces several biases in the measurement equation due to the uncertainties of onboard GPS and IMU. This issue has already been identified in our previous project 
            <rs type="software">EuroSwarm</rs>
            <rs type="version">6</rs> .
        </p>
        <p>As a result, these potential research venues are also anticipated to motivate more extensive research on topics related to many practical applications of distributed fusion using low-cost sensor networks, such as robotics, transportation management, unmanned swarm systems.As a result, these potential research venues are also anticipated to motivate more extensive research on topics related to many practical applications of distributed fusion using low-cost sensor networks, such as robotics, transportation management, unmanned swarm systems.</p>
        <p>Distributed estimation over a low-cost sensor network is a central issue in many recent applications, especially in autonomous systems. Numerous contributions for the design of distributed estimation algorithms for a wireless sensor network have been proposed. The state-of-the-art is broad and rich, but quite fragmented. This paper presented a critical and comprehensive review of several existing and recentlydeveloped distributed fusion algorithms. Their main advantages and disadvantages are discussed in terms of global optimality, local consistency, communication burden and specific topology requirements. This provides readers deeper understanding about how to speedup capturing a given algorithm then comprehensive characterisations of that algorithm, how it complements other approaches, and how it can be integrated with them.Distributed estimation over a low-cost sensor network is a central issue in many recent applications, especially in autonomous systems. Numerous contributions for the design of distributed estimation algorithms for a wireless sensor network have been proposed. The state-of-the-art is broad and rich, but quite fragmented. This paper presented a critical and comprehensive review of several existing and recentlydeveloped distributed fusion algorithms. Their main advantages and disadvantages are discussed in terms of global optimality, local consistency, communication burden and specific topology requirements. This provides readers deeper understanding about how to speedup capturing a given algorithm then comprehensive characterisations of that algorithm, how it complements other approaches, and how it can be integrated with them.</p>
        <p>With respect to low-cost sensor networks, we have outlined several challenging aspects in distributed estimation, including miss detection, false alarm, sensor bias, limited energy, and several network-induced problems, and discussed possible solutions as well as their potential concerns. It is indeed clear from our survey that most works only consider one specific challenge issue or concentrate on the centralised solution to address the network-induced problems. Based on this exposition, it is expected that future researches in distributed estimation over a low-cost sensor network will put more emphasises on theoretical analysis, network-induced phenomenon modelling and integration issues at various levels. It is our hope for this paper to serve as a comprehensive review of recent developments in distributed low-cost sensor fusion and to provide readers a better insight into this domain and a useful step for permitting further advances.With respect to low-cost sensor networks, we have outlined several challenging aspects in distributed estimation, including miss detection, false alarm, sensor bias, limited energy, and several network-induced problems, and discussed possible solutions as well as their potential concerns. It is indeed clear from our survey that most works only consider one specific challenge issue or concentrate on the centralised solution to address the network-induced problems. Based on this exposition, it is expected that future researches in distributed estimation over a low-cost sensor network will put more emphasises on theoretical analysis, network-induced phenomenon modelling and integration issues at various levels. It is our hope for this paper to serve as a comprehensive review of recent developments in distributed low-cost sensor fusion and to provide readers a better insight into this domain and a useful step for permitting further advances.</p>
        <p>sensors, it can reduce the communication cost and computational burden, compared to other distributed fusion algorithms, as confirmed by Figs.sensors, it can reduce the communication cost and computational burden, compared to other distributed fusion algorithms, as confirmed by Figs.</p>
        <p>3 (d) and 4 (d)3 (d) and 4 (d)</p>
        <p>. With these facts in mind, it can be concluded that. With these facts in mind, it can be concluded that</p>
        <p>Notice that sensor nodes in low-cost sensor networks are usually battery powered but nodes are typically unattended because of their deployment in hazardous, hostile or remote environments. Because battery energy is limited, the use of different techniques for energy saving is needed for low-cost sensor networks.Notice that sensor nodes in low-cost sensor networks are usually battery powered but nodes are typically unattended because of their deployment in hazardous, hostile or remote environments. Because battery energy is limited, the use of different techniques for energy saving is needed for low-cost sensor networks.</p>
        <p>Notice that the algorithms discussed in this paper are not restricted to homogeneous sensory data and are applicable to heterogenous sensors, i.e., H k,i = H k,j , for i = j.Notice that the algorithms discussed in this paper are not restricted to homogeneous sensory data and are applicable to heterogenous sensors, i.e., H k,i = H k,j , for i = j.</p>
        <p>This application scenario is taken from our previous project EuroSwarm. Detailed descriptions of this project can be found at: https://www.cranfield.ac.uk/research-projects/euroswarm-developing-technology-for-uavThis application scenario is taken from our previous project EuroSwarm. Detailed descriptions of this project can be found at: https://www.cranfield.ac.uk/research-projects/euroswarm-developing-technology-for-uav</p>
        <p>https://www.cranfield.ac.uk/research-projects/euroswarm-developing-technology-for-uav.https://www.cranfield.ac.uk/research-projects/euroswarm-developing-technology-for-uav.</p>
        <p>No Yes No High Yes consensus Average KCF [42, 43, 46] No No No High No GKCF [47] No Yes No High No Gossip algorithm GDKF [49] No No Yes Medium No Diffusion DKF [56] No No Yes Low No ADKF [57] No No Yes Low No CDKF [58] No Yes Yes Low No PDKF [59] No No Yes Low No 3.2. Distributed Information Vector Fusion Kalman FilterNo Yes No High Yes consensus Average KCF [42, 43, 46] No No No High No GKCF [47] No Yes No High No Gossip algorithm GDKF [49] No No Yes Medium No Diffusion DKF [56] No No Yes Low No ADKF [57] No No Yes Low No CDKF [58] No Yes Yes Low No PDKF [59] No No Yes Low No 3.2. Distributed Information Vector Fusion Kalman Filter</p>
    </text>
</tei>
