<?xml version="1.0" encoding="UTF-8"?>
<tei xmlns="http://www.tei-c.org/ns/1.0">
    <teiHeader>
        <fileDesc xml:id="_1"/>
        <encodingDesc>
            <appInfo>
                <application version="0.8.1-SNAPSHOT" ident="GROBID" when="2024-06-24T09:34+0000">
                    <ref target="https://github.com/kermitt2/grobid">A machine learning software for extracting information from scholarly documents</ref>
                </application>
            </appInfo>
        </encodingDesc>
    </teiHeader>
    <text xml:lang="en">
        <p>Calculating solvent accessible surface areas (SASA) is a run-of-the-mill calculation in structural biology. Although there are many programs available for this calculation, there are no free-standing, open-source tools designed for easy tool-chain integration. 
            <rs type="software">FreeSASA</rs> is an open source C library for 
            <rs type="software">SASA</rs> calculations that provides both command-line and Python interfaces in addition to its C API. The library implements both Lee and Richards' and Shrake and Rupley's approximations, and is highly configurable to allow the user to control molecular parameters, accuracy and output granularity. It only depends on standard C libraries and should therefore be easy to compile and install on any platform. The library is well-documented, stable and efficient. The command-line interface can easily replace closed source legacy programs, with comparable or better accuracy and speed, and with some added functionality.
        </p>
        <p>Exposing apolar molecules to water is highly unfavorable, and minimizing the hydrophobic free energy is an important driving force in the folding of macromolecules (Finkelstein &amp; Ptitsyn, 2002). The solvent accessible surface area (SASA) of a molecule gives a measure of the contact area between molecule and solvent. Although the exact quantitative relation between surface area and free energy is elusive, the SASA can be used to compare different molecules or different conformations of the same molecule, or for example measure the surface that is buried due to oligomerization.</p>
        <p>To define the SASA, let a spherical probe represent a solvent molecule. Roll the probe over the surface of a larger molecule. The surface area traced by the center of the probe is the SASA of the larger molecule (Lee &amp; Richards, 1971). Two classical approximations are commonly used to calculate SASA: one by Lee and Richards (L&amp;R) where the surface is approximated by the outline of a set of slices (1971), and one by Shrake &amp; Rupley (1973) (S&amp;R) where the surface of each sphere is approximated by a set of test points. The SASA can be calculated to arbitrary precision by refining the resolution of both. The surface area can also be calculated analytically (Fraczkiewicz &amp; Braun, 1998), which is useful when the gradient is needed, or by various other approximations, tailored for different purposes (Cavallo et al., 2003;Drechsel et al., 2014;Sanner et al., 1996;Weiser et al., 1999;Xu &amp; Zhang, 2009).</p>
        <p>There are many tools available to calculate 
            <rs type="software">SASA</rs>. The most popular program for command line use is probably 
            <rs type="software">NACCESS</rs> (Hubbard &amp; Thornton, 1993) (freely available for academic use), which is an efficient Fortran implementation of the L&amp;R approximation. Another well-known command line tool is 
            <rs type="software">DSSP</rs>, which primarily calculates the secondary structure and hydrogen bonds of a protein structure, but provides the 
            <rs type="software">SASA</rs> as well (Touw et al., 2015) (using S&amp;R, open source). There are also some web services available, for example 
            <rs type="software">Getarea</rs>, which calculates the surface analytically (Fraczkiewicz &amp; Braun, 1998), and 
            <rs type="software">Triforce</rs> which uses a semianalytical tessellation approach (Drechsel et al., 2014) (also available for command line use). In addition, most molecular dynamics simulation packages include tools to analyze 
            <rs type="software">SASA</rs> from trajectories.
        </p>
        <p>
            <rs type="software">FreeSASA</rs> is intended to fill the same niche as 
            <rs type="software">NACCESS</rs>, and a number of other similar programs: a simple and fast command-line tool that "does one thing and does it well" and can be easily integrated into tool chains. The advantage of 
            <rs type="software">FreeSASA</rs> is that it is open source (GNU General Public License 3), and provides both C and Python APIs in addition to its command line interface. It has sensible default parameters and no obligatory configuration for casual users (the only required input is a structure), but also allows full control over all calculation parameters. Dependencies have been kept to a minimum: compilation only requires standard C and GNU libraries. The library is thread-safe, and some effort has gone into dealing gracefully with various errors. The code ships with thorough documentation, which is also available online at 
            <rs type="url">http:// freesasa.github.io/doxygen/</rs>. Although functionality and availability have been the primary motivating factors for writing this library, performance tests show that 
            <rs type="software">FreeSASA</rs> is as fast as or faster than legacy programs when run on a single CPU core. In addition, a large portion of the calculation has been parallelized, which gives significant additional speed when run on multicore processors.
        </p>
        <p>Calculations. Both S&amp;R and L&amp;R are pretty straightforward to implement, and both require first determining which atoms are in contact, and then calculating the overlap between each atom and its neighbors. Finding contacts is done using cell lists, which means the contact calculation is an O(N) operation. Both algorithms then treat each atom independently, making also the second part of the calculation O(N). In addition, this second part is trivially parallelizable.</p>
        <p>For L&amp;R, instead of slicing the whole protein in one go, each atom is sliced individually. The L&amp;R calculation is thus parameterized by the number of slices per atom, i.e. small atoms have thinner slices than large atoms.</p>
        <p>The Fibonacci spiral gives a good approximation to an even distribution of points on the sphere (Swinbank &amp; Purser, 2006), allowing efficient generation of an arbitrary number of S&amp;R test points. The cell lists provide the first of the two lattices in the double cubic lattice optimization for this algorithm (Eisenhaber et al., 1995), the second lattice (for the test points) is not implemented in 
            <rs type="software">FreeSASA</rs>, for now.
        </p>
        <p>The correctness of the implementations was tested by first inspecting the surfaces visually. In the two atom case, results were verified against analytical calculations. Another verification came from comparing the results of high precision SASA calculations using the two independent algorithms. In addition, using the L&amp;R algorithm gives identical results to NACCESS when the same resolution and atomic radii are used.</p>
        <p>Radius assignment. An important step of the calculation is assigning a radius to each atom. The default in 
            <rs type="software">FreeSASA</rs> is to use the ProtOr radii by Tsai et al. (1999). The library recognizes the 20 standard amino acids (plus Sec and Pyl), and the standard nucleotides (plus a few nonstandard ones). Tsai et al. do not mention phosphorus and selenium; these atoms are assigned a radius of 1.8 and 1.9 Ã… respectively. By default, hydrogen atoms and HETATM records are ignored in Protein Data Bank (PDB) files. If included, the library recognizes three common HETATM entries: the acetyl and NH 2 capping groups, and water, and assigns ProtOr radii to these. Otherwise the van der Waals radius of the element is used, taken from the paper by Mantina et al. (2009). For elements outside of the 44 main group elements treated by Mantina et al., or if completely different radii are desired, users can provide their own configuration.
        </p>
        <p>Users can specify their own atomic radii either through the API or by providing a configuration file. The library ships with a few sample configuration files, including one that provides a subset of the NACCESS parameterization, and one with the default ProtOr parameters. In addition, 
            <rs type="software">scripts</rs> are provided to automatically generate ProtOr configurations from PDB CONECT entries, such as those in the Chemical Component Dictionary (Westbrook et al., 2015). These can then be appended to the default configuration.
        </p>
        <p>Building the 
            <rs type="software">FreeSASA</rs> library and command-line interface only requires standard C and GNU libraries and a C99-compliant compiler, and should be straightforward on any 
            <rs type="software">UNIX</rs> system (has been tested in Mac OS X 10
            <rs type="version">.8</rs> and 
            <rs type="software">Debian</rs> 8), and not too difficult in 
            <rs type="software">Windows</rs> (not tested). Building the Python bindings requires 
            <rs type="software">Cython</rs> (tested with version 
            <rs type="version">0.21</rs>). The library ships with an 
            <rs type="software">Autotools</rs> build configuration, but the source itself is simple enough to be possible to compile "manually", if necessary.
        </p>
        <p>Command-line interface. 
            <rs type="software">Building</rs>
            <rs type="software">FreeSASA</rs> creates the binary freesasa. The simplest program call, with default parameters, is $ freesasa 3wbm.pdb using the structure with PDB code 3wbm as an example (a protein-RNA complex). The above produces the following output The numbers in the results section are the SASA values (in Ã… 2 ) for the respective groups of atoms.
        </p>
        <p>As an illustration of a few of the other configuration options, and how to use the program as a PDB file filter, the command $ freesasa -n 100 --print-as-B-values --no-log &lt; 3wbm.pdb &gt; 3wbm.sasa calculates the SASA of a PDB-file passed via stdin, using 100 slices per atom. The flag --no-log suppresses the regular output. The output will instead, because of the flag --print-as-B-values, be the provided PDB-file with the SASA of each atom replacing the temperature factors, and the atomic radii stored in the occupancy factor field.</p>
        <p>By calling with the option --chain-groups, $ freesasa --chain-groups=ABCD+XY 3wbm.pdb two calculations are appended to the original output, one where only the four chains A, B, C and D have been included, and one with only X and Y.</p>
        <p>The option --select can be used to select a set of atoms using a subset of the selection syntax used in the program 
            <rs type="software">Pymol</rs> (DeLano, 2002). For example, the command $ freesasa --select="RNA, resn A+U+G+C" will produce the following output (after the regular output shown above)
        </p>
        <p>where RNA is simply the user-defined name of the selection, and the number the contribution to the total SASA from the bases A, U, G and C (which we in this particular case could have got by simply adding the areas for the chains X and Y in the sample output above).</p>
        <p>The command $ freesasa -h prints a help message listing all available options, including other ways to redirect output and how to change different calculation parameters (the most detailed information can be found online at http://freesasa.github.io/doxygen/CLI.html).</p>
        <p>C API. The C code below illustrates how to perform a 
            <rs type="software">SASAcalculation</rs> on the same PDB-file as above, using the C API, with default parameters. The functions and types used are all defined in the header freesasa.h.
        </p>
        <p>FILE *fp = fopen("3wbm.pdb","r"); freesasa_structure *structure = freesasa_structure_from_pdb(fp, NULL, 0); freesasa_result *result = freesasa_calc_structure(structure, NULL); printf("Total area : %f A2\n", result-&gt;total);</p>
        <p>The two points where null pointers are passed as arguments are places where atom classifiers and calculation parameters could have been provided. A more elaborate example that includes error handling and freeing of allocated resources can be seen in Figure 1. The API also allows the user to calculate the SASA of a set of coordinates with associated radii. The code below puts two atoms at positions 1 x ï¿½ = (1, 1, 1) and 2 x ï¿½ = (2, 2, 2) with radii r 1 = 2 and r 2 = 3, respectively, and outputs the SASA of the individual atoms. This set was generated from the most restrictive list of structures in the PISCES database (Wang &amp; Dunbrack, 2003). 88 PDB files were selected randomly from a set of size intervals in this list, to get an approximately even distribution in size.</p>
        <p>Dataset 2. Zip-archive with raw data for the performance analysis in Figure 2 and Figure 3 http://dx.doi.org/10.5256/f1000research.7931.d112978</p>
        <p>See the file explanation.txt for an overview of the contents of the archive.</p>
        <p>The computational efficiency of the two algorithms was compared by running the 
            <rs type="software">FreeSASA</rs> command-line program with different parameters on a set of 88 PDB structures selected from the PISCES database (Wang &amp; Dunbrack, 2003) (see Dataset 1 for a list).
        </p>
        <p>
            <rs type="software">PISCES</rs> specifies a specific chain in each structure, but in the following all chains were used, which resulted in the largest structure having over 30,000 atoms (1jz8). To average out some variation in the running time in these rather short calculations (in some cases &lt; 10 ms), the fastest calculations were run two to five times. As we will see below, error bars are relatively small along that axis.
        </p>
        <p>To measure the accuracy of the two algorithms, a reference SASA value, A ref , was calculated using L&amp;R with 1000 slices per atom for each structure. The error of a given SASA-value, A, is then The mean of the error Îµ in SASA vs T / N, for the two algorithms in 
            <rs type="software">FreeSASA</rs> plus the programs 
            <rs type="software">NACCESS</rs> and 
            <rs type="software">POPS</rs>. Labels indicate the resolution used for each set of calculations, and error bars the standard error along both axes. The solid lines are only there to guide the eye, and the dashed lines indicate the analogous lines when using 2 and 4 threads in 
            <rs type="software">FreeSASA</rs>. An L&amp;R run with 1000 slices was used as A ref when calculating Îµ for both approximations. 
            <rs type="software">NACCESS</rs> uses L&amp;R and was run with three values of the z-parameter (0.1, 0.05 and 0.01, corresponding to 10, 20 and 100 slices per atom), a run with z-parameter 0.005 was used as A ref (using even lower z-values gave inconsistent results). The 
            <rs type="software">NACCESS</rs> reference calculation was also used as reference for POPS. All programs were compiled using 
            <rs type="software">GCC</rs>
            <rs type="version">4.9.3</rs> with the optimization flag "-Ofast" and the tests were run on an Intel Core i5-2415M CPU at 2.30 GHz. The raw data for this figure can be found in Dataset 2.
        </p>
        <p>Comparisons were done with 
            <rs type="software">NACCESS</rs>
            <rs type="version">2.1.1</rs> (Hubbard &amp; Thornton, 1993), 
            <rs type="software">DSSP</rs>
            <rs type="version">2.2.1</rs> (Touw et al., 2015), NSOL 1.7 (Masuya, 2003), POPS 1.6.4 (Cavallo et al., 2003) and Triforce 0.1 (Drechsel et al., 2014). The list could potentially have been a lot longer; some programs were left out on the basis of being closed source, poorly documented or no longer available. 
            <rs type="software">NACCESS</rs> was included in spite of its limiting license due to its popularity. The 
            <rs type="software">SASA</rs> facilities in molecular dynamics packages were not considered since these cater to a different use case.
        </p>
        <p>
            <rs type="software">NACCESS</rs> allows the user to choose arbitrary resolution and can therefore be used as a reference for itself, and POPS was optimized with NACCESS as reference. 
            <rs type="software">NACCESS</rs> uses L&amp;R and performs very similarly to 
            <rs type="software">FreeSASA</rs> using L&amp;R. The POPS algorithm is intended as a fast coarse-grained approximation; its authors state an average error of 2.6 Ã… 2 per atom (Cavallo et al., 2003). In Figure 2 the mean Îµ is lower than that, which is expected, since this error is measured over the total SASA, not atom by atom. A fit showed that POPS runs in O(N 2 ) time (using the data in the file pops.dat in Dataset 2), which to some extent explains the relatively long mean calculation time per atom.
        </p>
        <p>The other programs listed above were left out of Figure 2 because they can not be compared under the same premises. 
            <rs type="software">DSSP</rs> calculates many different things in addition to its 200 test-point S&amp;Rcalculation, and the total running time is therefore naturally longer than the corresponding calculation in 
            <rs type="software">FreeSASA</rs>, although the accuracy should be comparable for the same number of test points. The program 
            <rs type="software">NSOL</rs> uses S&amp;R, but does five different SASA calculations on the same input using different parameters. The 
            <rs type="software">NSOL</rs> code was modified to only do one of the five calculations, and is then only slightly slower than 
            <rs type="software">FreeSASA</rs> using the same number The histograms shows the distribution of the calculation time using two or four threads divided by the time using one thread. Thus if this fraction is two or four, respectively, we have "perfect" parallelization. The legends indicate the resolution of the calculation: for L&amp;R, slices per atom, and for S&amp;R, number of test points. The raw data for this figure can be found in Dataset 2. of test points. Lastly, 
            <rs type="software">Triforce</rs> is not suitable for comparison in this particular use case because it has a high initialization cost, which makes it slow for calculating the SASA of an isolated structure.
        </p>
        <p>In single-threaded mode, 
            <rs type="software">FreeSASA</rs> using L&amp;R is almost indistinguishable from NACCESS in Figure 2, but it is significantly faster when 2 or 4 threads are used. The effect of spreading the calculation over several threads is shown in more detail in Figure 3. Since the generation of cell lists is not parallelized, using more than one thread only gives a significant performance benefit in the high resolution limit. Based on these results, the default has been set to two threads. Depending on the nature of the calculations, this speedup can make a noticeable difference.
        </p>
        <p>
            <rs type="software">FreeSASA</rs> is an efficient library for calculating the SASA of protein, RNA and DNA structures. Its main advantages over other commonly used tools is that it is open source, easily configurable and can be used both as a command line tool, a C library and a Python 
            <rs type="software">module</rs>. The tests above demonstrate that it runs as fast as, or faster than, some popular tools at a given resolution, and can be boosted further by parallelizing the calculation.
        </p>
        <p>Data and software availability 1.</p>
        <p>3.</p>
        <p>Thanks for your comments and suggestions. I interpret most of them as being better solved by improving the functionality and/or documentation of the program itself, rather than revising the paper. For the sake of brevity not all the functionality is described in the paper, but is available in the online documentation.</p>
        <p>The default behavior is to calculate the SASA of the chains in the complex. The command option '--chain-groups' described in the paper allows the user to look at combinations of chains in isolation. The option '--separate-chains', is not discussed in the paper, but can be used to treats each chain separately (i.e. for a four chain protein '--chain-groups=A+B+C+D' would be equivalent to '--separate-chains'). My intention was to give the user the ability to calculate the total ASA of different combinations of chains, and then do the arithmetic of the changes themselves. I will look into adding command-line options to do this automatically in future versions of the program.</p>
        <p>The option '--foreach-residue' (not described in the paper) can be used to print the SASA of each residue.</p>
        <p>It is hard to give a general recommendation here, but I chose to use the same default resolution as NACCESS since this seems to be an accepted standard. If one is looking for changes due to minor conformational changes, a higher resolution might be needed. The average of / in Dataset 2 is 5.6 Ã… , and the average error in Figure 2 for the default A N resolution is around 0.002 Ã… , i.e. the error in the total SASA ( ) is on average 0.002/5.6 &lt; A 1/1000.</p>
        <p>As mentioned in the paper, the ProtOr atomic radii are used. I think the easiest way of comparing these with those employed in 
            <rs type="software">NACCESS</rs> and 
            <rs type="software">DSSP</rs> is to compare the radii in the configuration-files supplied with the program (in the directory share/). I was not able to get hold of FANTOM or any other analytical program, so I have unfortunately not been able to compare directly. As mentioned I compared with the semi-analytical Triforce, which was significantly slower when run on a single structure due to high initialization cost. I assume Triforce performs better when the same instance of the program is run on many structures, but that is a different use case.
        </p>
        <p>The command 'freesasa -h' lists all options. I decided not to provide this list in the paper because it will probably expand as time goes, and then the paper would quickly become outdated.</p>
        <p>Thank you for these suggestions, I will look into ways of adding more functionality to the Python bindings.</p>
        <p>F1000Research 2016, 5:189 Last updated: 29 FEB 2016</p>
        <p>Thanks go to Edvin Fuglebakk for comments on the code and documentation. Thanks to Sandhya P. Tiwari and Anders IrbÃ¤ck for comments on the manuscript. Thanks to JoÃ£o Rodrigues for suggestions for improved functionality.</p>
        <p>F1000Research: Dataset 1. List of PDB codes used for the performance analysis, 10.5256/f1000research.7931.d112977 (Mitternacht, 2016a).</p>
        <p>F1000Research: Dataset 2. Zip-archive with raw data for the performance analysis in Figure 2 and Figure 3 , 10.5256/ f1000research.7931.d112978 (Mitternacht, 2016b.</p>
        <p>
            <rs type="software">Latest</rs> source code and software available from 
            <rs type="url">http://freesasa. github.io</rs>/ Archived source code as at the time of publication http://dx.doi. org/10.5281/zenodo.45239 (Mitternacht, 2016c).
        </p>
        <p>License GNU GPL v3 (http://www.gnu.org/licenses/gpl-3.0.en.html).</p>
        <p>No competing interests are disclosed.</p>
        <p>The author declared that no grants were involved in supporting this work.</p>
        <p>Version 
            <rs type="version">1</rs>
        </p>
        <p>29 February 2016 Referee Report doi:10.5256/f1000research.8538.r12528 , Yaoqi Zhou Yuedong Yang Institute of Glycomics, Griffith University, Gold Coast, QLD, Australia Solvent accessible surface area is a frequently calculated quantity in structural bioinformatics. Although many tools are available, an open source, easy-to-use program is certainly welcome. The author did a careful test and performed comparative studies to existing tools. The code is clearly written and well documented. There are no major changes required for this clearly written manuscript. Here are some minor questions requiring further clarifications and additions.</p>
        <p>For multiple chains or a protein-ligand complex structure, does Freesasa yield the ASA for isolated chains or chains in the complex structure? It would be better if the program has an option to calculate the change of ASA on a residue before and after binding to another molecule (ligand, RNA, DNA, another chain) assuming that there is no structural change upon binding. This would allow to identify the functional residues.</p>
        <p>Please clarify the command to produce a residue-level ASA, rather than the atomic level ASA.</p>
        <p>What are default recommendations for the ASA calculation in term of resolution required or choice of LR and SR approximations?</p>
        <p>Are the default atomic radii employed here the same as used in DSSP and/or NACCESS? If different, what are the main differences?</p>
        <p>Is this method faster than analytical methods? If so, by how much?</p>
        <p>Can authors provide a table that lists all possible commands?</p>
        <p>The program would be more useful if it can directly read in Biopython data structure and work with 
            <rs type="software">pymol</rs>.
        </p>
        <p>We have read this submission. We believe that we have an appropriate level of expertise to confirm that it is of an acceptable scientific standard.</p>
        <p>No competing interests were disclosed.</p>
        <p>Author Response 29 Feb 2016 ,</p>
        <p>Faculty of Life Sciences, University of Manchester, Manchester, UK This is a simple and effective implementation of the two main heuristics used for calculating solvent accessible surface area of atomic structures such as proteins. The algortihm, 
            <rs type="software">FreeSASA</rs>, is suitably described and tested in the article. I see no real need to ask for any changes, as the author has done a very professional and nice job here. It downloads and installs very smoothly and offers most of the functionality that 
            <rs type="software">NACCESS</rs> offers, so will be appreciated by legacy users I would imagine (though some things have not been implemented, probably with good reason -either way, not a problem for me -and the author can react to requests or users can do a little work to get what they want in terms of formatting). I am sure the ability to thread across multiple cores will be beneficial and speed things up, and the API will make it slot into python pipelines etc. It's possible that it won't directly supplant some NACCESS dependencies which rely on its rather old formatting (.rsa file for example perhaps) but this is probably only a minor concern and easily fixed if needed (since its fully open source, its probably reduced to changing a few print statements anyway).
        </p>
        <p>I have read this submission. I believe that I have an appropriate level of expertise to confirm that it is of an acceptable scientific standard.</p>
        <p>The reviewer as one of the original co-authors of 
            <rs type="software">NACCESS</rs>, one of the software 
            <rs type="software">Competing Interests</rs>: tools this program is compared with. This is freely available to academic users but licenced, via UCL e-lucid, to commerical users.
        </p>
    </text>
</tei>
