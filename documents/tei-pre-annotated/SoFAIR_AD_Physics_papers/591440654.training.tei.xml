<?xml version="1.0" encoding="UTF-8"?>
<tei xmlns="http://www.tei-c.org/ns/1.0">
    <teiHeader>
        <fileDesc xml:id="_1"/>
        <encodingDesc>
            <appInfo>
                <application version="0.8.1-SNAPSHOT" ident="GROBID" when="2024-06-14T14:30+0000">
                    <ref target="https://github.com/kermitt2/grobid">A machine learning software for extracting information from scholarly documents</ref>
                </application>
            </appInfo>
        </encodingDesc>
    </teiHeader>
    <text xml:lang="en">
        <p>exoplanet is a toolkit for probabilistic modeling of astronomical time series data, with a focus on observations of exoplanets, using 
            <rs type="software">PyMC3</rs> (Salvatier et al., 2016). 
            <rs type="software">PyMC3</rs> is a flexible and high-performance model building language and inference engine that scales well to problems with a large number of parameters. exoplanet extends 
            <rs type="software">PyMC3</rs>'s modeling language to support many of the custom functions and probability distributions required when fitting exoplanet datasets or other astronomical time series.
        </p>
        <p>While it has been used for other applications, such as the study of stellar variability (e.g., Gillen et al., 2020;Medina et al., 2020), the primary purpose of exoplanet is the characterization of exoplanets (e.g., Gilbert et al., 2020;Plavchan et al., 2020) or multiple star systems (e.g., Czekala et al., 2021) using time series photometry, astrometry, and/or radial velocity. In particular, the typical use case would be to use one or more of these datasets to place constraints on the physical and orbital parameters of the system, such as planet mass or orbital period, while simultaneously taking into account the effects of stellar variability.While it has been used for other applications, such as the study of stellar variability (e.g., Gillen et al., 2020;Medina et al., 2020), the primary purpose of exoplanet is the characterization of exoplanets (e.g., Gilbert et al., 2020;Plavchan et al., 2020) or multiple star systems (e.g., Czekala et al., 2021) using time series photometry, astrometry, and/or radial velocity. In particular, the typical use case would be to use one or more of these datasets to place constraints on the physical and orbital parameters of the system, such as planet mass or orbital period, while simultaneously taking into account the effects of stellar variability.</p>
        <p>Time domain astronomy is a priority of the observational astronomical community, with huge survey datasets currently available and more forthcoming. Within this research domain, there is significant investment into the discovery and characterization of exoplanets, planets orbiting stars other than our Sun. These datasets are large (on the scale of hundreds of thousands of observations per star from space-based observatories such as Kepler and TESS), and the research questions are becoming more ambitious (in terms of both the computational cost of the physical models and the flexibility of these models). The packages in the exoplanet ecosystem are designed to enable rigorous probabilistic inference with these large datasets and high-dimensional models by providing a high-performance and well-tested infrastructure for integrating these models with modern modeling frameworks such as 
            <rs type="software">PyMC3</rs>. Since its initial release at the end of 2018, exoplanet has been widely used, with 64 citations of the Zenodo record (Foreman-Mackey et al., 2021) so far.
        </p>
        <p>Besides the primary exoplanet package, the exoplanet ecosystem of projects includes several other libraries. This paper describes, and is the primary reference for, this full suite of packages.Besides the primary exoplanet package, the exoplanet ecosystem of projects includes several other libraries. This paper describes, and is the primary reference for, this full suite of packages.</p>
        <p>The following provides a short description of each library within this ecosystem and discusses how they are related.The following provides a short description of each library within this ecosystem and discusses how they are related.</p>
        <p>• exoplanet1 is the primary library, and it includes implementations of many special functions required for exoplanet data analysis. These include the spherical geometry for computing orbits, some exoplanet-specific distributions for eccentricity (Kipping, 2013a;Van Eylen et al., 2019) and limb darkening (Kipping, 2013b), and exposure-time integrated limb darkened transit light curves. • exoplanet-core2 provides efficient, well-tested, and differentiable implementations of all of the exoplanet-specific operations that must be compiled for performance. These include an efficient solver for Kepler's equation (based on the algorithm proposed by Raposo-Pulido &amp; Peláez, 2017) and limb darkened transit light curves (Agol et al., 2020).• exoplanet1 is the primary library, and it includes implementations of many special functions required for exoplanet data analysis. These include the spherical geometry for computing orbits, some exoplanet-specific distributions for eccentricity (Kipping, 2013a;Van Eylen et al., 2019) and limb darkening (Kipping, 2013b), and exposure-time integrated limb darkened transit light curves. • exoplanet-core2 provides efficient, well-tested, and differentiable implementations of all of the exoplanet-specific operations that must be compiled for performance. These include an efficient solver for Kepler's equation (based on the algorithm proposed by Raposo-Pulido &amp; Peláez, 2017) and limb darkened transit light curves (Agol et al., 2020).</p>
        <p>Besides the implementation for 
            <rs type="software">PyMC3</rs>, exoplanet-core includes implementations in 
            <rs type="software">numpy</rs> (Harris et al., 2020) and jax (Bradbury et al., 2018). • celerite23 , is an updated implementation of the celerite algorithm4 (Foreman-Mackey, 2018; Foreman-Mackey et al., 2017) for scalable Gaussian Process regression for time series data. Like exoplanet-core, celerite2 includes support for numpy, jax, and 
            <rs type="software">PyMC3</rs>, as well as some recent generalizations of the celerite algorithm (Gordon et al., 2020). • 
            <rs type="software">pymc3-ext</rs>5 , includes a set of helper functions to make 
            <rs type="software">PyMC3</rs> more amenable to the typical astronomical data analysis workflow. For example, it provides a tuning schedule for 
            <rs type="software">PyMC3</rs>'s sampler (based on the method used by the Stan project and described by Carpenter et al., 2017) that provides better performance on models with correlated parameters. • rebound-pymc36 provides an interface between REBOUND (Rein &amp; Liu, 2012), RE-BOUNDx (Tamayo et al., 2020), and 
            <rs type="software">PyMC3</rs> to enable inference with full N-body orbit integration.
        </p>
        <p>The main documentation page for the exoplanet libraries lives at docs.exoplanet.codes where it is hosted on 
            <rs type="software">ReadTheDocs</rs>. The tutorials included with the documentation are automatically executed on every push or pull request to the GitHub repository, with the goal of ensuring that the tutorials are always compatible with the current version of the code. The celerite2 project has its own documentation page at celerite2.readthedocs.io, with tutorials that are similarly automatically executed.
        </p>
        <p>Alongside these documentation pages, there is a parallel "Case Studies" website at gallery.exoplanet.codes that includes more detailed example use cases for exoplanet and the other libraries described here. Like the tutorials on the documentation page, these case studies are automatically executed using 
            <rs type="software">GitHub</rs> Actions, but at lower cadence (once a week and when a new release of the exoplanet library is made) since the runtime is much longer.
        </p>
        <p>Figure 1 shows the results of two example case studies demonstrating some of the potential use cases of the exoplanet software ecosystem.Figure 1 shows the results of two example case studies demonstrating some of the potential use cases of the exoplanet software ecosystem.</p>
        <p>There is a rich ecosystem of tooling available for inference with models such as the ones supported by exoplanet. Each of these tools has its own set of strengths and limitations and we will not make a detailed comparison here, but it is worth listing some of these tools and situating exoplanet in this context. Some of the most popular tools in this space include (and note that this is far from a comprehensive list!) 
            <rs type="software">EXOFAST</rs> (J. Eastman et al., 2013;J. D. Eastman et al., 2019), 
            <rs type="software">radvel</rs> (Fulton et al., 2018), juliet (Espinoza et al., 2019), exostriker (Trifonov, 2019), 
            <rs type="software">PYANETI</rs> (Barragán et al., 2019), 
            <rs type="software">allesfitter</rs> (Günther &amp; Daylan, 2021), and orbitize (Blunt et al., 2020). Similar tools also exist for modeling observations of eclipsing binary systems, including 
            <rs type="software">JKTEBOP</rs> (Southworth et al., 2004), 
            <rs type="software">eb</rs> (Irwin et al., 2011), andPHOEBE (Conroy et al., 2020). These packages all focus on providing a high-level interface for designing models and then executing a fit. exoplanet, however, is designed to be lower level and more conceptually similar to tools like 
            <rs type="software">batman</rs> (Kreidberg, 2015), 
            <rs type="software">PyTransit</rs> (Hannu Parviainen, 2015), 
            <rs type="software">ldtk</rs> (H. Parviainen &amp; Aigrain, 2015), ellc (Maxted, 2016), 
            <rs type="software">starry</rs> (Luger et al., 2019), or 
            <rs type="software">Limbdark.jl</rs> (Agol et al., 2020), which provide the building blocks for evaluating the models required for inference with exoplanet datasets. In fact, several of the higher-level packages listed above include these lower-level libraries as dependencies, and our hope is that exoplanet could provide the backend for future high-level libraries.
        </p>
        <p>As emphasized in the title of this paper, the main selling point of exoplanet when compared to other tools in this space is that it supports differentiation of all components of the model and is designed to integrate seamlessly with the aesara (Willard et al., 2021) automatic differentiation framework used by 
            <rs type="software">PyMC3</rs>. It is worth noting that aesara was previously known as Theano (
            <rs type="creator">Theano Development Team</rs>, 2016), so these names are sometimes used interchangeably in the 
            <rs type="software">PyMC3</rs> or exoplanet documentation7 . This allows the use of modern inference algorithms such as No U-Turn Sampling (Hoffman &amp; Gelman, 2014) or Automatic Differentiation Variational Inference (Kucukelbir et al., 2017). These algorithms can have some computational and conceptual advantages over inference methods that do not use gradients, especially for high-dimensional models. The computation of gradients is also useful for model optimization; this is necessary when, say, searching for new exoplanets, mapping out degeneracies or multiple modes of a posterior, or estimating uncertainties from a Hessian. Care has been taken to provide gradients which are numerically stable, and more accurate and faster to evaluate than finite-difference gradients.
        </p>
        <p>https://github.com/exoplanet-dev/exoplanethttps://github.com/exoplanet-dev/exoplanet</p>
        <p>https://github.com/exoplanet-dev/exoplanet-corehttps://github.com/exoplanet-dev/exoplanet-core</p>
        <p>https://celerite2.readthedocs.iohttps://celerite2.readthedocs.io</p>
        <p>https://celerite.readthedocs.iohttps://celerite.readthedocs.io</p>
        <p>https://github.com/exoplanet-dev/pymc3-exthttps://github.com/exoplanet-dev/pymc3-ext</p>
        <p>https://github.com/exoplanet-dev/rebound-pymc3https://github.com/exoplanet-dev/rebound-pymc3</p>
        <p>More information about this distinction is available at https://docs.exoplanet.codes/en/stable/user/ theano/More information about this distinction is available at https://docs.exoplanet.codes/en/stable/user/ theano/</p>
        <p>We would like to thank the Astronomical Data Group at Flatiron for listening to every iteration of this project and for providing great feedback every step of the way. This research was partially conducted during the Exostar19 program at the Kavli Institute for Theoretical Physics at UC Santa Barbara, which was supported in part by the National Science Foundation under Grant No. NSF PHY-1748958.We would like to thank the Astronomical Data Group at Flatiron for listening to every iteration of this project and for providing great feedback every step of the way. This research was partially conducted during the Exostar19 program at the Kavli Institute for Theoretical Physics at UC Santa Barbara, which was supported in part by the National Science Foundation under Grant No. NSF PHY-1748958.</p>
        <p>Besides the software cited above, exoplanet is also built on top of 
            <rs type="software">ArviZ</rs> (Kumar et al., 2019) and 
            <rs type="software">AstroPy</rs> (Astropy Collaboration et al., 2018Collaboration et al., , 2013)).
        </p>
    </text>
</tei>
